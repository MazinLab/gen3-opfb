-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity castArrayS2Streaming is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_inData_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    p_inData_empty_n : IN STD_LOGIC;
    p_inData_read : OUT STD_LOGIC;
    p_outData_V_superSample_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    p_outData_V_superSample_full_n : IN STD_LOGIC;
    p_outData_V_superSample_write : OUT STD_LOGIC );
end;


architecture behav of castArrayS2Streaming is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_inData_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_outData_V_superSample_blk_n : STD_LOGIC;
    signal t_fu_603_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln58_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_01_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_inData_M_imag_V_l_14_fu_524_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_13_fu_504_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_12_fu_484_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_11_fu_464_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_10_fu_444_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_15_fu_424_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_9_fu_404_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_8_fu_384_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_7_fu_364_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_6_fu_344_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_5_fu_324_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_4_fu_304_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_3_fu_284_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_2_fu_264_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_1_fu_244_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_imag_V_l_fu_224_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_14_fu_514_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_13_fu_494_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_12_fu_474_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_11_fu_454_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_10_fu_434_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_fu_414_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_9_fu_394_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_8_fu_374_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_7_fu_354_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_6_fu_334_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_5_fu_314_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_4_fu_294_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_3_fu_274_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_2_fu_254_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_inData_M_real_V_l_1_fu_234_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln203_fu_220_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (p_outData_V_superSample_full_n = ap_const_logic_0) or (p_inData_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln58_fu_609_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    t_01_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_outData_V_superSample_full_n = ap_const_logic_0) or (p_inData_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln58_fu_609_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_01_reg_206 <= t_fu_603_p2;
            elsif (((not(((ap_start = ap_const_logic_0) or (p_outData_V_superSample_full_n = ap_const_logic_0) or (p_inData_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln58_fu_609_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                t_01_reg_206 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_inData_empty_n, p_outData_V_superSample_full_n, ap_CS_fsm_state2, icmp_ln58_fu_609_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_outData_V_superSample_full_n = ap_const_logic_0) or (p_inData_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln58_fu_609_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_start = ap_const_logic_0) or (p_outData_V_superSample_full_n = ap_const_logic_0) or (p_inData_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(ap_start, ap_done_reg, p_inData_empty_n, p_outData_V_superSample_full_n)
    begin
                ap_block_state2 <= ((ap_start = ap_const_logic_0) or (p_outData_V_superSample_full_n = ap_const_logic_0) or (p_inData_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, p_inData_empty_n, p_outData_V_superSample_full_n, ap_CS_fsm_state2, icmp_ln58_fu_609_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_outData_V_superSample_full_n = ap_const_logic_0) or (p_inData_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln58_fu_609_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, p_inData_empty_n, p_outData_V_superSample_full_n, ap_CS_fsm_state2, icmp_ln58_fu_609_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_outData_V_superSample_full_n = ap_const_logic_0) or (p_inData_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (icmp_ln58_fu_609_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln58_fu_609_p2 <= "1" when (t_01_reg_206 = ap_const_lv8_FF) else "0";
    p_inData_M_imag_V_l_10_fu_444_p4 <= p_inData_dout(383 downto 368);
    p_inData_M_imag_V_l_11_fu_464_p4 <= p_inData_dout(415 downto 400);
    p_inData_M_imag_V_l_12_fu_484_p4 <= p_inData_dout(447 downto 432);
    p_inData_M_imag_V_l_13_fu_504_p4 <= p_inData_dout(479 downto 464);
    p_inData_M_imag_V_l_14_fu_524_p4 <= p_inData_dout(511 downto 496);
    p_inData_M_imag_V_l_15_fu_424_p4 <= p_inData_dout(351 downto 336);
    p_inData_M_imag_V_l_1_fu_244_p4 <= p_inData_dout(63 downto 48);
    p_inData_M_imag_V_l_2_fu_264_p4 <= p_inData_dout(95 downto 80);
    p_inData_M_imag_V_l_3_fu_284_p4 <= p_inData_dout(127 downto 112);
    p_inData_M_imag_V_l_4_fu_304_p4 <= p_inData_dout(159 downto 144);
    p_inData_M_imag_V_l_5_fu_324_p4 <= p_inData_dout(191 downto 176);
    p_inData_M_imag_V_l_6_fu_344_p4 <= p_inData_dout(223 downto 208);
    p_inData_M_imag_V_l_7_fu_364_p4 <= p_inData_dout(255 downto 240);
    p_inData_M_imag_V_l_8_fu_384_p4 <= p_inData_dout(287 downto 272);
    p_inData_M_imag_V_l_9_fu_404_p4 <= p_inData_dout(319 downto 304);
    p_inData_M_imag_V_l_fu_224_p4 <= p_inData_dout(31 downto 16);
    p_inData_M_real_V_l_10_fu_434_p4 <= p_inData_dout(367 downto 352);
    p_inData_M_real_V_l_11_fu_454_p4 <= p_inData_dout(399 downto 384);
    p_inData_M_real_V_l_12_fu_474_p4 <= p_inData_dout(431 downto 416);
    p_inData_M_real_V_l_13_fu_494_p4 <= p_inData_dout(463 downto 448);
    p_inData_M_real_V_l_14_fu_514_p4 <= p_inData_dout(495 downto 480);
    p_inData_M_real_V_l_1_fu_234_p4 <= p_inData_dout(47 downto 32);
    p_inData_M_real_V_l_2_fu_254_p4 <= p_inData_dout(79 downto 64);
    p_inData_M_real_V_l_3_fu_274_p4 <= p_inData_dout(111 downto 96);
    p_inData_M_real_V_l_4_fu_294_p4 <= p_inData_dout(143 downto 128);
    p_inData_M_real_V_l_5_fu_314_p4 <= p_inData_dout(175 downto 160);
    p_inData_M_real_V_l_6_fu_334_p4 <= p_inData_dout(207 downto 192);
    p_inData_M_real_V_l_7_fu_354_p4 <= p_inData_dout(239 downto 224);
    p_inData_M_real_V_l_8_fu_374_p4 <= p_inData_dout(271 downto 256);
    p_inData_M_real_V_l_9_fu_394_p4 <= p_inData_dout(303 downto 288);
    p_inData_M_real_V_l_fu_414_p4 <= p_inData_dout(335 downto 320);

    p_inData_blk_n_assign_proc : process(ap_start, ap_done_reg, p_inData_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_inData_blk_n <= p_inData_empty_n;
        else 
            p_inData_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_inData_read_assign_proc : process(ap_start, ap_done_reg, p_inData_empty_n, p_outData_V_superSample_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_outData_V_superSample_full_n = ap_const_logic_0) or (p_inData_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_inData_read <= ap_const_logic_1;
        else 
            p_inData_read <= ap_const_logic_0;
        end if; 
    end process;


    p_outData_V_superSample_blk_n_assign_proc : process(ap_start, ap_done_reg, p_outData_V_superSample_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_outData_V_superSample_blk_n <= p_outData_V_superSample_full_n;
        else 
            p_outData_V_superSample_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_outData_V_superSample_din <= (((((((((((((((((((((((((((((((p_inData_M_imag_V_l_14_fu_524_p4 & p_inData_M_imag_V_l_13_fu_504_p4) & p_inData_M_imag_V_l_12_fu_484_p4) & p_inData_M_imag_V_l_11_fu_464_p4) & p_inData_M_imag_V_l_10_fu_444_p4) & p_inData_M_imag_V_l_15_fu_424_p4) & p_inData_M_imag_V_l_9_fu_404_p4) & p_inData_M_imag_V_l_8_fu_384_p4) & p_inData_M_imag_V_l_7_fu_364_p4) & p_inData_M_imag_V_l_6_fu_344_p4) & p_inData_M_imag_V_l_5_fu_324_p4) & p_inData_M_imag_V_l_4_fu_304_p4) & p_inData_M_imag_V_l_3_fu_284_p4) & p_inData_M_imag_V_l_2_fu_264_p4) & p_inData_M_imag_V_l_1_fu_244_p4) & p_inData_M_imag_V_l_fu_224_p4) & p_inData_M_real_V_l_14_fu_514_p4) & p_inData_M_real_V_l_13_fu_494_p4) & p_inData_M_real_V_l_12_fu_474_p4) & p_inData_M_real_V_l_11_fu_454_p4) & p_inData_M_real_V_l_10_fu_434_p4) & p_inData_M_real_V_l_fu_414_p4) & p_inData_M_real_V_l_9_fu_394_p4) & p_inData_M_real_V_l_8_fu_374_p4) & p_inData_M_real_V_l_7_fu_354_p4) & p_inData_M_real_V_l_6_fu_334_p4) & p_inData_M_real_V_l_5_fu_314_p4) & p_inData_M_real_V_l_4_fu_294_p4) & p_inData_M_real_V_l_3_fu_274_p4) & p_inData_M_real_V_l_2_fu_254_p4) & p_inData_M_real_V_l_1_fu_234_p4) & trunc_ln203_fu_220_p1);

    p_outData_V_superSample_write_assign_proc : process(ap_start, ap_done_reg, p_inData_empty_n, p_outData_V_superSample_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_outData_V_superSample_full_n = ap_const_logic_0) or (p_inData_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_outData_V_superSample_write <= ap_const_logic_1;
        else 
            p_outData_V_superSample_write <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_603_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(t_01_reg_206));
    trunc_ln203_fu_220_p1 <= p_inData_dout(16 - 1 downto 0);
end behav;
