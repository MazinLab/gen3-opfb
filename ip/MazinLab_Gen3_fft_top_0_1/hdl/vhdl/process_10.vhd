-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_in_0_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_1_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_2_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_3_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_4_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_5_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_6_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_7_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_8_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_9_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_10_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_11_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_12_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_13_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_14_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_0_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_1_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_2_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_3_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_4_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_5_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_6_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_7_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_8_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_9_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_10_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_11_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_12_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_13_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_14_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_0_valid_read : IN STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of process_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_DF : STD_LOGIC_VECTOR (7 downto 0) := "11011111";
    constant ap_const_lv8_CF : STD_LOGIC_VECTOR (7 downto 0) := "11001111";
    constant ap_const_lv8_BF : STD_LOGIC_VECTOR (7 downto 0) := "10111111";
    constant ap_const_lv8_AF : STD_LOGIC_VECTOR (7 downto 0) := "10101111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal delayline_Array_samp_251_ce0 : STD_LOGIC;
    signal delayline_Array_samp_251_we0 : STD_LOGIC;
    signal delayline_Array_samp_251_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_243_ce0 : STD_LOGIC;
    signal delayline_Array_samp_243_we0 : STD_LOGIC;
    signal delayline_Array_samp_243_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_53_ce0 : STD_LOGIC;
    signal delayline_Array_vali_53_we0 : STD_LOGIC;
    signal delayline_Array_vali_53_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_53_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_289_ce0 : STD_LOGIC;
    signal delayline_Array_samp_289_we0 : STD_LOGIC;
    signal delayline_Array_samp_289_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_77_ce0 : STD_LOGIC;
    signal delayline_Array_samp_77_we0 : STD_LOGIC;
    signal delayline_Array_samp_77_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_78_ce0 : STD_LOGIC;
    signal delayline_Array_vali_78_we0 : STD_LOGIC;
    signal delayline_Array_vali_78_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_78_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_313_ce0 : STD_LOGIC;
    signal delayline_Array_samp_313_we0 : STD_LOGIC;
    signal delayline_Array_samp_313_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_105_ce0 : STD_LOGIC;
    signal delayline_Array_samp_105_we0 : STD_LOGIC;
    signal delayline_Array_samp_105_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_107_ce0 : STD_LOGIC;
    signal delayline_Array_vali_107_we0 : STD_LOGIC;
    signal delayline_Array_vali_107_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_107_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_337_ce0 : STD_LOGIC;
    signal delayline_Array_samp_337_we0 : STD_LOGIC;
    signal delayline_Array_samp_337_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_153_ce0 : STD_LOGIC;
    signal delayline_Array_samp_153_we0 : STD_LOGIC;
    signal delayline_Array_samp_153_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_148_ce0 : STD_LOGIC;
    signal delayline_Array_vali_148_we0 : STD_LOGIC;
    signal delayline_Array_vali_148_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_148_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_start : STD_LOGIC;
    signal call_ret_i_i_process_11_fu_382_ap_done : STD_LOGIC;
    signal call_ret_i_i_process_11_fu_382_ap_idle : STD_LOGIC;
    signal call_ret_i_i_process_11_fu_382_ap_ready : STD_LOGIC;
    signal call_ret_i_i_process_11_fu_382_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_2 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_8 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_11 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_14 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_16 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_17 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_18 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_19 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_20 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_23 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_25 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_26 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_27 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_28 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_29 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_30 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_31 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_return_32 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_i_i_process_11_fu_382_ap_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component process_11 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_in_0_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_1_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_2_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_3_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_4_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_5_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_6_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_7_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_8_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_9_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_10_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_0_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_1_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_2_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_3_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_4_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_5_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_6_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_7_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_8_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_9_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_10_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_in_0_valid_read : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component process_10_delaylcow IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_10_delaylcqw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_10_delaylcrw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_10_delaylctx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_10_delaylcux IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_10_delaylcwx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_10_delaylcxx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_10_delaylczy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    delayline_Array_samp_251_U : component process_10_delaylcow
    generic map (
        DataWidth => 16,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_DF,
        ce0 => delayline_Array_samp_251_ce0,
        we0 => delayline_Array_samp_251_we0,
        d0 => p_in_14_sample_M_real_V_read,
        q0 => delayline_Array_samp_251_q0);

    delayline_Array_samp_243_U : component process_10_delaylcow
    generic map (
        DataWidth => 16,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_DF,
        ce0 => delayline_Array_samp_243_ce0,
        we0 => delayline_Array_samp_243_we0,
        d0 => p_in_14_sample_M_imag_V_read,
        q0 => delayline_Array_samp_243_q0);

    delayline_Array_vali_53_U : component process_10_delaylcqw
    generic map (
        DataWidth => 1,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_DF,
        ce0 => delayline_Array_vali_53_ce0,
        we0 => delayline_Array_vali_53_we0,
        d0 => delayline_Array_vali_53_d0,
        q0 => delayline_Array_vali_53_q0);

    delayline_Array_samp_289_U : component process_10_delaylcrw
    generic map (
        DataWidth => 16,
        AddressRange => 208,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_CF,
        ce0 => delayline_Array_samp_289_ce0,
        we0 => delayline_Array_samp_289_we0,
        d0 => p_in_13_sample_M_real_V_read,
        q0 => delayline_Array_samp_289_q0);

    delayline_Array_samp_77_U : component process_10_delaylcrw
    generic map (
        DataWidth => 16,
        AddressRange => 208,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_CF,
        ce0 => delayline_Array_samp_77_ce0,
        we0 => delayline_Array_samp_77_we0,
        d0 => p_in_13_sample_M_imag_V_read,
        q0 => delayline_Array_samp_77_q0);

    delayline_Array_vali_78_U : component process_10_delaylctx
    generic map (
        DataWidth => 1,
        AddressRange => 208,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_CF,
        ce0 => delayline_Array_vali_78_ce0,
        we0 => delayline_Array_vali_78_we0,
        d0 => delayline_Array_vali_78_d0,
        q0 => delayline_Array_vali_78_q0);

    delayline_Array_samp_313_U : component process_10_delaylcux
    generic map (
        DataWidth => 16,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_BF,
        ce0 => delayline_Array_samp_313_ce0,
        we0 => delayline_Array_samp_313_we0,
        d0 => p_in_12_sample_M_real_V_read,
        q0 => delayline_Array_samp_313_q0);

    delayline_Array_samp_105_U : component process_10_delaylcux
    generic map (
        DataWidth => 16,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_BF,
        ce0 => delayline_Array_samp_105_ce0,
        we0 => delayline_Array_samp_105_we0,
        d0 => p_in_12_sample_M_imag_V_read,
        q0 => delayline_Array_samp_105_q0);

    delayline_Array_vali_107_U : component process_10_delaylcwx
    generic map (
        DataWidth => 1,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_BF,
        ce0 => delayline_Array_vali_107_ce0,
        we0 => delayline_Array_vali_107_we0,
        d0 => delayline_Array_vali_107_d0,
        q0 => delayline_Array_vali_107_q0);

    delayline_Array_samp_337_U : component process_10_delaylcxx
    generic map (
        DataWidth => 16,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_AF,
        ce0 => delayline_Array_samp_337_ce0,
        we0 => delayline_Array_samp_337_we0,
        d0 => p_in_11_sample_M_real_V_read,
        q0 => delayline_Array_samp_337_q0);

    delayline_Array_samp_153_U : component process_10_delaylcxx
    generic map (
        DataWidth => 16,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_AF,
        ce0 => delayline_Array_samp_153_ce0,
        we0 => delayline_Array_samp_153_we0,
        d0 => p_in_11_sample_M_imag_V_read,
        q0 => delayline_Array_samp_153_q0);

    delayline_Array_vali_148_U : component process_10_delaylczy
    generic map (
        DataWidth => 1,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_AF,
        ce0 => delayline_Array_vali_148_ce0,
        we0 => delayline_Array_vali_148_we0,
        d0 => delayline_Array_vali_148_d0,
        q0 => delayline_Array_vali_148_q0);

    call_ret_i_i_process_11_fu_382 : component process_11
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_i_i_process_11_fu_382_ap_start,
        ap_done => call_ret_i_i_process_11_fu_382_ap_done,
        ap_idle => call_ret_i_i_process_11_fu_382_ap_idle,
        ap_ready => call_ret_i_i_process_11_fu_382_ap_ready,
        p_in_0_sample_M_real_V_read => p_in_0_sample_M_real_V_read,
        p_in_1_sample_M_real_V_read => p_in_1_sample_M_real_V_read,
        p_in_2_sample_M_real_V_read => p_in_2_sample_M_real_V_read,
        p_in_3_sample_M_real_V_read => p_in_3_sample_M_real_V_read,
        p_in_4_sample_M_real_V_read => p_in_4_sample_M_real_V_read,
        p_in_5_sample_M_real_V_read => p_in_5_sample_M_real_V_read,
        p_in_6_sample_M_real_V_read => p_in_6_sample_M_real_V_read,
        p_in_7_sample_M_real_V_read => p_in_7_sample_M_real_V_read,
        p_in_8_sample_M_real_V_read => p_in_8_sample_M_real_V_read,
        p_in_9_sample_M_real_V_read => p_in_9_sample_M_real_V_read,
        p_in_10_sample_M_real_V_read => p_in_10_sample_M_real_V_read,
        p_in_0_sample_M_imag_V_read => p_in_0_sample_M_imag_V_read,
        p_in_1_sample_M_imag_V_read => p_in_1_sample_M_imag_V_read,
        p_in_2_sample_M_imag_V_read => p_in_2_sample_M_imag_V_read,
        p_in_3_sample_M_imag_V_read => p_in_3_sample_M_imag_V_read,
        p_in_4_sample_M_imag_V_read => p_in_4_sample_M_imag_V_read,
        p_in_5_sample_M_imag_V_read => p_in_5_sample_M_imag_V_read,
        p_in_6_sample_M_imag_V_read => p_in_6_sample_M_imag_V_read,
        p_in_7_sample_M_imag_V_read => p_in_7_sample_M_imag_V_read,
        p_in_8_sample_M_imag_V_read => p_in_8_sample_M_imag_V_read,
        p_in_9_sample_M_imag_V_read => p_in_9_sample_M_imag_V_read,
        p_in_10_sample_M_imag_V_read => p_in_10_sample_M_imag_V_read,
        p_in_0_valid_read => p_in_0_valid_read,
        ap_return_0 => call_ret_i_i_process_11_fu_382_ap_return_0,
        ap_return_1 => call_ret_i_i_process_11_fu_382_ap_return_1,
        ap_return_2 => call_ret_i_i_process_11_fu_382_ap_return_2,
        ap_return_3 => call_ret_i_i_process_11_fu_382_ap_return_3,
        ap_return_4 => call_ret_i_i_process_11_fu_382_ap_return_4,
        ap_return_5 => call_ret_i_i_process_11_fu_382_ap_return_5,
        ap_return_6 => call_ret_i_i_process_11_fu_382_ap_return_6,
        ap_return_7 => call_ret_i_i_process_11_fu_382_ap_return_7,
        ap_return_8 => call_ret_i_i_process_11_fu_382_ap_return_8,
        ap_return_9 => call_ret_i_i_process_11_fu_382_ap_return_9,
        ap_return_10 => call_ret_i_i_process_11_fu_382_ap_return_10,
        ap_return_11 => call_ret_i_i_process_11_fu_382_ap_return_11,
        ap_return_12 => call_ret_i_i_process_11_fu_382_ap_return_12,
        ap_return_13 => call_ret_i_i_process_11_fu_382_ap_return_13,
        ap_return_14 => call_ret_i_i_process_11_fu_382_ap_return_14,
        ap_return_15 => call_ret_i_i_process_11_fu_382_ap_return_15,
        ap_return_16 => call_ret_i_i_process_11_fu_382_ap_return_16,
        ap_return_17 => call_ret_i_i_process_11_fu_382_ap_return_17,
        ap_return_18 => call_ret_i_i_process_11_fu_382_ap_return_18,
        ap_return_19 => call_ret_i_i_process_11_fu_382_ap_return_19,
        ap_return_20 => call_ret_i_i_process_11_fu_382_ap_return_20,
        ap_return_21 => call_ret_i_i_process_11_fu_382_ap_return_21,
        ap_return_22 => call_ret_i_i_process_11_fu_382_ap_return_22,
        ap_return_23 => call_ret_i_i_process_11_fu_382_ap_return_23,
        ap_return_24 => call_ret_i_i_process_11_fu_382_ap_return_24,
        ap_return_25 => call_ret_i_i_process_11_fu_382_ap_return_25,
        ap_return_26 => call_ret_i_i_process_11_fu_382_ap_return_26,
        ap_return_27 => call_ret_i_i_process_11_fu_382_ap_return_27,
        ap_return_28 => call_ret_i_i_process_11_fu_382_ap_return_28,
        ap_return_29 => call_ret_i_i_process_11_fu_382_ap_return_29,
        ap_return_30 => call_ret_i_i_process_11_fu_382_ap_return_30,
        ap_return_31 => call_ret_i_i_process_11_fu_382_ap_return_31,
        ap_return_32 => call_ret_i_i_process_11_fu_382_ap_return_32,
        ap_ce => call_ret_i_i_process_11_fu_382_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= delayline_Array_samp_251_q0;
    ap_return_1 <= delayline_Array_samp_243_q0;
    ap_return_10 <= delayline_Array_samp_153_q0;
    ap_return_11 <= delayline_Array_vali_148_q0;
    ap_return_12 <= call_ret_i_i_process_11_fu_382_ap_return_0;
    ap_return_13 <= call_ret_i_i_process_11_fu_382_ap_return_1;
    ap_return_14 <= call_ret_i_i_process_11_fu_382_ap_return_2;
    ap_return_15 <= call_ret_i_i_process_11_fu_382_ap_return_3;
    ap_return_16 <= call_ret_i_i_process_11_fu_382_ap_return_4;
    ap_return_17 <= call_ret_i_i_process_11_fu_382_ap_return_5;
    ap_return_18 <= call_ret_i_i_process_11_fu_382_ap_return_6;
    ap_return_19 <= call_ret_i_i_process_11_fu_382_ap_return_7;
    ap_return_2 <= delayline_Array_vali_53_q0;
    ap_return_20 <= call_ret_i_i_process_11_fu_382_ap_return_8;
    ap_return_21 <= call_ret_i_i_process_11_fu_382_ap_return_9;
    ap_return_22 <= call_ret_i_i_process_11_fu_382_ap_return_10;
    ap_return_23 <= call_ret_i_i_process_11_fu_382_ap_return_11;
    ap_return_24 <= call_ret_i_i_process_11_fu_382_ap_return_12;
    ap_return_25 <= call_ret_i_i_process_11_fu_382_ap_return_13;
    ap_return_26 <= call_ret_i_i_process_11_fu_382_ap_return_14;
    ap_return_27 <= call_ret_i_i_process_11_fu_382_ap_return_15;
    ap_return_28 <= call_ret_i_i_process_11_fu_382_ap_return_16;
    ap_return_29 <= call_ret_i_i_process_11_fu_382_ap_return_17;
    ap_return_3 <= delayline_Array_samp_289_q0;
    ap_return_30 <= call_ret_i_i_process_11_fu_382_ap_return_18;
    ap_return_31 <= call_ret_i_i_process_11_fu_382_ap_return_19;
    ap_return_32 <= call_ret_i_i_process_11_fu_382_ap_return_20;
    ap_return_33 <= call_ret_i_i_process_11_fu_382_ap_return_21;
    ap_return_34 <= call_ret_i_i_process_11_fu_382_ap_return_22;
    ap_return_35 <= call_ret_i_i_process_11_fu_382_ap_return_23;
    ap_return_36 <= call_ret_i_i_process_11_fu_382_ap_return_24;
    ap_return_37 <= call_ret_i_i_process_11_fu_382_ap_return_25;
    ap_return_38 <= call_ret_i_i_process_11_fu_382_ap_return_26;
    ap_return_39 <= call_ret_i_i_process_11_fu_382_ap_return_27;
    ap_return_4 <= delayline_Array_samp_77_q0;
    ap_return_40 <= call_ret_i_i_process_11_fu_382_ap_return_28;
    ap_return_41 <= call_ret_i_i_process_11_fu_382_ap_return_29;
    ap_return_42 <= call_ret_i_i_process_11_fu_382_ap_return_30;
    ap_return_43 <= call_ret_i_i_process_11_fu_382_ap_return_31;
    ap_return_44 <= call_ret_i_i_process_11_fu_382_ap_return_32;
    ap_return_5 <= delayline_Array_vali_78_q0;
    ap_return_6 <= delayline_Array_samp_313_q0;
    ap_return_7 <= delayline_Array_samp_105_q0;
    ap_return_8 <= delayline_Array_vali_107_q0;
    ap_return_9 <= delayline_Array_samp_337_q0;

    call_ret_i_i_process_11_fu_382_ap_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            call_ret_i_i_process_11_fu_382_ap_ce <= ap_const_logic_1;
        else 
            call_ret_i_i_process_11_fu_382_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    call_ret_i_i_process_11_fu_382_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            call_ret_i_i_process_11_fu_382_ap_start <= ap_const_logic_1;
        else 
            call_ret_i_i_process_11_fu_382_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_105_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_105_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_105_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_105_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_105_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_105_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_153_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_153_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_153_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_153_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_153_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_153_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_243_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_243_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_243_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_243_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_243_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_243_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_251_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_251_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_251_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_251_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_251_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_251_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_289_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_289_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_289_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_289_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_289_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_289_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_313_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_313_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_313_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_313_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_313_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_313_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_337_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_337_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_337_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_337_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_337_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_337_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_77_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_77_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_77_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_77_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_77_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_77_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_107_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_107_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_107_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_107_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_107_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_107_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_107_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_148_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_148_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_148_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_148_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_148_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_148_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_148_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_53_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_53_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_53_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_53_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_53_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_53_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_53_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_78_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_78_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_78_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_78_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_78_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_78_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_78_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
