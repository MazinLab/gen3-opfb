-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_in_0_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_1_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_2_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_3_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_4_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_5_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_6_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_7_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_8_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_9_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_10_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_11_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_12_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_13_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_14_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_15_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_0_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_1_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_2_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_3_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_4_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_5_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_6_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_7_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_8_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_9_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_10_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_11_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_12_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_13_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_14_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_15_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_0_valid_read : IN STD_LOGIC;
    p_in_1_valid_read : IN STD_LOGIC;
    p_in_2_valid_read : IN STD_LOGIC;
    p_in_3_valid_read : IN STD_LOGIC;
    p_in_4_valid_read : IN STD_LOGIC;
    p_in_5_valid_read : IN STD_LOGIC;
    p_in_6_valid_read : IN STD_LOGIC;
    p_in_7_valid_read : IN STD_LOGIC;
    p_in_8_valid_read : IN STD_LOGIC;
    p_in_9_valid_read : IN STD_LOGIC;
    p_in_10_valid_read : IN STD_LOGIC;
    p_in_11_valid_read : IN STD_LOGIC;
    p_in_12_valid_read : IN STD_LOGIC;
    p_in_13_valid_read : IN STD_LOGIC;
    p_in_14_valid_read : IN STD_LOGIC;
    p_in_15_valid_read : IN STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of process_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal delayline_Array_samp_294_ce0 : STD_LOGIC;
    signal delayline_Array_samp_294_we0 : STD_LOGIC;
    signal delayline_Array_samp_294_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_82_ce0 : STD_LOGIC;
    signal delayline_Array_samp_82_we0 : STD_LOGIC;
    signal delayline_Array_samp_82_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_96_ce0 : STD_LOGIC;
    signal delayline_Array_vali_96_we0 : STD_LOGIC;
    signal delayline_Array_vali_96_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_96_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_296_ce0 : STD_LOGIC;
    signal delayline_Array_samp_296_we0 : STD_LOGIC;
    signal delayline_Array_samp_296_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_84_ce0 : STD_LOGIC;
    signal delayline_Array_samp_84_we0 : STD_LOGIC;
    signal delayline_Array_samp_84_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_98_ce0 : STD_LOGIC;
    signal delayline_Array_vali_98_we0 : STD_LOGIC;
    signal delayline_Array_vali_98_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_98_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_300_ce0 : STD_LOGIC;
    signal delayline_Array_samp_300_we0 : STD_LOGIC;
    signal delayline_Array_samp_300_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_88_ce0 : STD_LOGIC;
    signal delayline_Array_samp_88_we0 : STD_LOGIC;
    signal delayline_Array_samp_88_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_105_ce0 : STD_LOGIC;
    signal delayline_Array_vali_105_we0 : STD_LOGIC;
    signal delayline_Array_vali_105_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_105_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_303_ce0 : STD_LOGIC;
    signal delayline_Array_samp_303_we0 : STD_LOGIC;
    signal delayline_Array_samp_303_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_91_ce0 : STD_LOGIC;
    signal delayline_Array_samp_91_we0 : STD_LOGIC;
    signal delayline_Array_samp_91_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_111_ce0 : STD_LOGIC;
    signal delayline_Array_vali_111_we0 : STD_LOGIC;
    signal delayline_Array_vali_111_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_111_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_306_ce0 : STD_LOGIC;
    signal delayline_Array_samp_306_we0 : STD_LOGIC;
    signal delayline_Array_samp_306_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_94_ce0 : STD_LOGIC;
    signal delayline_Array_samp_94_we0 : STD_LOGIC;
    signal delayline_Array_samp_94_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_117_ce0 : STD_LOGIC;
    signal delayline_Array_vali_117_we0 : STD_LOGIC;
    signal delayline_Array_vali_117_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_117_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_308_ce0 : STD_LOGIC;
    signal delayline_Array_samp_308_we0 : STD_LOGIC;
    signal delayline_Array_samp_308_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_96_ce0 : STD_LOGIC;
    signal delayline_Array_samp_96_we0 : STD_LOGIC;
    signal delayline_Array_samp_96_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_121_ce0 : STD_LOGIC;
    signal delayline_Array_vali_121_we0 : STD_LOGIC;
    signal delayline_Array_vali_121_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_121_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_311_ce0 : STD_LOGIC;
    signal delayline_Array_samp_311_we0 : STD_LOGIC;
    signal delayline_Array_samp_311_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_101_ce0 : STD_LOGIC;
    signal delayline_Array_samp_101_we0 : STD_LOGIC;
    signal delayline_Array_samp_101_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_127_ce0 : STD_LOGIC;
    signal delayline_Array_vali_127_we0 : STD_LOGIC;
    signal delayline_Array_vali_127_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_127_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_270_ce0 : STD_LOGIC;
    signal delayline_Array_samp_270_we0 : STD_LOGIC;
    signal delayline_Array_samp_270_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_59_ce0 : STD_LOGIC;
    signal delayline_Array_samp_59_we0 : STD_LOGIC;
    signal delayline_Array_samp_59_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_72_ce0 : STD_LOGIC;
    signal delayline_Array_vali_72_we0 : STD_LOGIC;
    signal delayline_Array_vali_72_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_72_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_272_ce0 : STD_LOGIC;
    signal delayline_Array_samp_272_we0 : STD_LOGIC;
    signal delayline_Array_samp_272_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_61_ce0 : STD_LOGIC;
    signal delayline_Array_samp_61_we0 : STD_LOGIC;
    signal delayline_Array_samp_61_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_74_ce0 : STD_LOGIC;
    signal delayline_Array_vali_74_we0 : STD_LOGIC;
    signal delayline_Array_vali_74_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_74_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_274_ce0 : STD_LOGIC;
    signal delayline_Array_samp_274_we0 : STD_LOGIC;
    signal delayline_Array_samp_274_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_63_ce0 : STD_LOGIC;
    signal delayline_Array_samp_63_we0 : STD_LOGIC;
    signal delayline_Array_samp_63_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_76_ce0 : STD_LOGIC;
    signal delayline_Array_vali_76_we0 : STD_LOGIC;
    signal delayline_Array_vali_76_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_76_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_279_ce0 : STD_LOGIC;
    signal delayline_Array_samp_279_we0 : STD_LOGIC;
    signal delayline_Array_samp_279_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_68_ce0 : STD_LOGIC;
    signal delayline_Array_samp_68_we0 : STD_LOGIC;
    signal delayline_Array_samp_68_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_81_ce0 : STD_LOGIC;
    signal delayline_Array_vali_81_we0 : STD_LOGIC;
    signal delayline_Array_vali_81_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_81_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_281_ce0 : STD_LOGIC;
    signal delayline_Array_samp_281_we0 : STD_LOGIC;
    signal delayline_Array_samp_281_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_70_ce0 : STD_LOGIC;
    signal delayline_Array_samp_70_we0 : STD_LOGIC;
    signal delayline_Array_samp_70_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_83_ce0 : STD_LOGIC;
    signal delayline_Array_vali_83_we0 : STD_LOGIC;
    signal delayline_Array_vali_83_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_83_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_284_ce0 : STD_LOGIC;
    signal delayline_Array_samp_284_we0 : STD_LOGIC;
    signal delayline_Array_samp_284_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_73_ce0 : STD_LOGIC;
    signal delayline_Array_samp_73_we0 : STD_LOGIC;
    signal delayline_Array_samp_73_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_86_ce0 : STD_LOGIC;
    signal delayline_Array_vali_86_we0 : STD_LOGIC;
    signal delayline_Array_vali_86_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_86_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_288_ce0 : STD_LOGIC;
    signal delayline_Array_samp_288_we0 : STD_LOGIC;
    signal delayline_Array_samp_288_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_76_ce0 : STD_LOGIC;
    signal delayline_Array_samp_76_we0 : STD_LOGIC;
    signal delayline_Array_samp_76_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_90_ce0 : STD_LOGIC;
    signal delayline_Array_vali_90_we0 : STD_LOGIC;
    signal delayline_Array_vali_90_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_90_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_291_ce0 : STD_LOGIC;
    signal delayline_Array_samp_291_we0 : STD_LOGIC;
    signal delayline_Array_samp_291_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_79_ce0 : STD_LOGIC;
    signal delayline_Array_samp_79_we0 : STD_LOGIC;
    signal delayline_Array_samp_79_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_93_ce0 : STD_LOGIC;
    signal delayline_Array_vali_93_we0 : STD_LOGIC;
    signal delayline_Array_vali_93_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_93_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component process_3_delayli7jG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_3_delayli9j0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_4_delayliFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_4_delayliHfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_4_delayliIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_4_delayliKfY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_4_delayliLf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_4_delayliNgs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_4_delayliOgC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_4_delayliQgW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_5_delaylibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_5_delaylidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_5_delaylieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_5_delaylig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_5_delaylihbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_5_delaylijbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_5_delaylikbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_5_delaylimb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_5_delaylincg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_5_delaylipcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_5_delayliqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_5_delaylisc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_5_delaylitde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_5_delaylivdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_5_delayliwdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_5_delayliyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_5_delaylizec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_5_delayliBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_5_delayliCeG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_5_delayliEe0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    delayline_Array_samp_294_U : component process_3_delayli7jG
    generic map (
        DataWidth => 16,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_E,
        ce0 => delayline_Array_samp_294_ce0,
        we0 => delayline_Array_samp_294_we0,
        d0 => p_in_0_sample_M_real_V_read,
        q0 => delayline_Array_samp_294_q0);

    delayline_Array_samp_82_U : component process_3_delayli7jG
    generic map (
        DataWidth => 16,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_E,
        ce0 => delayline_Array_samp_82_ce0,
        we0 => delayline_Array_samp_82_we0,
        d0 => p_in_0_sample_M_imag_V_read,
        q0 => delayline_Array_samp_82_q0);

    delayline_Array_vali_96_U : component process_3_delayli9j0
    generic map (
        DataWidth => 1,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_E,
        ce0 => delayline_Array_vali_96_ce0,
        we0 => delayline_Array_vali_96_we0,
        d0 => delayline_Array_vali_96_d0,
        q0 => delayline_Array_vali_96_q0);

    delayline_Array_samp_296_U : component process_4_delayliFfa
    generic map (
        DataWidth => 16,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_D,
        ce0 => delayline_Array_samp_296_ce0,
        we0 => delayline_Array_samp_296_we0,
        d0 => p_in_1_sample_M_real_V_read,
        q0 => delayline_Array_samp_296_q0);

    delayline_Array_samp_84_U : component process_4_delayliFfa
    generic map (
        DataWidth => 16,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_D,
        ce0 => delayline_Array_samp_84_ce0,
        we0 => delayline_Array_samp_84_we0,
        d0 => p_in_1_sample_M_imag_V_read,
        q0 => delayline_Array_samp_84_q0);

    delayline_Array_vali_98_U : component process_4_delayliHfu
    generic map (
        DataWidth => 1,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_D,
        ce0 => delayline_Array_vali_98_ce0,
        we0 => delayline_Array_vali_98_we0,
        d0 => delayline_Array_vali_98_d0,
        q0 => delayline_Array_vali_98_q0);

    delayline_Array_samp_300_U : component process_4_delayliIfE
    generic map (
        DataWidth => 16,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_C,
        ce0 => delayline_Array_samp_300_ce0,
        we0 => delayline_Array_samp_300_we0,
        d0 => p_in_2_sample_M_real_V_read,
        q0 => delayline_Array_samp_300_q0);

    delayline_Array_samp_88_U : component process_4_delayliIfE
    generic map (
        DataWidth => 16,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_C,
        ce0 => delayline_Array_samp_88_ce0,
        we0 => delayline_Array_samp_88_we0,
        d0 => p_in_2_sample_M_imag_V_read,
        q0 => delayline_Array_samp_88_q0);

    delayline_Array_vali_105_U : component process_4_delayliKfY
    generic map (
        DataWidth => 1,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_C,
        ce0 => delayline_Array_vali_105_ce0,
        we0 => delayline_Array_vali_105_we0,
        d0 => delayline_Array_vali_105_d0,
        q0 => delayline_Array_vali_105_q0);

    delayline_Array_samp_303_U : component process_4_delayliLf8
    generic map (
        DataWidth => 16,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_B,
        ce0 => delayline_Array_samp_303_ce0,
        we0 => delayline_Array_samp_303_we0,
        d0 => p_in_3_sample_M_real_V_read,
        q0 => delayline_Array_samp_303_q0);

    delayline_Array_samp_91_U : component process_4_delayliLf8
    generic map (
        DataWidth => 16,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_B,
        ce0 => delayline_Array_samp_91_ce0,
        we0 => delayline_Array_samp_91_we0,
        d0 => p_in_3_sample_M_imag_V_read,
        q0 => delayline_Array_samp_91_q0);

    delayline_Array_vali_111_U : component process_4_delayliNgs
    generic map (
        DataWidth => 1,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_B,
        ce0 => delayline_Array_vali_111_ce0,
        we0 => delayline_Array_vali_111_we0,
        d0 => delayline_Array_vali_111_d0,
        q0 => delayline_Array_vali_111_q0);

    delayline_Array_samp_306_U : component process_4_delayliOgC
    generic map (
        DataWidth => 16,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => delayline_Array_samp_306_ce0,
        we0 => delayline_Array_samp_306_we0,
        d0 => p_in_4_sample_M_real_V_read,
        q0 => delayline_Array_samp_306_q0);

    delayline_Array_samp_94_U : component process_4_delayliOgC
    generic map (
        DataWidth => 16,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => delayline_Array_samp_94_ce0,
        we0 => delayline_Array_samp_94_we0,
        d0 => p_in_4_sample_M_imag_V_read,
        q0 => delayline_Array_samp_94_q0);

    delayline_Array_vali_117_U : component process_4_delayliQgW
    generic map (
        DataWidth => 1,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => delayline_Array_vali_117_ce0,
        we0 => delayline_Array_vali_117_we0,
        d0 => delayline_Array_vali_117_d0,
        q0 => delayline_Array_vali_117_q0);

    delayline_Array_samp_308_U : component process_5_delaylibkb
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_9,
        ce0 => delayline_Array_samp_308_ce0,
        we0 => delayline_Array_samp_308_we0,
        d0 => p_in_5_sample_M_real_V_read,
        q0 => delayline_Array_samp_308_q0);

    delayline_Array_samp_96_U : component process_5_delaylibkb
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_9,
        ce0 => delayline_Array_samp_96_ce0,
        we0 => delayline_Array_samp_96_we0,
        d0 => p_in_5_sample_M_imag_V_read,
        q0 => delayline_Array_samp_96_q0);

    delayline_Array_vali_121_U : component process_5_delaylidEe
    generic map (
        DataWidth => 1,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_9,
        ce0 => delayline_Array_vali_121_ce0,
        we0 => delayline_Array_vali_121_we0,
        d0 => delayline_Array_vali_121_d0,
        q0 => delayline_Array_vali_121_q0);

    delayline_Array_samp_311_U : component process_5_delaylieOg
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_8,
        ce0 => delayline_Array_samp_311_ce0,
        we0 => delayline_Array_samp_311_we0,
        d0 => p_in_6_sample_M_real_V_read,
        q0 => delayline_Array_samp_311_q0);

    delayline_Array_samp_101_U : component process_5_delaylieOg
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_8,
        ce0 => delayline_Array_samp_101_ce0,
        we0 => delayline_Array_samp_101_we0,
        d0 => p_in_6_sample_M_imag_V_read,
        q0 => delayline_Array_samp_101_q0);

    delayline_Array_vali_127_U : component process_5_delaylig8j
    generic map (
        DataWidth => 1,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_8,
        ce0 => delayline_Array_vali_127_ce0,
        we0 => delayline_Array_vali_127_we0,
        d0 => delayline_Array_vali_127_d0,
        q0 => delayline_Array_vali_127_q0);

    delayline_Array_samp_270_U : component process_5_delaylihbi
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_7,
        ce0 => delayline_Array_samp_270_ce0,
        we0 => delayline_Array_samp_270_we0,
        d0 => p_in_7_sample_M_real_V_read,
        q0 => delayline_Array_samp_270_q0);

    delayline_Array_samp_59_U : component process_5_delaylihbi
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_7,
        ce0 => delayline_Array_samp_59_ce0,
        we0 => delayline_Array_samp_59_we0,
        d0 => p_in_7_sample_M_imag_V_read,
        q0 => delayline_Array_samp_59_q0);

    delayline_Array_vali_72_U : component process_5_delaylijbC
    generic map (
        DataWidth => 1,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_7,
        ce0 => delayline_Array_vali_72_ce0,
        we0 => delayline_Array_vali_72_we0,
        d0 => delayline_Array_vali_72_d0,
        q0 => delayline_Array_vali_72_q0);

    delayline_Array_samp_272_U : component process_5_delaylikbM
    generic map (
        DataWidth => 16,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_6,
        ce0 => delayline_Array_samp_272_ce0,
        we0 => delayline_Array_samp_272_we0,
        d0 => p_in_8_sample_M_real_V_read,
        q0 => delayline_Array_samp_272_q0);

    delayline_Array_samp_61_U : component process_5_delaylikbM
    generic map (
        DataWidth => 16,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_6,
        ce0 => delayline_Array_samp_61_ce0,
        we0 => delayline_Array_samp_61_we0,
        d0 => p_in_8_sample_M_imag_V_read,
        q0 => delayline_Array_samp_61_q0);

    delayline_Array_vali_74_U : component process_5_delaylimb6
    generic map (
        DataWidth => 1,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_6,
        ce0 => delayline_Array_vali_74_ce0,
        we0 => delayline_Array_vali_74_we0,
        d0 => delayline_Array_vali_74_d0,
        q0 => delayline_Array_vali_74_q0);

    delayline_Array_samp_274_U : component process_5_delaylincg
    generic map (
        DataWidth => 16,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_5,
        ce0 => delayline_Array_samp_274_ce0,
        we0 => delayline_Array_samp_274_we0,
        d0 => p_in_9_sample_M_real_V_read,
        q0 => delayline_Array_samp_274_q0);

    delayline_Array_samp_63_U : component process_5_delaylincg
    generic map (
        DataWidth => 16,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_5,
        ce0 => delayline_Array_samp_63_ce0,
        we0 => delayline_Array_samp_63_we0,
        d0 => p_in_9_sample_M_imag_V_read,
        q0 => delayline_Array_samp_63_q0);

    delayline_Array_vali_76_U : component process_5_delaylipcA
    generic map (
        DataWidth => 1,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_5,
        ce0 => delayline_Array_vali_76_ce0,
        we0 => delayline_Array_vali_76_we0,
        d0 => delayline_Array_vali_76_d0,
        q0 => delayline_Array_vali_76_q0);

    delayline_Array_samp_279_U : component process_5_delayliqcK
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => delayline_Array_samp_279_ce0,
        we0 => delayline_Array_samp_279_we0,
        d0 => p_in_10_sample_M_real_V_read,
        q0 => delayline_Array_samp_279_q0);

    delayline_Array_samp_68_U : component process_5_delayliqcK
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => delayline_Array_samp_68_ce0,
        we0 => delayline_Array_samp_68_we0,
        d0 => p_in_10_sample_M_imag_V_read,
        q0 => delayline_Array_samp_68_q0);

    delayline_Array_vali_81_U : component process_5_delaylisc4
    generic map (
        DataWidth => 1,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => delayline_Array_vali_81_ce0,
        we0 => delayline_Array_vali_81_we0,
        d0 => delayline_Array_vali_81_d0,
        q0 => delayline_Array_vali_81_q0);

    delayline_Array_samp_281_U : component process_5_delaylitde
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => delayline_Array_samp_281_ce0,
        we0 => delayline_Array_samp_281_we0,
        d0 => p_in_11_sample_M_real_V_read,
        q0 => delayline_Array_samp_281_q0);

    delayline_Array_samp_70_U : component process_5_delaylitde
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => delayline_Array_samp_70_ce0,
        we0 => delayline_Array_samp_70_we0,
        d0 => p_in_11_sample_M_imag_V_read,
        q0 => delayline_Array_samp_70_q0);

    delayline_Array_vali_83_U : component process_5_delaylivdy
    generic map (
        DataWidth => 1,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => delayline_Array_vali_83_ce0,
        we0 => delayline_Array_vali_83_we0,
        d0 => delayline_Array_vali_83_d0,
        q0 => delayline_Array_vali_83_q0);

    delayline_Array_samp_284_U : component process_5_delayliwdI
    generic map (
        DataWidth => 16,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_2,
        ce0 => delayline_Array_samp_284_ce0,
        we0 => delayline_Array_samp_284_we0,
        d0 => p_in_12_sample_M_real_V_read,
        q0 => delayline_Array_samp_284_q0);

    delayline_Array_samp_73_U : component process_5_delayliwdI
    generic map (
        DataWidth => 16,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_2,
        ce0 => delayline_Array_samp_73_ce0,
        we0 => delayline_Array_samp_73_we0,
        d0 => p_in_12_sample_M_imag_V_read,
        q0 => delayline_Array_samp_73_q0);

    delayline_Array_vali_86_U : component process_5_delayliyd2
    generic map (
        DataWidth => 1,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_2,
        ce0 => delayline_Array_vali_86_ce0,
        we0 => delayline_Array_vali_86_we0,
        d0 => delayline_Array_vali_86_d0,
        q0 => delayline_Array_vali_86_q0);

    delayline_Array_samp_288_U : component process_5_delaylizec
    generic map (
        DataWidth => 16,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv1_1,
        ce0 => delayline_Array_samp_288_ce0,
        we0 => delayline_Array_samp_288_we0,
        d0 => p_in_13_sample_M_real_V_read,
        q0 => delayline_Array_samp_288_q0);

    delayline_Array_samp_76_U : component process_5_delaylizec
    generic map (
        DataWidth => 16,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv1_1,
        ce0 => delayline_Array_samp_76_ce0,
        we0 => delayline_Array_samp_76_we0,
        d0 => p_in_13_sample_M_imag_V_read,
        q0 => delayline_Array_samp_76_q0);

    delayline_Array_vali_90_U : component process_5_delayliBew
    generic map (
        DataWidth => 1,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv1_1,
        ce0 => delayline_Array_vali_90_ce0,
        we0 => delayline_Array_vali_90_we0,
        d0 => delayline_Array_vali_90_d0,
        q0 => delayline_Array_vali_90_q0);

    delayline_Array_samp_291_U : component process_5_delayliCeG
    generic map (
        DataWidth => 16,
        AddressRange => 1,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv1_0,
        ce0 => delayline_Array_samp_291_ce0,
        we0 => delayline_Array_samp_291_we0,
        d0 => p_in_14_sample_M_real_V_read,
        q0 => delayline_Array_samp_291_q0);

    delayline_Array_samp_79_U : component process_5_delayliCeG
    generic map (
        DataWidth => 16,
        AddressRange => 1,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv1_0,
        ce0 => delayline_Array_samp_79_ce0,
        we0 => delayline_Array_samp_79_we0,
        d0 => p_in_14_sample_M_imag_V_read,
        q0 => delayline_Array_samp_79_q0);

    delayline_Array_vali_93_U : component process_5_delayliEe0
    generic map (
        DataWidth => 1,
        AddressRange => 1,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv1_0,
        ce0 => delayline_Array_vali_93_ce0,
        we0 => delayline_Array_vali_93_we0,
        d0 => delayline_Array_vali_93_d0,
        q0 => delayline_Array_vali_93_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= delayline_Array_samp_294_q0;
    ap_return_1 <= delayline_Array_samp_82_q0;
    ap_return_10 <= delayline_Array_samp_272_q0;
    ap_return_11 <= delayline_Array_samp_274_q0;
    ap_return_12 <= delayline_Array_samp_279_q0;
    ap_return_13 <= delayline_Array_samp_281_q0;
    ap_return_14 <= delayline_Array_samp_284_q0;
    ap_return_15 <= delayline_Array_samp_288_q0;
    ap_return_16 <= delayline_Array_samp_291_q0;
    ap_return_17 <= p_in_15_sample_M_real_V_read;
    ap_return_18 <= delayline_Array_samp_84_q0;
    ap_return_19 <= delayline_Array_samp_88_q0;
    ap_return_2 <= delayline_Array_vali_96_q0;
    ap_return_20 <= delayline_Array_samp_91_q0;
    ap_return_21 <= delayline_Array_samp_94_q0;
    ap_return_22 <= delayline_Array_samp_96_q0;
    ap_return_23 <= delayline_Array_samp_101_q0;
    ap_return_24 <= delayline_Array_samp_59_q0;
    ap_return_25 <= delayline_Array_samp_61_q0;
    ap_return_26 <= delayline_Array_samp_63_q0;
    ap_return_27 <= delayline_Array_samp_68_q0;
    ap_return_28 <= delayline_Array_samp_70_q0;
    ap_return_29 <= delayline_Array_samp_73_q0;
    ap_return_3 <= delayline_Array_samp_296_q0;
    ap_return_30 <= delayline_Array_samp_76_q0;
    ap_return_31 <= delayline_Array_samp_79_q0;
    ap_return_32 <= p_in_15_sample_M_imag_V_read;
    ap_return_33 <= delayline_Array_vali_98_q0;
    ap_return_34 <= delayline_Array_vali_105_q0;
    ap_return_35 <= delayline_Array_vali_111_q0;
    ap_return_36 <= delayline_Array_vali_117_q0;
    ap_return_37 <= delayline_Array_vali_121_q0;
    ap_return_38 <= delayline_Array_vali_127_q0;
    ap_return_39 <= delayline_Array_vali_72_q0;
    ap_return_4 <= delayline_Array_samp_300_q0;
    ap_return_40 <= delayline_Array_vali_74_q0;
    ap_return_41 <= delayline_Array_vali_76_q0;
    ap_return_42 <= delayline_Array_vali_81_q0;
    ap_return_43 <= delayline_Array_vali_83_q0;
    ap_return_44 <= delayline_Array_vali_86_q0;
    ap_return_45 <= delayline_Array_vali_90_q0;
    ap_return_46 <= delayline_Array_vali_93_q0;
    ap_return_47 <= (0=>p_in_15_valid_read, others=>'-');
    ap_return_5 <= delayline_Array_samp_303_q0;
    ap_return_6 <= delayline_Array_samp_306_q0;
    ap_return_7 <= delayline_Array_samp_308_q0;
    ap_return_8 <= delayline_Array_samp_311_q0;
    ap_return_9 <= delayline_Array_samp_270_q0;

    delayline_Array_samp_101_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_101_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_101_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_101_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_101_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_101_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_270_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_270_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_270_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_270_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_270_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_270_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_272_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_272_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_272_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_272_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_272_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_272_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_274_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_274_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_274_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_274_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_274_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_274_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_279_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_279_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_279_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_279_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_279_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_279_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_281_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_281_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_281_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_281_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_281_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_281_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_284_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_284_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_284_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_284_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_284_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_284_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_288_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_288_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_288_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_288_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_288_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_288_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_291_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_291_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_291_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_291_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_291_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_291_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_294_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_294_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_294_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_294_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_294_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_294_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_296_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_296_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_296_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_296_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_296_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_296_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_300_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_300_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_300_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_300_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_300_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_300_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_303_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_303_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_303_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_303_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_303_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_303_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_306_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_306_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_306_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_306_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_306_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_306_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_308_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_308_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_308_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_308_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_308_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_308_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_311_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_311_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_311_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_311_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_311_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_311_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_59_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_59_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_59_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_59_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_59_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_59_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_61_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_61_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_61_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_61_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_61_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_61_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_63_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_63_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_63_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_63_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_63_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_63_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_68_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_68_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_68_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_68_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_68_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_68_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_70_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_70_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_70_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_70_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_70_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_70_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_73_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_73_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_73_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_73_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_73_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_73_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_76_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_76_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_76_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_76_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_76_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_76_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_79_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_79_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_79_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_79_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_79_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_79_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_82_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_82_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_82_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_82_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_82_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_82_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_84_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_84_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_84_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_84_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_84_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_84_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_88_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_88_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_88_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_88_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_88_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_88_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_91_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_91_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_91_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_91_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_91_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_91_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_94_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_94_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_94_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_94_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_94_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_94_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_96_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_96_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_96_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_96_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_96_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_96_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_105_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_105_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_105_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_105_d0 <= (0=>p_in_2_valid_read, others=>'-');

    delayline_Array_vali_105_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_105_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_105_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_111_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_111_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_111_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_111_d0 <= (0=>p_in_3_valid_read, others=>'-');

    delayline_Array_vali_111_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_111_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_111_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_117_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_117_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_117_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_117_d0 <= (0=>p_in_4_valid_read, others=>'-');

    delayline_Array_vali_117_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_117_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_117_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_121_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_121_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_121_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_121_d0 <= (0=>p_in_5_valid_read, others=>'-');

    delayline_Array_vali_121_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_121_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_121_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_127_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_127_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_127_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_127_d0 <= (0=>p_in_6_valid_read, others=>'-');

    delayline_Array_vali_127_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_127_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_127_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_72_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_72_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_72_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_72_d0 <= (0=>p_in_7_valid_read, others=>'-');

    delayline_Array_vali_72_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_72_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_72_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_74_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_74_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_74_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_74_d0 <= (0=>p_in_8_valid_read, others=>'-');

    delayline_Array_vali_74_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_74_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_74_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_76_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_76_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_76_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_76_d0 <= (0=>p_in_9_valid_read, others=>'-');

    delayline_Array_vali_76_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_76_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_76_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_81_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_81_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_81_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_81_d0 <= (0=>p_in_10_valid_read, others=>'-');

    delayline_Array_vali_81_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_81_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_81_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_83_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_83_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_83_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_83_d0 <= (0=>p_in_11_valid_read, others=>'-');

    delayline_Array_vali_83_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_83_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_83_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_86_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_86_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_86_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_86_d0 <= (0=>p_in_12_valid_read, others=>'-');

    delayline_Array_vali_86_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_86_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_86_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_90_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_90_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_90_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_90_d0 <= (0=>p_in_13_valid_read, others=>'-');

    delayline_Array_vali_90_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_90_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_90_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_93_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_93_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_93_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_93_d0 <= (0=>p_in_14_valid_read, others=>'-');

    delayline_Array_vali_93_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_93_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_93_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_96_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_96_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_96_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_96_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_96_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_96_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_96_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_98_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_98_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_98_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_98_d0 <= (0=>p_in_1_valid_read, others=>'-');

    delayline_Array_vali_98_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_98_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_98_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
