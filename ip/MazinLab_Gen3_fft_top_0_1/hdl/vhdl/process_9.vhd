-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_in_0_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_1_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_2_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_3_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_4_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_5_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_6_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_7_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_8_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_9_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_10_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_11_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_12_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_13_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_14_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_15_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_0_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_1_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_2_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_3_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_4_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_5_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_6_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_7_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_8_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_9_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_10_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_11_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_12_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_13_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_14_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_15_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_0_valid_read : IN STD_LOGIC;
    p_in_1_valid_read : IN STD_LOGIC;
    p_in_2_valid_read : IN STD_LOGIC;
    p_in_3_valid_read : IN STD_LOGIC;
    p_in_4_valid_read : IN STD_LOGIC;
    p_in_5_valid_read : IN STD_LOGIC;
    p_in_6_valid_read : IN STD_LOGIC;
    p_in_7_valid_read : IN STD_LOGIC;
    p_in_8_valid_read : IN STD_LOGIC;
    p_in_9_valid_read : IN STD_LOGIC;
    p_in_10_valid_read : IN STD_LOGIC;
    p_in_11_valid_read : IN STD_LOGIC;
    p_in_12_valid_read : IN STD_LOGIC;
    p_in_13_valid_read : IN STD_LOGIC;
    p_in_14_valid_read : IN STD_LOGIC;
    p_in_15_valid_read : IN STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of process_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_EF : STD_LOGIC_VECTOR (7 downto 0) := "11101111";
    constant ap_const_lv8_DF : STD_LOGIC_VECTOR (7 downto 0) := "11011111";
    constant ap_const_lv8_CF : STD_LOGIC_VECTOR (7 downto 0) := "11001111";
    constant ap_const_lv8_BF : STD_LOGIC_VECTOR (7 downto 0) := "10111111";
    constant ap_const_lv8_AF : STD_LOGIC_VECTOR (7 downto 0) := "10101111";
    constant ap_const_lv8_9F : STD_LOGIC_VECTOR (7 downto 0) := "10011111";
    constant ap_const_lv8_8F : STD_LOGIC_VECTOR (7 downto 0) := "10001111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_6F : STD_LOGIC_VECTOR (6 downto 0) := "1101111";
    constant ap_const_lv7_5F : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_const_lv7_4F : STD_LOGIC_VECTOR (6 downto 0) := "1001111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal delayline_Array_samp_49_ce0 : STD_LOGIC;
    signal delayline_Array_samp_49_we0 : STD_LOGIC;
    signal delayline_Array_samp_49_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_213_ce0 : STD_LOGIC;
    signal delayline_Array_samp_213_we0 : STD_LOGIC;
    signal delayline_Array_samp_213_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_47_ce0 : STD_LOGIC;
    signal delayline_Array_vali_47_we0 : STD_LOGIC;
    signal delayline_Array_vali_47_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_47_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_53_ce0 : STD_LOGIC;
    signal delayline_Array_samp_53_we0 : STD_LOGIC;
    signal delayline_Array_samp_53_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_219_ce0 : STD_LOGIC;
    signal delayline_Array_samp_219_we0 : STD_LOGIC;
    signal delayline_Array_samp_219_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_52_ce0 : STD_LOGIC;
    signal delayline_Array_vali_52_we0 : STD_LOGIC;
    signal delayline_Array_vali_52_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_52_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_276_ce0 : STD_LOGIC;
    signal delayline_Array_samp_276_we0 : STD_LOGIC;
    signal delayline_Array_samp_276_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_65_ce0 : STD_LOGIC;
    signal delayline_Array_samp_65_we0 : STD_LOGIC;
    signal delayline_Array_samp_65_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_58_ce0 : STD_LOGIC;
    signal delayline_Array_vali_58_we0 : STD_LOGIC;
    signal delayline_Array_vali_58_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_58_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_301_ce0 : STD_LOGIC;
    signal delayline_Array_samp_301_we0 : STD_LOGIC;
    signal delayline_Array_samp_301_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_89_ce0 : STD_LOGIC;
    signal delayline_Array_samp_89_we0 : STD_LOGIC;
    signal delayline_Array_samp_89_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_91_ce0 : STD_LOGIC;
    signal delayline_Array_vali_91_we0 : STD_LOGIC;
    signal delayline_Array_vali_91_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_91_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_325_ce0 : STD_LOGIC;
    signal delayline_Array_samp_325_we0 : STD_LOGIC;
    signal delayline_Array_samp_325_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_129_ce0 : STD_LOGIC;
    signal delayline_Array_samp_129_we0 : STD_LOGIC;
    signal delayline_Array_samp_129_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_131_ce0 : STD_LOGIC;
    signal delayline_Array_vali_131_we0 : STD_LOGIC;
    signal delayline_Array_vali_131_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_131_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_287_ce0 : STD_LOGIC;
    signal delayline_Array_samp_287_we0 : STD_LOGIC;
    signal delayline_Array_samp_287_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_262_ce0 : STD_LOGIC;
    signal delayline_Array_samp_262_we0 : STD_LOGIC;
    signal delayline_Array_samp_262_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_160_ce0 : STD_LOGIC;
    signal delayline_Array_vali_160_we0 : STD_LOGIC;
    signal delayline_Array_vali_160_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_160_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_75_ce0 : STD_LOGIC;
    signal delayline_Array_samp_75_we0 : STD_LOGIC;
    signal delayline_Array_samp_75_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_223_ce0 : STD_LOGIC;
    signal delayline_Array_samp_223_we0 : STD_LOGIC;
    signal delayline_Array_samp_223_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_54_ce0 : STD_LOGIC;
    signal delayline_Array_vali_54_we0 : STD_LOGIC;
    signal delayline_Array_vali_54_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_54_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_229_ce0 : STD_LOGIC;
    signal delayline_Array_samp_229_we0 : STD_LOGIC;
    signal delayline_Array_samp_229_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_241_ce0 : STD_LOGIC;
    signal delayline_Array_samp_241_we0 : STD_LOGIC;
    signal delayline_Array_samp_241_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_64_ce0 : STD_LOGIC;
    signal delayline_Array_vali_64_we0 : STD_LOGIC;
    signal delayline_Array_vali_64_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_64_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_278_ce0 : STD_LOGIC;
    signal delayline_Array_samp_278_we0 : STD_LOGIC;
    signal delayline_Array_samp_278_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_67_ce0 : STD_LOGIC;
    signal delayline_Array_samp_67_we0 : STD_LOGIC;
    signal delayline_Array_samp_67_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_80_ce0 : STD_LOGIC;
    signal delayline_Array_vali_80_we0 : STD_LOGIC;
    signal delayline_Array_vali_80_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_80_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_305_ce0 : STD_LOGIC;
    signal delayline_Array_samp_305_we0 : STD_LOGIC;
    signal delayline_Array_samp_305_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_93_ce0 : STD_LOGIC;
    signal delayline_Array_samp_93_we0 : STD_LOGIC;
    signal delayline_Array_samp_93_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_115_ce0 : STD_LOGIC;
    signal delayline_Array_vali_115_we0 : STD_LOGIC;
    signal delayline_Array_vali_115_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_115_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_332_ce0 : STD_LOGIC;
    signal delayline_Array_samp_332_we0 : STD_LOGIC;
    signal delayline_Array_samp_332_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_143_ce0 : STD_LOGIC;
    signal delayline_Array_samp_143_we0 : STD_LOGIC;
    signal delayline_Array_samp_143_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_155_ce0 : STD_LOGIC;
    signal delayline_Array_vali_155_we0 : STD_LOGIC;
    signal delayline_Array_vali_155_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_155_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_37_ce0 : STD_LOGIC;
    signal delayline_Array_samp_37_we0 : STD_LOGIC;
    signal delayline_Array_samp_37_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_201_ce0 : STD_LOGIC;
    signal delayline_Array_samp_201_we0 : STD_LOGIC;
    signal delayline_Array_samp_201_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_37_ce0 : STD_LOGIC;
    signal delayline_Array_vali_37_we0 : STD_LOGIC;
    signal delayline_Array_vali_37_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_37_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_33_ce0 : STD_LOGIC;
    signal delayline_Array_samp_33_we0 : STD_LOGIC;
    signal delayline_Array_samp_33_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_197_ce0 : STD_LOGIC;
    signal delayline_Array_samp_197_we0 : STD_LOGIC;
    signal delayline_Array_samp_197_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_31_ce0 : STD_LOGIC;
    signal delayline_Array_vali_31_we0 : STD_LOGIC;
    signal delayline_Array_vali_31_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_31_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_39_ce0 : STD_LOGIC;
    signal delayline_Array_samp_39_we0 : STD_LOGIC;
    signal delayline_Array_samp_39_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_203_ce0 : STD_LOGIC;
    signal delayline_Array_samp_203_we0 : STD_LOGIC;
    signal delayline_Array_samp_203_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_35_ce0 : STD_LOGIC;
    signal delayline_Array_vali_35_we0 : STD_LOGIC;
    signal delayline_Array_vali_35_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_35_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_45_ce0 : STD_LOGIC;
    signal delayline_Array_samp_45_we0 : STD_LOGIC;
    signal delayline_Array_samp_45_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_209_ce0 : STD_LOGIC;
    signal delayline_Array_samp_209_we0 : STD_LOGIC;
    signal delayline_Array_samp_209_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_41_ce0 : STD_LOGIC;
    signal delayline_Array_vali_41_we0 : STD_LOGIC;
    signal delayline_Array_vali_41_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_41_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component process_9_delaylicOA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_9_delaylicQA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_10_delaylcow IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_10_delaylcqw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_10_delaylcrw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_10_delaylctx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_10_delaylcux IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_10_delaylcwx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_10_delaylcxx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_10_delaylczy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylbUr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylbWr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylbXr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylbZs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylb0s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylb2s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylb3s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylb5t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylb6t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylb8t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylb9t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylcbu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylccu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylceu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylcfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylchv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylciv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylckv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylclv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylcnw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    delayline_Array_samp_49_U : component process_9_delaylicOA
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_EF,
        ce0 => delayline_Array_samp_49_ce0,
        we0 => delayline_Array_samp_49_we0,
        d0 => p_in_0_sample_M_real_V_read,
        q0 => delayline_Array_samp_49_q0);

    delayline_Array_samp_213_U : component process_9_delaylicOA
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_EF,
        ce0 => delayline_Array_samp_213_ce0,
        we0 => delayline_Array_samp_213_we0,
        d0 => p_in_0_sample_M_imag_V_read,
        q0 => delayline_Array_samp_213_q0);

    delayline_Array_vali_47_U : component process_9_delaylicQA
    generic map (
        DataWidth => 1,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_EF,
        ce0 => delayline_Array_vali_47_ce0,
        we0 => delayline_Array_vali_47_we0,
        d0 => delayline_Array_vali_47_d0,
        q0 => delayline_Array_vali_47_q0);

    delayline_Array_samp_53_U : component process_10_delaylcow
    generic map (
        DataWidth => 16,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_DF,
        ce0 => delayline_Array_samp_53_ce0,
        we0 => delayline_Array_samp_53_we0,
        d0 => p_in_1_sample_M_real_V_read,
        q0 => delayline_Array_samp_53_q0);

    delayline_Array_samp_219_U : component process_10_delaylcow
    generic map (
        DataWidth => 16,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_DF,
        ce0 => delayline_Array_samp_219_ce0,
        we0 => delayline_Array_samp_219_we0,
        d0 => p_in_1_sample_M_imag_V_read,
        q0 => delayline_Array_samp_219_q0);

    delayline_Array_vali_52_U : component process_10_delaylcqw
    generic map (
        DataWidth => 1,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_DF,
        ce0 => delayline_Array_vali_52_ce0,
        we0 => delayline_Array_vali_52_we0,
        d0 => delayline_Array_vali_52_d0,
        q0 => delayline_Array_vali_52_q0);

    delayline_Array_samp_276_U : component process_10_delaylcrw
    generic map (
        DataWidth => 16,
        AddressRange => 208,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_CF,
        ce0 => delayline_Array_samp_276_ce0,
        we0 => delayline_Array_samp_276_we0,
        d0 => p_in_2_sample_M_real_V_read,
        q0 => delayline_Array_samp_276_q0);

    delayline_Array_samp_65_U : component process_10_delaylcrw
    generic map (
        DataWidth => 16,
        AddressRange => 208,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_CF,
        ce0 => delayline_Array_samp_65_ce0,
        we0 => delayline_Array_samp_65_we0,
        d0 => p_in_2_sample_M_imag_V_read,
        q0 => delayline_Array_samp_65_q0);

    delayline_Array_vali_58_U : component process_10_delaylctx
    generic map (
        DataWidth => 1,
        AddressRange => 208,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_CF,
        ce0 => delayline_Array_vali_58_ce0,
        we0 => delayline_Array_vali_58_we0,
        d0 => delayline_Array_vali_58_d0,
        q0 => delayline_Array_vali_58_q0);

    delayline_Array_samp_301_U : component process_10_delaylcux
    generic map (
        DataWidth => 16,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_BF,
        ce0 => delayline_Array_samp_301_ce0,
        we0 => delayline_Array_samp_301_we0,
        d0 => p_in_3_sample_M_real_V_read,
        q0 => delayline_Array_samp_301_q0);

    delayline_Array_samp_89_U : component process_10_delaylcux
    generic map (
        DataWidth => 16,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_BF,
        ce0 => delayline_Array_samp_89_ce0,
        we0 => delayline_Array_samp_89_we0,
        d0 => p_in_3_sample_M_imag_V_read,
        q0 => delayline_Array_samp_89_q0);

    delayline_Array_vali_91_U : component process_10_delaylcwx
    generic map (
        DataWidth => 1,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_BF,
        ce0 => delayline_Array_vali_91_ce0,
        we0 => delayline_Array_vali_91_we0,
        d0 => delayline_Array_vali_91_d0,
        q0 => delayline_Array_vali_91_q0);

    delayline_Array_samp_325_U : component process_10_delaylcxx
    generic map (
        DataWidth => 16,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_AF,
        ce0 => delayline_Array_samp_325_ce0,
        we0 => delayline_Array_samp_325_we0,
        d0 => p_in_4_sample_M_real_V_read,
        q0 => delayline_Array_samp_325_q0);

    delayline_Array_samp_129_U : component process_10_delaylcxx
    generic map (
        DataWidth => 16,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_AF,
        ce0 => delayline_Array_samp_129_ce0,
        we0 => delayline_Array_samp_129_we0,
        d0 => p_in_4_sample_M_imag_V_read,
        q0 => delayline_Array_samp_129_q0);

    delayline_Array_vali_131_U : component process_10_delaylczy
    generic map (
        DataWidth => 1,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_AF,
        ce0 => delayline_Array_vali_131_ce0,
        we0 => delayline_Array_vali_131_we0,
        d0 => delayline_Array_vali_131_d0,
        q0 => delayline_Array_vali_131_q0);

    delayline_Array_samp_287_U : component process_11_delaylbUr
    generic map (
        DataWidth => 16,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_9F,
        ce0 => delayline_Array_samp_287_ce0,
        we0 => delayline_Array_samp_287_we0,
        d0 => p_in_5_sample_M_real_V_read,
        q0 => delayline_Array_samp_287_q0);

    delayline_Array_samp_262_U : component process_11_delaylbUr
    generic map (
        DataWidth => 16,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_9F,
        ce0 => delayline_Array_samp_262_ce0,
        we0 => delayline_Array_samp_262_we0,
        d0 => p_in_5_sample_M_imag_V_read,
        q0 => delayline_Array_samp_262_q0);

    delayline_Array_vali_160_U : component process_11_delaylbWr
    generic map (
        DataWidth => 1,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_9F,
        ce0 => delayline_Array_vali_160_ce0,
        we0 => delayline_Array_vali_160_we0,
        d0 => delayline_Array_vali_160_d0,
        q0 => delayline_Array_vali_160_q0);

    delayline_Array_samp_75_U : component process_11_delaylbXr
    generic map (
        DataWidth => 16,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_8F,
        ce0 => delayline_Array_samp_75_ce0,
        we0 => delayline_Array_samp_75_we0,
        d0 => p_in_6_sample_M_real_V_read,
        q0 => delayline_Array_samp_75_q0);

    delayline_Array_samp_223_U : component process_11_delaylbXr
    generic map (
        DataWidth => 16,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_8F,
        ce0 => delayline_Array_samp_223_ce0,
        we0 => delayline_Array_samp_223_we0,
        d0 => p_in_6_sample_M_imag_V_read,
        q0 => delayline_Array_samp_223_q0);

    delayline_Array_vali_54_U : component process_11_delaylbZs
    generic map (
        DataWidth => 1,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_8F,
        ce0 => delayline_Array_vali_54_ce0,
        we0 => delayline_Array_vali_54_we0,
        d0 => delayline_Array_vali_54_d0,
        q0 => delayline_Array_vali_54_q0);

    delayline_Array_samp_229_U : component process_11_delaylb0s
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_7F,
        ce0 => delayline_Array_samp_229_ce0,
        we0 => delayline_Array_samp_229_we0,
        d0 => p_in_7_sample_M_real_V_read,
        q0 => delayline_Array_samp_229_q0);

    delayline_Array_samp_241_U : component process_11_delaylb0s
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_7F,
        ce0 => delayline_Array_samp_241_ce0,
        we0 => delayline_Array_samp_241_we0,
        d0 => p_in_7_sample_M_imag_V_read,
        q0 => delayline_Array_samp_241_q0);

    delayline_Array_vali_64_U : component process_11_delaylb2s
    generic map (
        DataWidth => 1,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_7F,
        ce0 => delayline_Array_vali_64_ce0,
        we0 => delayline_Array_vali_64_we0,
        d0 => delayline_Array_vali_64_d0,
        q0 => delayline_Array_vali_64_q0);

    delayline_Array_samp_278_U : component process_11_delaylb3s
    generic map (
        DataWidth => 16,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_6F,
        ce0 => delayline_Array_samp_278_ce0,
        we0 => delayline_Array_samp_278_we0,
        d0 => p_in_8_sample_M_real_V_read,
        q0 => delayline_Array_samp_278_q0);

    delayline_Array_samp_67_U : component process_11_delaylb3s
    generic map (
        DataWidth => 16,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_6F,
        ce0 => delayline_Array_samp_67_ce0,
        we0 => delayline_Array_samp_67_we0,
        d0 => p_in_8_sample_M_imag_V_read,
        q0 => delayline_Array_samp_67_q0);

    delayline_Array_vali_80_U : component process_11_delaylb5t
    generic map (
        DataWidth => 1,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_6F,
        ce0 => delayline_Array_vali_80_ce0,
        we0 => delayline_Array_vali_80_we0,
        d0 => delayline_Array_vali_80_d0,
        q0 => delayline_Array_vali_80_q0);

    delayline_Array_samp_305_U : component process_11_delaylb6t
    generic map (
        DataWidth => 16,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_5F,
        ce0 => delayline_Array_samp_305_ce0,
        we0 => delayline_Array_samp_305_we0,
        d0 => p_in_9_sample_M_real_V_read,
        q0 => delayline_Array_samp_305_q0);

    delayline_Array_samp_93_U : component process_11_delaylb6t
    generic map (
        DataWidth => 16,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_5F,
        ce0 => delayline_Array_samp_93_ce0,
        we0 => delayline_Array_samp_93_we0,
        d0 => p_in_9_sample_M_imag_V_read,
        q0 => delayline_Array_samp_93_q0);

    delayline_Array_vali_115_U : component process_11_delaylb8t
    generic map (
        DataWidth => 1,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_5F,
        ce0 => delayline_Array_vali_115_ce0,
        we0 => delayline_Array_vali_115_we0,
        d0 => delayline_Array_vali_115_d0,
        q0 => delayline_Array_vali_115_q0);

    delayline_Array_samp_332_U : component process_11_delaylb9t
    generic map (
        DataWidth => 16,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_4F,
        ce0 => delayline_Array_samp_332_ce0,
        we0 => delayline_Array_samp_332_we0,
        d0 => p_in_10_sample_M_real_V_read,
        q0 => delayline_Array_samp_332_q0);

    delayline_Array_samp_143_U : component process_11_delaylb9t
    generic map (
        DataWidth => 16,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_4F,
        ce0 => delayline_Array_samp_143_ce0,
        we0 => delayline_Array_samp_143_we0,
        d0 => p_in_10_sample_M_imag_V_read,
        q0 => delayline_Array_samp_143_q0);

    delayline_Array_vali_155_U : component process_11_delaylcbu
    generic map (
        DataWidth => 1,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_4F,
        ce0 => delayline_Array_vali_155_ce0,
        we0 => delayline_Array_vali_155_we0,
        d0 => delayline_Array_vali_155_d0,
        q0 => delayline_Array_vali_155_q0);

    delayline_Array_samp_37_U : component process_11_delaylccu
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3F,
        ce0 => delayline_Array_samp_37_ce0,
        we0 => delayline_Array_samp_37_we0,
        d0 => p_in_11_sample_M_real_V_read,
        q0 => delayline_Array_samp_37_q0);

    delayline_Array_samp_201_U : component process_11_delaylccu
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3F,
        ce0 => delayline_Array_samp_201_ce0,
        we0 => delayline_Array_samp_201_we0,
        d0 => p_in_11_sample_M_imag_V_read,
        q0 => delayline_Array_samp_201_q0);

    delayline_Array_vali_37_U : component process_11_delaylceu
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3F,
        ce0 => delayline_Array_vali_37_ce0,
        we0 => delayline_Array_vali_37_we0,
        d0 => delayline_Array_vali_37_d0,
        q0 => delayline_Array_vali_37_q0);

    delayline_Array_samp_33_U : component process_11_delaylcfu
    generic map (
        DataWidth => 16,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_2F,
        ce0 => delayline_Array_samp_33_ce0,
        we0 => delayline_Array_samp_33_we0,
        d0 => p_in_12_sample_M_real_V_read,
        q0 => delayline_Array_samp_33_q0);

    delayline_Array_samp_197_U : component process_11_delaylcfu
    generic map (
        DataWidth => 16,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_2F,
        ce0 => delayline_Array_samp_197_ce0,
        we0 => delayline_Array_samp_197_we0,
        d0 => p_in_12_sample_M_imag_V_read,
        q0 => delayline_Array_samp_197_q0);

    delayline_Array_vali_31_U : component process_11_delaylchv
    generic map (
        DataWidth => 1,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_2F,
        ce0 => delayline_Array_vali_31_ce0,
        we0 => delayline_Array_vali_31_we0,
        d0 => delayline_Array_vali_31_d0,
        q0 => delayline_Array_vali_31_q0);

    delayline_Array_samp_39_U : component process_11_delaylciv
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => delayline_Array_samp_39_ce0,
        we0 => delayline_Array_samp_39_we0,
        d0 => p_in_13_sample_M_real_V_read,
        q0 => delayline_Array_samp_39_q0);

    delayline_Array_samp_203_U : component process_11_delaylciv
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => delayline_Array_samp_203_ce0,
        we0 => delayline_Array_samp_203_we0,
        d0 => p_in_13_sample_M_imag_V_read,
        q0 => delayline_Array_samp_203_q0);

    delayline_Array_vali_35_U : component process_11_delaylckv
    generic map (
        DataWidth => 1,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => delayline_Array_vali_35_ce0,
        we0 => delayline_Array_vali_35_we0,
        d0 => delayline_Array_vali_35_d0,
        q0 => delayline_Array_vali_35_q0);

    delayline_Array_samp_45_U : component process_11_delaylclv
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => delayline_Array_samp_45_ce0,
        we0 => delayline_Array_samp_45_we0,
        d0 => p_in_14_sample_M_real_V_read,
        q0 => delayline_Array_samp_45_q0);

    delayline_Array_samp_209_U : component process_11_delaylclv
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => delayline_Array_samp_209_ce0,
        we0 => delayline_Array_samp_209_we0,
        d0 => p_in_14_sample_M_imag_V_read,
        q0 => delayline_Array_samp_209_q0);

    delayline_Array_vali_41_U : component process_11_delaylcnw
    generic map (
        DataWidth => 1,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => delayline_Array_vali_41_ce0,
        we0 => delayline_Array_vali_41_we0,
        d0 => delayline_Array_vali_41_d0,
        q0 => delayline_Array_vali_41_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= delayline_Array_samp_49_q0;
    ap_return_1 <= delayline_Array_samp_213_q0;
    ap_return_10 <= delayline_Array_samp_278_q0;
    ap_return_11 <= delayline_Array_samp_305_q0;
    ap_return_12 <= delayline_Array_samp_332_q0;
    ap_return_13 <= delayline_Array_samp_37_q0;
    ap_return_14 <= delayline_Array_samp_33_q0;
    ap_return_15 <= delayline_Array_samp_39_q0;
    ap_return_16 <= delayline_Array_samp_45_q0;
    ap_return_17 <= p_in_15_sample_M_real_V_read;
    ap_return_18 <= delayline_Array_samp_219_q0;
    ap_return_19 <= delayline_Array_samp_65_q0;
    ap_return_2 <= delayline_Array_vali_47_q0;
    ap_return_20 <= delayline_Array_samp_89_q0;
    ap_return_21 <= delayline_Array_samp_129_q0;
    ap_return_22 <= delayline_Array_samp_262_q0;
    ap_return_23 <= delayline_Array_samp_223_q0;
    ap_return_24 <= delayline_Array_samp_241_q0;
    ap_return_25 <= delayline_Array_samp_67_q0;
    ap_return_26 <= delayline_Array_samp_93_q0;
    ap_return_27 <= delayline_Array_samp_143_q0;
    ap_return_28 <= delayline_Array_samp_201_q0;
    ap_return_29 <= delayline_Array_samp_197_q0;
    ap_return_3 <= delayline_Array_samp_53_q0;
    ap_return_30 <= delayline_Array_samp_203_q0;
    ap_return_31 <= delayline_Array_samp_209_q0;
    ap_return_32 <= p_in_15_sample_M_imag_V_read;
    ap_return_33 <= delayline_Array_vali_52_q0;
    ap_return_34 <= delayline_Array_vali_58_q0;
    ap_return_35 <= delayline_Array_vali_91_q0;
    ap_return_36 <= delayline_Array_vali_131_q0;
    ap_return_37 <= delayline_Array_vali_160_q0;
    ap_return_38 <= delayline_Array_vali_54_q0;
    ap_return_39 <= delayline_Array_vali_64_q0;
    ap_return_4 <= delayline_Array_samp_276_q0;
    ap_return_40 <= delayline_Array_vali_80_q0;
    ap_return_41 <= delayline_Array_vali_115_q0;
    ap_return_42 <= delayline_Array_vali_155_q0;
    ap_return_43 <= delayline_Array_vali_37_q0;
    ap_return_44 <= delayline_Array_vali_31_q0;
    ap_return_45 <= delayline_Array_vali_35_q0;
    ap_return_46 <= delayline_Array_vali_41_q0;
    ap_return_47 <= (0=>p_in_15_valid_read, others=>'-');
    ap_return_5 <= delayline_Array_samp_301_q0;
    ap_return_6 <= delayline_Array_samp_325_q0;
    ap_return_7 <= delayline_Array_samp_287_q0;
    ap_return_8 <= delayline_Array_samp_75_q0;
    ap_return_9 <= delayline_Array_samp_229_q0;

    delayline_Array_samp_129_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_129_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_129_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_129_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_129_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_129_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_143_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_143_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_143_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_143_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_143_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_143_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_197_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_197_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_197_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_197_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_197_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_197_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_201_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_201_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_201_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_201_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_201_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_201_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_203_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_203_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_203_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_203_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_203_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_203_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_209_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_209_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_209_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_209_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_209_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_209_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_213_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_213_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_213_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_213_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_213_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_213_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_219_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_219_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_219_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_219_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_219_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_219_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_223_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_223_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_223_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_223_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_223_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_223_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_229_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_229_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_229_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_229_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_229_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_229_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_241_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_241_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_241_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_241_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_241_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_241_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_262_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_262_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_262_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_262_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_262_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_262_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_276_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_276_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_276_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_276_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_276_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_276_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_278_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_278_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_278_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_278_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_278_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_278_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_287_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_287_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_287_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_287_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_287_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_287_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_301_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_301_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_301_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_301_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_301_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_301_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_305_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_305_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_305_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_305_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_305_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_305_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_325_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_325_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_325_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_325_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_325_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_325_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_332_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_332_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_332_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_332_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_332_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_332_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_33_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_33_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_33_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_33_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_33_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_33_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_37_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_37_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_37_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_37_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_37_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_39_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_39_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_39_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_39_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_39_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_39_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_45_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_45_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_45_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_45_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_45_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_45_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_49_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_49_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_49_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_49_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_49_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_49_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_53_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_53_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_53_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_53_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_53_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_53_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_65_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_65_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_65_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_65_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_65_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_65_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_67_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_67_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_67_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_67_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_67_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_67_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_75_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_75_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_75_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_75_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_75_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_75_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_89_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_89_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_89_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_89_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_89_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_89_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_93_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_93_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_93_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_93_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_93_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_93_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_115_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_115_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_115_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_115_d0 <= (0=>p_in_9_valid_read, others=>'-');

    delayline_Array_vali_115_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_115_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_115_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_131_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_131_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_131_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_131_d0 <= (0=>p_in_4_valid_read, others=>'-');

    delayline_Array_vali_131_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_131_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_131_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_155_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_155_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_155_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_155_d0 <= (0=>p_in_10_valid_read, others=>'-');

    delayline_Array_vali_155_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_155_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_155_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_160_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_160_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_160_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_160_d0 <= (0=>p_in_5_valid_read, others=>'-');

    delayline_Array_vali_160_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_160_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_160_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_31_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_31_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_31_d0 <= (0=>p_in_12_valid_read, others=>'-');

    delayline_Array_vali_31_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_31_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_31_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_35_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_35_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_35_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_35_d0 <= (0=>p_in_13_valid_read, others=>'-');

    delayline_Array_vali_35_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_35_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_35_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_37_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_37_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_37_d0 <= (0=>p_in_11_valid_read, others=>'-');

    delayline_Array_vali_37_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_37_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_37_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_41_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_41_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_41_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_41_d0 <= (0=>p_in_14_valid_read, others=>'-');

    delayline_Array_vali_41_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_41_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_41_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_47_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_47_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_47_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_47_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_47_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_47_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_47_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_52_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_52_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_52_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_52_d0 <= (0=>p_in_1_valid_read, others=>'-');

    delayline_Array_vali_52_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_52_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_52_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_54_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_54_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_54_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_54_d0 <= (0=>p_in_6_valid_read, others=>'-');

    delayline_Array_vali_54_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_54_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_54_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_58_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_58_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_58_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_58_d0 <= (0=>p_in_2_valid_read, others=>'-');

    delayline_Array_vali_58_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_58_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_58_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_64_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_64_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_64_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_64_d0 <= (0=>p_in_7_valid_read, others=>'-');

    delayline_Array_vali_64_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_64_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_64_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_80_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_80_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_80_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_80_d0 <= (0=>p_in_8_valid_read, others=>'-');

    delayline_Array_vali_80_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_80_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_80_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_91_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_91_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_91_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_91_d0 <= (0=>p_in_3_valid_read, others=>'-');

    delayline_Array_vali_91_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_91_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_91_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
