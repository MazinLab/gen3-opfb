-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_in_0_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_1_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_2_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_3_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_4_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_5_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_6_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_7_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_8_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_9_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_10_sample_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_0_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_1_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_2_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_3_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_4_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_5_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_6_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_7_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_8_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_9_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_10_sample_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_0_valid_read : IN STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of process_11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_9F : STD_LOGIC_VECTOR (7 downto 0) := "10011111";
    constant ap_const_lv8_8F : STD_LOGIC_VECTOR (7 downto 0) := "10001111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_6F : STD_LOGIC_VECTOR (6 downto 0) := "1101111";
    constant ap_const_lv7_5F : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_const_lv7_4F : STD_LOGIC_VECTOR (6 downto 0) := "1001111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal delayline_Array_samp_64_ce0 : STD_LOGIC;
    signal delayline_Array_samp_64_we0 : STD_LOGIC;
    signal delayline_Array_samp_64_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_221_ce0 : STD_LOGIC;
    signal delayline_Array_samp_221_we0 : STD_LOGIC;
    signal delayline_Array_samp_221_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_89_ce0 : STD_LOGIC;
    signal delayline_Array_vali_89_we0 : STD_LOGIC;
    signal delayline_Array_vali_89_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_89_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_86_ce0 : STD_LOGIC;
    signal delayline_Array_samp_86_we0 : STD_LOGIC;
    signal delayline_Array_samp_86_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_225_ce0 : STD_LOGIC;
    signal delayline_Array_samp_225_we0 : STD_LOGIC;
    signal delayline_Array_samp_225_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_55_ce0 : STD_LOGIC;
    signal delayline_Array_vali_55_we0 : STD_LOGIC;
    signal delayline_Array_vali_55_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_55_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_ce0 : STD_LOGIC;
    signal delayline_Array_samp_we0 : STD_LOGIC;
    signal delayline_Array_samp_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_263_ce0 : STD_LOGIC;
    signal delayline_Array_samp_263_we0 : STD_LOGIC;
    signal delayline_Array_samp_263_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_ce0 : STD_LOGIC;
    signal delayline_Array_vali_we0 : STD_LOGIC;
    signal delayline_Array_vali_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_292_ce0 : STD_LOGIC;
    signal delayline_Array_samp_292_we0 : STD_LOGIC;
    signal delayline_Array_samp_292_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_80_ce0 : STD_LOGIC;
    signal delayline_Array_samp_80_we0 : STD_LOGIC;
    signal delayline_Array_samp_80_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_94_ce0 : STD_LOGIC;
    signal delayline_Array_vali_94_we0 : STD_LOGIC;
    signal delayline_Array_vali_94_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_94_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_318_ce0 : STD_LOGIC;
    signal delayline_Array_samp_318_we0 : STD_LOGIC;
    signal delayline_Array_samp_318_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_115_ce0 : STD_LOGIC;
    signal delayline_Array_samp_115_we0 : STD_LOGIC;
    signal delayline_Array_samp_115_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_141_ce0 : STD_LOGIC;
    signal delayline_Array_vali_141_we0 : STD_LOGIC;
    signal delayline_Array_vali_141_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_141_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_5_ce0 : STD_LOGIC;
    signal delayline_Array_samp_5_we0 : STD_LOGIC;
    signal delayline_Array_samp_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_169_ce0 : STD_LOGIC;
    signal delayline_Array_samp_169_we0 : STD_LOGIC;
    signal delayline_Array_samp_169_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_5_ce0 : STD_LOGIC;
    signal delayline_Array_vali_5_we0 : STD_LOGIC;
    signal delayline_Array_vali_5_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_5_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_265_ce0 : STD_LOGIC;
    signal delayline_Array_samp_265_we0 : STD_LOGIC;
    signal delayline_Array_samp_265_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_54_ce0 : STD_LOGIC;
    signal delayline_Array_samp_54_we0 : STD_LOGIC;
    signal delayline_Array_samp_54_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_67_ce0 : STD_LOGIC;
    signal delayline_Array_vali_67_we0 : STD_LOGIC;
    signal delayline_Array_vali_67_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_67_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_35_ce0 : STD_LOGIC;
    signal delayline_Array_samp_35_we0 : STD_LOGIC;
    signal delayline_Array_samp_35_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_199_ce0 : STD_LOGIC;
    signal delayline_Array_samp_199_we0 : STD_LOGIC;
    signal delayline_Array_samp_199_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_33_ce0 : STD_LOGIC;
    signal delayline_Array_vali_33_we0 : STD_LOGIC;
    signal delayline_Array_vali_33_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_33_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_41_ce0 : STD_LOGIC;
    signal delayline_Array_samp_41_we0 : STD_LOGIC;
    signal delayline_Array_samp_41_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_205_ce0 : STD_LOGIC;
    signal delayline_Array_samp_205_we0 : STD_LOGIC;
    signal delayline_Array_samp_205_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_39_ce0 : STD_LOGIC;
    signal delayline_Array_vali_39_we0 : STD_LOGIC;
    signal delayline_Array_vali_39_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_39_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_samp_47_ce0 : STD_LOGIC;
    signal delayline_Array_samp_47_we0 : STD_LOGIC;
    signal delayline_Array_samp_47_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_samp_211_ce0 : STD_LOGIC;
    signal delayline_Array_samp_211_we0 : STD_LOGIC;
    signal delayline_Array_samp_211_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delayline_Array_vali_45_ce0 : STD_LOGIC;
    signal delayline_Array_vali_45_we0 : STD_LOGIC;
    signal delayline_Array_vali_45_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal delayline_Array_vali_45_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component process_11_delaylbUr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylbWr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylbXr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylbZs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylb0s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylb2s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylb3s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylb5t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylb6t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylb8t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylb9t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylcbu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylccu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylceu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylcfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylchv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylciv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylckv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component process_11_delaylclv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_11_delaylcnw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    delayline_Array_samp_64_U : component process_11_delaylbUr
    generic map (
        DataWidth => 16,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_9F,
        ce0 => delayline_Array_samp_64_ce0,
        we0 => delayline_Array_samp_64_we0,
        d0 => p_in_10_sample_M_real_V_read,
        q0 => delayline_Array_samp_64_q0);

    delayline_Array_samp_221_U : component process_11_delaylbUr
    generic map (
        DataWidth => 16,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_9F,
        ce0 => delayline_Array_samp_221_ce0,
        we0 => delayline_Array_samp_221_we0,
        d0 => p_in_10_sample_M_imag_V_read,
        q0 => delayline_Array_samp_221_q0);

    delayline_Array_vali_89_U : component process_11_delaylbWr
    generic map (
        DataWidth => 1,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_9F,
        ce0 => delayline_Array_vali_89_ce0,
        we0 => delayline_Array_vali_89_we0,
        d0 => delayline_Array_vali_89_d0,
        q0 => delayline_Array_vali_89_q0);

    delayline_Array_samp_86_U : component process_11_delaylbXr
    generic map (
        DataWidth => 16,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_8F,
        ce0 => delayline_Array_samp_86_ce0,
        we0 => delayline_Array_samp_86_we0,
        d0 => p_in_9_sample_M_real_V_read,
        q0 => delayline_Array_samp_86_q0);

    delayline_Array_samp_225_U : component process_11_delaylbXr
    generic map (
        DataWidth => 16,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_8F,
        ce0 => delayline_Array_samp_225_ce0,
        we0 => delayline_Array_samp_225_we0,
        d0 => p_in_9_sample_M_imag_V_read,
        q0 => delayline_Array_samp_225_q0);

    delayline_Array_vali_55_U : component process_11_delaylbZs
    generic map (
        DataWidth => 1,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv8_8F,
        ce0 => delayline_Array_vali_55_ce0,
        we0 => delayline_Array_vali_55_we0,
        d0 => delayline_Array_vali_55_d0,
        q0 => delayline_Array_vali_55_q0);

    delayline_Array_samp_U : component process_11_delaylb0s
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_7F,
        ce0 => delayline_Array_samp_ce0,
        we0 => delayline_Array_samp_we0,
        d0 => p_in_8_sample_M_real_V_read,
        q0 => delayline_Array_samp_q0);

    delayline_Array_samp_263_U : component process_11_delaylb0s
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_7F,
        ce0 => delayline_Array_samp_263_ce0,
        we0 => delayline_Array_samp_263_we0,
        d0 => p_in_8_sample_M_imag_V_read,
        q0 => delayline_Array_samp_263_q0);

    delayline_Array_vali_U : component process_11_delaylb2s
    generic map (
        DataWidth => 1,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_7F,
        ce0 => delayline_Array_vali_ce0,
        we0 => delayline_Array_vali_we0,
        d0 => delayline_Array_vali_d0,
        q0 => delayline_Array_vali_q0);

    delayline_Array_samp_292_U : component process_11_delaylb3s
    generic map (
        DataWidth => 16,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_6F,
        ce0 => delayline_Array_samp_292_ce0,
        we0 => delayline_Array_samp_292_we0,
        d0 => p_in_7_sample_M_real_V_read,
        q0 => delayline_Array_samp_292_q0);

    delayline_Array_samp_80_U : component process_11_delaylb3s
    generic map (
        DataWidth => 16,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_6F,
        ce0 => delayline_Array_samp_80_ce0,
        we0 => delayline_Array_samp_80_we0,
        d0 => p_in_7_sample_M_imag_V_read,
        q0 => delayline_Array_samp_80_q0);

    delayline_Array_vali_94_U : component process_11_delaylb5t
    generic map (
        DataWidth => 1,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_6F,
        ce0 => delayline_Array_vali_94_ce0,
        we0 => delayline_Array_vali_94_we0,
        d0 => delayline_Array_vali_94_d0,
        q0 => delayline_Array_vali_94_q0);

    delayline_Array_samp_318_U : component process_11_delaylb6t
    generic map (
        DataWidth => 16,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_5F,
        ce0 => delayline_Array_samp_318_ce0,
        we0 => delayline_Array_samp_318_we0,
        d0 => p_in_6_sample_M_real_V_read,
        q0 => delayline_Array_samp_318_q0);

    delayline_Array_samp_115_U : component process_11_delaylb6t
    generic map (
        DataWidth => 16,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_5F,
        ce0 => delayline_Array_samp_115_ce0,
        we0 => delayline_Array_samp_115_we0,
        d0 => p_in_6_sample_M_imag_V_read,
        q0 => delayline_Array_samp_115_q0);

    delayline_Array_vali_141_U : component process_11_delaylb8t
    generic map (
        DataWidth => 1,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_5F,
        ce0 => delayline_Array_vali_141_ce0,
        we0 => delayline_Array_vali_141_we0,
        d0 => delayline_Array_vali_141_d0,
        q0 => delayline_Array_vali_141_q0);

    delayline_Array_samp_5_U : component process_11_delaylb9t
    generic map (
        DataWidth => 16,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_4F,
        ce0 => delayline_Array_samp_5_ce0,
        we0 => delayline_Array_samp_5_we0,
        d0 => p_in_5_sample_M_real_V_read,
        q0 => delayline_Array_samp_5_q0);

    delayline_Array_samp_169_U : component process_11_delaylb9t
    generic map (
        DataWidth => 16,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_4F,
        ce0 => delayline_Array_samp_169_ce0,
        we0 => delayline_Array_samp_169_we0,
        d0 => p_in_5_sample_M_imag_V_read,
        q0 => delayline_Array_samp_169_q0);

    delayline_Array_vali_5_U : component process_11_delaylcbu
    generic map (
        DataWidth => 1,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv7_4F,
        ce0 => delayline_Array_vali_5_ce0,
        we0 => delayline_Array_vali_5_we0,
        d0 => delayline_Array_vali_5_d0,
        q0 => delayline_Array_vali_5_q0);

    delayline_Array_samp_265_U : component process_11_delaylccu
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3F,
        ce0 => delayline_Array_samp_265_ce0,
        we0 => delayline_Array_samp_265_we0,
        d0 => p_in_4_sample_M_real_V_read,
        q0 => delayline_Array_samp_265_q0);

    delayline_Array_samp_54_U : component process_11_delaylccu
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3F,
        ce0 => delayline_Array_samp_54_ce0,
        we0 => delayline_Array_samp_54_we0,
        d0 => p_in_4_sample_M_imag_V_read,
        q0 => delayline_Array_samp_54_q0);

    delayline_Array_vali_67_U : component process_11_delaylceu
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3F,
        ce0 => delayline_Array_vali_67_ce0,
        we0 => delayline_Array_vali_67_we0,
        d0 => delayline_Array_vali_67_d0,
        q0 => delayline_Array_vali_67_q0);

    delayline_Array_samp_35_U : component process_11_delaylcfu
    generic map (
        DataWidth => 16,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_2F,
        ce0 => delayline_Array_samp_35_ce0,
        we0 => delayline_Array_samp_35_we0,
        d0 => p_in_3_sample_M_real_V_read,
        q0 => delayline_Array_samp_35_q0);

    delayline_Array_samp_199_U : component process_11_delaylcfu
    generic map (
        DataWidth => 16,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_2F,
        ce0 => delayline_Array_samp_199_ce0,
        we0 => delayline_Array_samp_199_we0,
        d0 => p_in_3_sample_M_imag_V_read,
        q0 => delayline_Array_samp_199_q0);

    delayline_Array_vali_33_U : component process_11_delaylchv
    generic map (
        DataWidth => 1,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_2F,
        ce0 => delayline_Array_vali_33_ce0,
        we0 => delayline_Array_vali_33_we0,
        d0 => delayline_Array_vali_33_d0,
        q0 => delayline_Array_vali_33_q0);

    delayline_Array_samp_41_U : component process_11_delaylciv
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => delayline_Array_samp_41_ce0,
        we0 => delayline_Array_samp_41_we0,
        d0 => p_in_2_sample_M_real_V_read,
        q0 => delayline_Array_samp_41_q0);

    delayline_Array_samp_205_U : component process_11_delaylciv
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => delayline_Array_samp_205_ce0,
        we0 => delayline_Array_samp_205_we0,
        d0 => p_in_2_sample_M_imag_V_read,
        q0 => delayline_Array_samp_205_q0);

    delayline_Array_vali_39_U : component process_11_delaylckv
    generic map (
        DataWidth => 1,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => delayline_Array_vali_39_ce0,
        we0 => delayline_Array_vali_39_we0,
        d0 => delayline_Array_vali_39_d0,
        q0 => delayline_Array_vali_39_q0);

    delayline_Array_samp_47_U : component process_11_delaylclv
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => delayline_Array_samp_47_ce0,
        we0 => delayline_Array_samp_47_we0,
        d0 => p_in_1_sample_M_real_V_read,
        q0 => delayline_Array_samp_47_q0);

    delayline_Array_samp_211_U : component process_11_delaylclv
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => delayline_Array_samp_211_ce0,
        we0 => delayline_Array_samp_211_we0,
        d0 => p_in_1_sample_M_imag_V_read,
        q0 => delayline_Array_samp_211_q0);

    delayline_Array_vali_45_U : component process_11_delaylcnw
    generic map (
        DataWidth => 1,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_F,
        ce0 => delayline_Array_vali_45_ce0,
        we0 => delayline_Array_vali_45_we0,
        d0 => delayline_Array_vali_45_d0,
        q0 => delayline_Array_vali_45_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= delayline_Array_samp_64_q0;
    ap_return_1 <= delayline_Array_samp_221_q0;
    ap_return_10 <= delayline_Array_samp_80_q0;
    ap_return_11 <= delayline_Array_vali_94_q0;
    ap_return_12 <= delayline_Array_samp_318_q0;
    ap_return_13 <= delayline_Array_samp_115_q0;
    ap_return_14 <= delayline_Array_vali_141_q0;
    ap_return_15 <= delayline_Array_samp_5_q0;
    ap_return_16 <= delayline_Array_samp_169_q0;
    ap_return_17 <= delayline_Array_vali_5_q0;
    ap_return_18 <= delayline_Array_samp_265_q0;
    ap_return_19 <= delayline_Array_samp_54_q0;
    ap_return_2 <= delayline_Array_vali_89_q0;
    ap_return_20 <= delayline_Array_vali_67_q0;
    ap_return_21 <= delayline_Array_samp_35_q0;
    ap_return_22 <= delayline_Array_samp_199_q0;
    ap_return_23 <= delayline_Array_vali_33_q0;
    ap_return_24 <= delayline_Array_samp_41_q0;
    ap_return_25 <= delayline_Array_samp_205_q0;
    ap_return_26 <= delayline_Array_vali_39_q0;
    ap_return_27 <= delayline_Array_samp_47_q0;
    ap_return_28 <= delayline_Array_samp_211_q0;
    ap_return_29 <= delayline_Array_vali_45_q0;
    ap_return_3 <= delayline_Array_samp_86_q0;
    ap_return_30 <= p_in_0_sample_M_real_V_read;
    ap_return_31 <= p_in_0_sample_M_imag_V_read;
    ap_return_32 <= (0=>p_in_0_valid_read, others=>'-');
    ap_return_4 <= delayline_Array_samp_225_q0;
    ap_return_5 <= delayline_Array_vali_55_q0;
    ap_return_6 <= delayline_Array_samp_q0;
    ap_return_7 <= delayline_Array_samp_263_q0;
    ap_return_8 <= delayline_Array_vali_q0;
    ap_return_9 <= delayline_Array_samp_292_q0;

    delayline_Array_samp_115_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_115_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_115_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_115_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_115_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_115_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_169_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_169_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_169_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_169_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_169_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_169_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_199_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_199_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_199_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_199_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_199_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_199_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_205_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_205_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_205_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_205_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_205_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_205_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_211_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_211_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_211_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_211_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_211_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_211_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_221_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_221_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_221_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_221_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_221_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_221_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_225_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_225_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_225_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_225_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_225_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_225_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_263_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_263_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_263_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_263_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_263_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_263_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_265_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_265_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_265_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_265_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_265_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_265_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_292_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_292_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_292_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_292_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_292_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_292_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_318_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_318_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_318_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_318_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_318_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_318_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_35_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_35_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_35_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_35_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_35_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_35_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_41_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_41_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_41_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_41_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_41_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_41_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_47_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_47_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_47_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_47_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_47_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_47_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_54_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_54_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_54_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_54_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_54_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_54_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_5_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_5_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_5_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_64_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_64_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_64_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_64_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_64_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_64_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_80_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_80_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_80_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_80_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_80_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_80_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_86_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_86_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_86_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_86_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_86_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_86_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_samp_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_samp_we0 <= ap_const_logic_1;
        else 
            delayline_Array_samp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_141_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_141_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_141_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_141_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_141_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_141_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_141_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_33_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_33_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_33_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_33_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_33_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_33_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_33_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_39_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_39_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_39_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_39_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_39_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_39_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_39_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_45_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_45_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_45_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_45_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_45_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_45_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_45_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_55_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_55_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_55_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_55_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_55_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_55_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_55_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_5_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_5_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_5_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_5_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_67_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_67_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_67_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_67_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_67_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_67_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_67_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_89_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_89_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_89_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_89_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_89_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_89_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_89_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_94_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_94_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_94_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_94_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_94_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_94_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_94_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delayline_Array_vali_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_ce0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delayline_Array_vali_d0 <= (0=>p_in_0_valid_read, others=>'-');

    delayline_Array_vali_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delayline_Array_vali_we0 <= ap_const_logic_1;
        else 
            delayline_Array_vali_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
