// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_in_0_sample_M_real_V_read,
        p_in_1_sample_M_real_V_read,
        p_in_2_sample_M_real_V_read,
        p_in_3_sample_M_real_V_read,
        p_in_4_sample_M_real_V_read,
        p_in_5_sample_M_real_V_read,
        p_in_6_sample_M_real_V_read,
        p_in_7_sample_M_real_V_read,
        p_in_8_sample_M_real_V_read,
        p_in_9_sample_M_real_V_read,
        p_in_10_sample_M_real_V_read,
        p_in_11_sample_M_real_V_read,
        p_in_12_sample_M_real_V_read,
        p_in_13_sample_M_real_V_read,
        p_in_14_sample_M_real_V_read,
        p_in_15_sample_M_real_V_read,
        p_in_0_sample_M_imag_V_read,
        p_in_1_sample_M_imag_V_read,
        p_in_2_sample_M_imag_V_read,
        p_in_3_sample_M_imag_V_read,
        p_in_4_sample_M_imag_V_read,
        p_in_5_sample_M_imag_V_read,
        p_in_6_sample_M_imag_V_read,
        p_in_7_sample_M_imag_V_read,
        p_in_8_sample_M_imag_V_read,
        p_in_9_sample_M_imag_V_read,
        p_in_10_sample_M_imag_V_read,
        p_in_11_sample_M_imag_V_read,
        p_in_12_sample_M_imag_V_read,
        p_in_13_sample_M_imag_V_read,
        p_in_14_sample_M_imag_V_read,
        p_in_15_sample_M_imag_V_read,
        p_in_0_valid_read,
        p_in_1_valid_read,
        p_in_2_valid_read,
        p_in_3_valid_read,
        p_in_4_valid_read,
        p_in_5_valid_read,
        p_in_6_valid_read,
        p_in_7_valid_read,
        p_in_8_valid_read,
        p_in_9_valid_read,
        p_in_10_valid_read,
        p_in_11_valid_read,
        p_in_12_valid_read,
        p_in_13_valid_read,
        p_in_14_valid_read,
        p_in_15_valid_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_return_33,
        ap_return_34,
        ap_return_35,
        ap_return_36,
        ap_return_37,
        ap_return_38,
        ap_return_39,
        ap_return_40,
        ap_return_41,
        ap_return_42,
        ap_return_43,
        ap_return_44,
        ap_return_45,
        ap_return_46,
        ap_return_47,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [24:0] p_in_0_sample_M_real_V_read;
input  [24:0] p_in_1_sample_M_real_V_read;
input  [24:0] p_in_2_sample_M_real_V_read;
input  [24:0] p_in_3_sample_M_real_V_read;
input  [24:0] p_in_4_sample_M_real_V_read;
input  [24:0] p_in_5_sample_M_real_V_read;
input  [24:0] p_in_6_sample_M_real_V_read;
input  [24:0] p_in_7_sample_M_real_V_read;
input  [24:0] p_in_8_sample_M_real_V_read;
input  [24:0] p_in_9_sample_M_real_V_read;
input  [24:0] p_in_10_sample_M_real_V_read;
input  [24:0] p_in_11_sample_M_real_V_read;
input  [24:0] p_in_12_sample_M_real_V_read;
input  [24:0] p_in_13_sample_M_real_V_read;
input  [24:0] p_in_14_sample_M_real_V_read;
input  [24:0] p_in_15_sample_M_real_V_read;
input  [24:0] p_in_0_sample_M_imag_V_read;
input  [24:0] p_in_1_sample_M_imag_V_read;
input  [24:0] p_in_2_sample_M_imag_V_read;
input  [24:0] p_in_3_sample_M_imag_V_read;
input  [24:0] p_in_4_sample_M_imag_V_read;
input  [24:0] p_in_5_sample_M_imag_V_read;
input  [24:0] p_in_6_sample_M_imag_V_read;
input  [24:0] p_in_7_sample_M_imag_V_read;
input  [24:0] p_in_8_sample_M_imag_V_read;
input  [24:0] p_in_9_sample_M_imag_V_read;
input  [24:0] p_in_10_sample_M_imag_V_read;
input  [24:0] p_in_11_sample_M_imag_V_read;
input  [24:0] p_in_12_sample_M_imag_V_read;
input  [24:0] p_in_13_sample_M_imag_V_read;
input  [24:0] p_in_14_sample_M_imag_V_read;
input  [24:0] p_in_15_sample_M_imag_V_read;
input   p_in_0_valid_read;
input   p_in_1_valid_read;
input   p_in_2_valid_read;
input   p_in_3_valid_read;
input   p_in_4_valid_read;
input   p_in_5_valid_read;
input   p_in_6_valid_read;
input   p_in_7_valid_read;
input   p_in_8_valid_read;
input   p_in_9_valid_read;
input   p_in_10_valid_read;
input   p_in_11_valid_read;
input   p_in_12_valid_read;
input   p_in_13_valid_read;
input   p_in_14_valid_read;
input   p_in_15_valid_read;
output  [24:0] ap_return_0;
output  [24:0] ap_return_1;
output  [0:0] ap_return_2;
output  [24:0] ap_return_3;
output  [24:0] ap_return_4;
output  [24:0] ap_return_5;
output  [24:0] ap_return_6;
output  [24:0] ap_return_7;
output  [24:0] ap_return_8;
output  [24:0] ap_return_9;
output  [24:0] ap_return_10;
output  [24:0] ap_return_11;
output  [24:0] ap_return_12;
output  [24:0] ap_return_13;
output  [24:0] ap_return_14;
output  [24:0] ap_return_15;
output  [24:0] ap_return_16;
output  [24:0] ap_return_17;
output  [24:0] ap_return_18;
output  [24:0] ap_return_19;
output  [24:0] ap_return_20;
output  [24:0] ap_return_21;
output  [24:0] ap_return_22;
output  [24:0] ap_return_23;
output  [24:0] ap_return_24;
output  [24:0] ap_return_25;
output  [24:0] ap_return_26;
output  [24:0] ap_return_27;
output  [24:0] ap_return_28;
output  [24:0] ap_return_29;
output  [24:0] ap_return_30;
output  [24:0] ap_return_31;
output  [24:0] ap_return_32;
output  [0:0] ap_return_33;
output  [0:0] ap_return_34;
output  [0:0] ap_return_35;
output  [0:0] ap_return_36;
output  [0:0] ap_return_37;
output  [0:0] ap_return_38;
output  [0:0] ap_return_39;
output  [0:0] ap_return_40;
output  [0:0] ap_return_41;
output  [0:0] ap_return_42;
output  [0:0] ap_return_43;
output  [0:0] ap_return_44;
output  [0:0] ap_return_45;
output  [0:0] ap_return_46;
output  [0:0] ap_return_47;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    delayline_Array_samp_338_ce0;
reg    delayline_Array_samp_338_we0;
wire   [24:0] delayline_Array_samp_338_q0;
reg    delayline_Array_samp_155_ce0;
reg    delayline_Array_samp_155_we0;
wire   [24:0] delayline_Array_samp_155_q0;
reg    delayline_Array_vali_161_ce0;
reg    delayline_Array_vali_161_we0;
wire   [0:0] delayline_Array_vali_161_d0;
wire   [0:0] delayline_Array_vali_161_q0;
reg    delayline_Array_samp_340_ce0;
reg    delayline_Array_samp_340_we0;
wire   [24:0] delayline_Array_samp_340_q0;
reg    delayline_Array_samp_159_ce0;
reg    delayline_Array_samp_159_we0;
wire   [24:0] delayline_Array_samp_159_q0;
reg    delayline_Array_vali_163_ce0;
reg    delayline_Array_vali_163_we0;
wire   [0:0] delayline_Array_vali_163_d0;
wire   [0:0] delayline_Array_vali_163_q0;
reg    delayline_Array_samp_3_ce0;
reg    delayline_Array_samp_3_we0;
wire   [24:0] delayline_Array_samp_3_q0;
reg    delayline_Array_samp_167_ce0;
reg    delayline_Array_samp_167_we0;
wire   [24:0] delayline_Array_samp_167_q0;
reg    delayline_Array_vali_3_ce0;
reg    delayline_Array_vali_3_we0;
wire   [0:0] delayline_Array_vali_3_d0;
wire   [0:0] delayline_Array_vali_3_q0;
reg    delayline_Array_samp_9_ce0;
reg    delayline_Array_samp_9_we0;
wire   [24:0] delayline_Array_samp_9_q0;
reg    delayline_Array_samp_173_ce0;
reg    delayline_Array_samp_173_we0;
wire   [24:0] delayline_Array_samp_173_q0;
reg    delayline_Array_vali_9_ce0;
reg    delayline_Array_vali_9_we0;
wire   [0:0] delayline_Array_vali_9_d0;
wire   [0:0] delayline_Array_vali_9_q0;
reg    delayline_Array_samp_15_ce0;
reg    delayline_Array_samp_15_we0;
wire   [24:0] delayline_Array_samp_15_q0;
reg    delayline_Array_samp_179_ce0;
reg    delayline_Array_samp_179_we0;
wire   [24:0] delayline_Array_samp_179_q0;
reg    delayline_Array_vali_15_ce0;
reg    delayline_Array_vali_15_we0;
wire   [0:0] delayline_Array_vali_15_d0;
wire   [0:0] delayline_Array_vali_15_q0;
reg    delayline_Array_samp_19_ce0;
reg    delayline_Array_samp_19_we0;
wire   [24:0] delayline_Array_samp_19_q0;
reg    delayline_Array_samp_183_ce0;
reg    delayline_Array_samp_183_we0;
wire   [24:0] delayline_Array_samp_183_q0;
reg    delayline_Array_vali_19_ce0;
reg    delayline_Array_vali_19_we0;
wire   [0:0] delayline_Array_vali_19_d0;
wire   [0:0] delayline_Array_vali_19_q0;
reg    delayline_Array_samp_25_ce0;
reg    delayline_Array_samp_25_we0;
wire   [24:0] delayline_Array_samp_25_q0;
reg    delayline_Array_samp_189_ce0;
reg    delayline_Array_samp_189_we0;
wire   [24:0] delayline_Array_samp_189_q0;
reg    delayline_Array_vali_25_ce0;
reg    delayline_Array_vali_25_we0;
wire   [0:0] delayline_Array_vali_25_d0;
wire   [0:0] delayline_Array_vali_25_q0;
reg    delayline_Array_samp_315_ce0;
reg    delayline_Array_samp_315_we0;
wire   [24:0] delayline_Array_samp_315_q0;
reg    delayline_Array_samp_109_ce0;
reg    delayline_Array_samp_109_we0;
wire   [24:0] delayline_Array_samp_109_q0;
reg    delayline_Array_vali_135_ce0;
reg    delayline_Array_vali_135_we0;
wire   [0:0] delayline_Array_vali_135_d0;
wire   [0:0] delayline_Array_vali_135_q0;
reg    delayline_Array_samp_317_ce0;
reg    delayline_Array_samp_317_we0;
wire   [24:0] delayline_Array_samp_317_q0;
reg    delayline_Array_samp_113_ce0;
reg    delayline_Array_samp_113_we0;
wire   [24:0] delayline_Array_samp_113_q0;
reg    delayline_Array_vali_139_ce0;
reg    delayline_Array_vali_139_we0;
wire   [0:0] delayline_Array_vali_139_d0;
wire   [0:0] delayline_Array_vali_139_q0;
reg    delayline_Array_samp_321_ce0;
reg    delayline_Array_samp_321_we0;
wire   [24:0] delayline_Array_samp_321_q0;
reg    delayline_Array_samp_121_ce0;
reg    delayline_Array_samp_121_we0;
wire   [24:0] delayline_Array_samp_121_q0;
reg    delayline_Array_vali_144_ce0;
reg    delayline_Array_vali_144_we0;
wire   [0:0] delayline_Array_vali_144_d0;
wire   [0:0] delayline_Array_vali_144_q0;
reg    delayline_Array_samp_323_ce0;
reg    delayline_Array_samp_323_we0;
wire   [24:0] delayline_Array_samp_323_q0;
reg    delayline_Array_samp_125_ce0;
reg    delayline_Array_samp_125_we0;
wire   [24:0] delayline_Array_samp_125_q0;
reg    delayline_Array_vali_146_ce0;
reg    delayline_Array_vali_146_we0;
wire   [0:0] delayline_Array_vali_146_d0;
wire   [0:0] delayline_Array_vali_146_q0;
reg    delayline_Array_samp_326_ce0;
reg    delayline_Array_samp_326_we0;
wire   [24:0] delayline_Array_samp_326_q0;
reg    delayline_Array_samp_131_ce0;
reg    delayline_Array_samp_131_we0;
wire   [24:0] delayline_Array_samp_131_q0;
reg    delayline_Array_vali_149_ce0;
reg    delayline_Array_vali_149_we0;
wire   [0:0] delayline_Array_vali_149_d0;
wire   [0:0] delayline_Array_vali_149_q0;
reg    delayline_Array_samp_329_ce0;
reg    delayline_Array_samp_329_we0;
wire   [24:0] delayline_Array_samp_329_q0;
reg    delayline_Array_samp_137_ce0;
reg    delayline_Array_samp_137_we0;
wire   [24:0] delayline_Array_samp_137_q0;
reg    delayline_Array_vali_152_ce0;
reg    delayline_Array_vali_152_we0;
wire   [0:0] delayline_Array_vali_152_d0;
wire   [0:0] delayline_Array_vali_152_q0;
reg    delayline_Array_samp_333_ce0;
reg    delayline_Array_samp_333_we0;
wire   [24:0] delayline_Array_samp_333_q0;
reg    delayline_Array_samp_145_ce0;
reg    delayline_Array_samp_145_we0;
wire   [24:0] delayline_Array_samp_145_q0;
reg    delayline_Array_vali_156_ce0;
reg    delayline_Array_vali_156_we0;
wire   [0:0] delayline_Array_vali_156_d0;
wire   [0:0] delayline_Array_vali_156_q0;
reg    delayline_Array_samp_335_ce0;
reg    delayline_Array_samp_335_we0;
wire   [24:0] delayline_Array_samp_335_q0;
reg    delayline_Array_samp_149_ce0;
reg    delayline_Array_samp_149_we0;
wire   [24:0] delayline_Array_samp_149_q0;
reg    delayline_Array_vali_158_ce0;
reg    delayline_Array_vali_158_we0;
wire   [0:0] delayline_Array_vali_158_d0;
wire   [0:0] delayline_Array_vali_158_q0;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

process_6_delayligPb #(
    .DataWidth( 25 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
delayline_Array_samp_338_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd14),
    .ce0(delayline_Array_samp_338_ce0),
    .we0(delayline_Array_samp_338_we0),
    .d0(p_in_0_sample_M_real_V_read),
    .q0(delayline_Array_samp_338_q0)
);

process_6_delayligPb #(
    .DataWidth( 25 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
delayline_Array_samp_155_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd14),
    .ce0(delayline_Array_samp_155_ce0),
    .we0(delayline_Array_samp_155_we0),
    .d0(p_in_0_sample_M_imag_V_read),
    .q0(delayline_Array_samp_155_q0)
);

process_3_delayli9j0 #(
    .DataWidth( 1 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
delayline_Array_vali_161_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd14),
    .ce0(delayline_Array_vali_161_ce0),
    .we0(delayline_Array_vali_161_we0),
    .d0(delayline_Array_vali_161_d0),
    .q0(delayline_Array_vali_161_q0)
);

process_7_delayligob #(
    .DataWidth( 25 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
delayline_Array_samp_340_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd13),
    .ce0(delayline_Array_samp_340_ce0),
    .we0(delayline_Array_samp_340_we0),
    .d0(p_in_1_sample_M_real_V_read),
    .q0(delayline_Array_samp_340_q0)
);

process_7_delayligob #(
    .DataWidth( 25 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
delayline_Array_samp_159_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd13),
    .ce0(delayline_Array_samp_159_ce0),
    .we0(delayline_Array_samp_159_we0),
    .d0(p_in_1_sample_M_imag_V_read),
    .q0(delayline_Array_samp_159_q0)
);

process_4_delayliHfu #(
    .DataWidth( 1 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
delayline_Array_vali_163_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd13),
    .ce0(delayline_Array_vali_163_ce0),
    .we0(delayline_Array_vali_163_we0),
    .d0(delayline_Array_vali_163_d0),
    .q0(delayline_Array_vali_163_q0)
);

process_7_delayligrb #(
    .DataWidth( 25 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
delayline_Array_samp_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(delayline_Array_samp_3_ce0),
    .we0(delayline_Array_samp_3_we0),
    .d0(p_in_2_sample_M_real_V_read),
    .q0(delayline_Array_samp_3_q0)
);

process_7_delayligrb #(
    .DataWidth( 25 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
delayline_Array_samp_167_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(delayline_Array_samp_167_ce0),
    .we0(delayline_Array_samp_167_we0),
    .d0(p_in_2_sample_M_imag_V_read),
    .q0(delayline_Array_samp_167_q0)
);

process_4_delayliKfY #(
    .DataWidth( 1 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
delayline_Array_vali_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(delayline_Array_vali_3_ce0),
    .we0(delayline_Array_vali_3_we0),
    .d0(delayline_Array_vali_3_d0),
    .q0(delayline_Array_vali_3_q0)
);

process_7_delayligub #(
    .DataWidth( 25 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
delayline_Array_samp_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd11),
    .ce0(delayline_Array_samp_9_ce0),
    .we0(delayline_Array_samp_9_we0),
    .d0(p_in_3_sample_M_real_V_read),
    .q0(delayline_Array_samp_9_q0)
);

process_7_delayligub #(
    .DataWidth( 25 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
delayline_Array_samp_173_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd11),
    .ce0(delayline_Array_samp_173_ce0),
    .we0(delayline_Array_samp_173_we0),
    .d0(p_in_3_sample_M_imag_V_read),
    .q0(delayline_Array_samp_173_q0)
);

process_4_delayliNgs #(
    .DataWidth( 1 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
delayline_Array_vali_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd11),
    .ce0(delayline_Array_vali_9_ce0),
    .we0(delayline_Array_vali_9_we0),
    .d0(delayline_Array_vali_9_d0),
    .q0(delayline_Array_vali_9_q0)
);

process_7_delayligxb #(
    .DataWidth( 25 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
delayline_Array_samp_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(delayline_Array_samp_15_ce0),
    .we0(delayline_Array_samp_15_we0),
    .d0(p_in_4_sample_M_real_V_read),
    .q0(delayline_Array_samp_15_q0)
);

process_7_delayligxb #(
    .DataWidth( 25 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
delayline_Array_samp_179_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(delayline_Array_samp_179_ce0),
    .we0(delayline_Array_samp_179_we0),
    .d0(p_in_4_sample_M_imag_V_read),
    .q0(delayline_Array_samp_179_q0)
);

process_4_delayliQgW #(
    .DataWidth( 1 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
delayline_Array_vali_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(delayline_Array_vali_15_ce0),
    .we0(delayline_Array_vali_15_we0),
    .d0(delayline_Array_vali_15_d0),
    .q0(delayline_Array_vali_15_q0)
);

process_8_delaylifU5 #(
    .DataWidth( 25 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
delayline_Array_samp_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd9),
    .ce0(delayline_Array_samp_19_ce0),
    .we0(delayline_Array_samp_19_we0),
    .d0(p_in_5_sample_M_real_V_read),
    .q0(delayline_Array_samp_19_q0)
);

process_8_delaylifU5 #(
    .DataWidth( 25 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
delayline_Array_samp_183_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd9),
    .ce0(delayline_Array_samp_183_ce0),
    .we0(delayline_Array_samp_183_we0),
    .d0(p_in_5_sample_M_imag_V_read),
    .q0(delayline_Array_samp_183_q0)
);

process_5_delaylidEe #(
    .DataWidth( 1 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
delayline_Array_vali_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd9),
    .ce0(delayline_Array_vali_19_ce0),
    .we0(delayline_Array_vali_19_we0),
    .d0(delayline_Array_vali_19_d0),
    .q0(delayline_Array_vali_19_q0)
);

process_8_delaylifX5 #(
    .DataWidth( 25 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
delayline_Array_samp_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd8),
    .ce0(delayline_Array_samp_25_ce0),
    .we0(delayline_Array_samp_25_we0),
    .d0(p_in_6_sample_M_real_V_read),
    .q0(delayline_Array_samp_25_q0)
);

process_8_delaylifX5 #(
    .DataWidth( 25 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
delayline_Array_samp_189_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd8),
    .ce0(delayline_Array_samp_189_ce0),
    .we0(delayline_Array_samp_189_we0),
    .d0(p_in_6_sample_M_imag_V_read),
    .q0(delayline_Array_samp_189_q0)
);

process_5_delaylig8j #(
    .DataWidth( 1 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
delayline_Array_vali_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd8),
    .ce0(delayline_Array_vali_25_ce0),
    .we0(delayline_Array_vali_25_we0),
    .d0(delayline_Array_vali_25_d0),
    .q0(delayline_Array_vali_25_q0)
);

process_8_delaylif06 #(
    .DataWidth( 25 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
delayline_Array_samp_315_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(delayline_Array_samp_315_ce0),
    .we0(delayline_Array_samp_315_we0),
    .d0(p_in_7_sample_M_real_V_read),
    .q0(delayline_Array_samp_315_q0)
);

process_8_delaylif06 #(
    .DataWidth( 25 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
delayline_Array_samp_109_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(delayline_Array_samp_109_ce0),
    .we0(delayline_Array_samp_109_we0),
    .d0(p_in_7_sample_M_imag_V_read),
    .q0(delayline_Array_samp_109_q0)
);

process_5_delaylijbC #(
    .DataWidth( 1 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
delayline_Array_vali_135_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(delayline_Array_vali_135_ce0),
    .we0(delayline_Array_vali_135_we0),
    .d0(delayline_Array_vali_135_d0),
    .q0(delayline_Array_vali_135_q0)
);

process_8_delaylif36 #(
    .DataWidth( 25 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
delayline_Array_samp_317_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(delayline_Array_samp_317_ce0),
    .we0(delayline_Array_samp_317_we0),
    .d0(p_in_8_sample_M_real_V_read),
    .q0(delayline_Array_samp_317_q0)
);

process_8_delaylif36 #(
    .DataWidth( 25 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
delayline_Array_samp_113_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(delayline_Array_samp_113_ce0),
    .we0(delayline_Array_samp_113_we0),
    .d0(p_in_8_sample_M_imag_V_read),
    .q0(delayline_Array_samp_113_q0)
);

process_5_delaylimb6 #(
    .DataWidth( 1 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
delayline_Array_vali_139_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(delayline_Array_vali_139_ce0),
    .we0(delayline_Array_vali_139_we0),
    .d0(delayline_Array_vali_139_d0),
    .q0(delayline_Array_vali_139_q0)
);

process_8_delaylif67 #(
    .DataWidth( 25 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
delayline_Array_samp_321_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(delayline_Array_samp_321_ce0),
    .we0(delayline_Array_samp_321_we0),
    .d0(p_in_9_sample_M_real_V_read),
    .q0(delayline_Array_samp_321_q0)
);

process_8_delaylif67 #(
    .DataWidth( 25 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
delayline_Array_samp_121_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(delayline_Array_samp_121_ce0),
    .we0(delayline_Array_samp_121_we0),
    .d0(p_in_9_sample_M_imag_V_read),
    .q0(delayline_Array_samp_121_q0)
);

process_5_delaylipcA #(
    .DataWidth( 1 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
delayline_Array_vali_144_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(delayline_Array_vali_144_ce0),
    .we0(delayline_Array_vali_144_we0),
    .d0(delayline_Array_vali_144_d0),
    .q0(delayline_Array_vali_144_q0)
);

process_8_delaylif97 #(
    .DataWidth( 25 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
delayline_Array_samp_323_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd4),
    .ce0(delayline_Array_samp_323_ce0),
    .we0(delayline_Array_samp_323_we0),
    .d0(p_in_10_sample_M_real_V_read),
    .q0(delayline_Array_samp_323_q0)
);

process_8_delaylif97 #(
    .DataWidth( 25 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
delayline_Array_samp_125_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd4),
    .ce0(delayline_Array_samp_125_ce0),
    .we0(delayline_Array_samp_125_we0),
    .d0(p_in_10_sample_M_imag_V_read),
    .q0(delayline_Array_samp_125_q0)
);

process_5_delaylisc4 #(
    .DataWidth( 1 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
delayline_Array_vali_146_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd4),
    .ce0(delayline_Array_vali_146_ce0),
    .we0(delayline_Array_vali_146_we0),
    .d0(delayline_Array_vali_146_d0),
    .q0(delayline_Array_vali_146_q0)
);

process_8_delayligc8 #(
    .DataWidth( 25 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
delayline_Array_samp_326_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(delayline_Array_samp_326_ce0),
    .we0(delayline_Array_samp_326_we0),
    .d0(p_in_11_sample_M_real_V_read),
    .q0(delayline_Array_samp_326_q0)
);

process_8_delayligc8 #(
    .DataWidth( 25 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
delayline_Array_samp_131_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(delayline_Array_samp_131_ce0),
    .we0(delayline_Array_samp_131_we0),
    .d0(p_in_11_sample_M_imag_V_read),
    .q0(delayline_Array_samp_131_q0)
);

process_5_delaylivdy #(
    .DataWidth( 1 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
delayline_Array_vali_149_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(delayline_Array_vali_149_ce0),
    .we0(delayline_Array_vali_149_we0),
    .d0(delayline_Array_vali_149_d0),
    .q0(delayline_Array_vali_149_q0)
);

process_8_delayligf8 #(
    .DataWidth( 25 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
delayline_Array_samp_329_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd2),
    .ce0(delayline_Array_samp_329_ce0),
    .we0(delayline_Array_samp_329_we0),
    .d0(p_in_12_sample_M_real_V_read),
    .q0(delayline_Array_samp_329_q0)
);

process_8_delayligf8 #(
    .DataWidth( 25 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
delayline_Array_samp_137_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd2),
    .ce0(delayline_Array_samp_137_ce0),
    .we0(delayline_Array_samp_137_we0),
    .d0(p_in_12_sample_M_imag_V_read),
    .q0(delayline_Array_samp_137_q0)
);

process_5_delayliyd2 #(
    .DataWidth( 1 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
delayline_Array_vali_152_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd2),
    .ce0(delayline_Array_vali_152_ce0),
    .we0(delayline_Array_vali_152_we0),
    .d0(delayline_Array_vali_152_d0),
    .q0(delayline_Array_vali_152_q0)
);

process_8_delayligi9 #(
    .DataWidth( 25 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
delayline_Array_samp_333_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd1),
    .ce0(delayline_Array_samp_333_ce0),
    .we0(delayline_Array_samp_333_we0),
    .d0(p_in_13_sample_M_real_V_read),
    .q0(delayline_Array_samp_333_q0)
);

process_8_delayligi9 #(
    .DataWidth( 25 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
delayline_Array_samp_145_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd1),
    .ce0(delayline_Array_samp_145_ce0),
    .we0(delayline_Array_samp_145_we0),
    .d0(p_in_13_sample_M_imag_V_read),
    .q0(delayline_Array_samp_145_q0)
);

process_5_delayliBew #(
    .DataWidth( 1 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
delayline_Array_vali_156_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd1),
    .ce0(delayline_Array_vali_156_ce0),
    .we0(delayline_Array_vali_156_we0),
    .d0(delayline_Array_vali_156_d0),
    .q0(delayline_Array_vali_156_q0)
);

process_8_delayligl9 #(
    .DataWidth( 25 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
delayline_Array_samp_335_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd0),
    .ce0(delayline_Array_samp_335_ce0),
    .we0(delayline_Array_samp_335_we0),
    .d0(p_in_14_sample_M_real_V_read),
    .q0(delayline_Array_samp_335_q0)
);

process_8_delayligl9 #(
    .DataWidth( 25 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
delayline_Array_samp_149_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd0),
    .ce0(delayline_Array_samp_149_ce0),
    .we0(delayline_Array_samp_149_we0),
    .d0(p_in_14_sample_M_imag_V_read),
    .q0(delayline_Array_samp_149_q0)
);

process_5_delayliEe0 #(
    .DataWidth( 1 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
delayline_Array_vali_158_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd0),
    .ce0(delayline_Array_vali_158_ce0),
    .we0(delayline_Array_vali_158_we0),
    .d0(delayline_Array_vali_158_d0),
    .q0(delayline_Array_vali_158_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_109_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_109_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_109_we0 = 1'd1;
    end else begin
        delayline_Array_samp_109_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_113_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_113_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_113_we0 = 1'd1;
    end else begin
        delayline_Array_samp_113_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_121_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_121_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_121_we0 = 1'd1;
    end else begin
        delayline_Array_samp_121_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_125_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_125_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_125_we0 = 1'd1;
    end else begin
        delayline_Array_samp_125_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_131_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_131_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_131_we0 = 1'd1;
    end else begin
        delayline_Array_samp_131_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_137_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_137_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_137_we0 = 1'd1;
    end else begin
        delayline_Array_samp_137_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_145_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_145_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_145_we0 = 1'd1;
    end else begin
        delayline_Array_samp_145_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_149_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_149_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_149_we0 = 1'd1;
    end else begin
        delayline_Array_samp_149_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_155_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_155_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_155_we0 = 1'd1;
    end else begin
        delayline_Array_samp_155_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_159_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_159_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_159_we0 = 1'd1;
    end else begin
        delayline_Array_samp_159_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_15_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_15_we0 = 1'd1;
    end else begin
        delayline_Array_samp_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_167_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_167_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_167_we0 = 1'd1;
    end else begin
        delayline_Array_samp_167_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_173_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_173_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_173_we0 = 1'd1;
    end else begin
        delayline_Array_samp_173_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_179_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_179_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_179_we0 = 1'd1;
    end else begin
        delayline_Array_samp_179_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_183_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_183_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_183_we0 = 1'd1;
    end else begin
        delayline_Array_samp_183_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_189_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_189_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_189_we0 = 1'd1;
    end else begin
        delayline_Array_samp_189_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_19_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_19_we0 = 1'd1;
    end else begin
        delayline_Array_samp_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_25_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_25_we0 = 1'd1;
    end else begin
        delayline_Array_samp_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_315_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_315_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_315_we0 = 1'd1;
    end else begin
        delayline_Array_samp_315_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_317_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_317_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_317_we0 = 1'd1;
    end else begin
        delayline_Array_samp_317_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_321_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_321_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_321_we0 = 1'd1;
    end else begin
        delayline_Array_samp_321_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_323_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_323_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_323_we0 = 1'd1;
    end else begin
        delayline_Array_samp_323_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_326_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_326_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_326_we0 = 1'd1;
    end else begin
        delayline_Array_samp_326_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_329_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_329_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_329_we0 = 1'd1;
    end else begin
        delayline_Array_samp_329_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_333_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_333_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_333_we0 = 1'd1;
    end else begin
        delayline_Array_samp_333_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_335_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_335_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_335_we0 = 1'd1;
    end else begin
        delayline_Array_samp_335_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_338_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_338_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_338_we0 = 1'd1;
    end else begin
        delayline_Array_samp_338_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_340_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_340_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_340_we0 = 1'd1;
    end else begin
        delayline_Array_samp_340_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_3_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_3_we0 = 1'd1;
    end else begin
        delayline_Array_samp_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_9_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_9_we0 = 1'd1;
    end else begin
        delayline_Array_samp_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_135_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_135_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_135_we0 = 1'd1;
    end else begin
        delayline_Array_vali_135_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_139_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_139_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_139_we0 = 1'd1;
    end else begin
        delayline_Array_vali_139_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_144_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_144_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_144_we0 = 1'd1;
    end else begin
        delayline_Array_vali_144_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_146_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_146_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_146_we0 = 1'd1;
    end else begin
        delayline_Array_vali_146_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_149_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_149_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_149_we0 = 1'd1;
    end else begin
        delayline_Array_vali_149_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_152_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_152_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_152_we0 = 1'd1;
    end else begin
        delayline_Array_vali_152_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_156_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_156_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_156_we0 = 1'd1;
    end else begin
        delayline_Array_vali_156_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_158_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_158_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_158_we0 = 1'd1;
    end else begin
        delayline_Array_vali_158_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_15_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_15_we0 = 1'd1;
    end else begin
        delayline_Array_vali_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_161_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_161_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_161_we0 = 1'd1;
    end else begin
        delayline_Array_vali_161_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_163_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_163_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_163_we0 = 1'd1;
    end else begin
        delayline_Array_vali_163_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_19_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_19_we0 = 1'd1;
    end else begin
        delayline_Array_vali_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_25_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_25_we0 = 1'd1;
    end else begin
        delayline_Array_vali_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_3_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_3_we0 = 1'd1;
    end else begin
        delayline_Array_vali_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_9_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_9_we0 = 1'd1;
    end else begin
        delayline_Array_vali_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_return_0 = delayline_Array_samp_338_q0;

assign ap_return_1 = delayline_Array_samp_155_q0;

assign ap_return_10 = delayline_Array_samp_317_q0;

assign ap_return_11 = delayline_Array_samp_321_q0;

assign ap_return_12 = delayline_Array_samp_323_q0;

assign ap_return_13 = delayline_Array_samp_326_q0;

assign ap_return_14 = delayline_Array_samp_329_q0;

assign ap_return_15 = delayline_Array_samp_333_q0;

assign ap_return_16 = delayline_Array_samp_335_q0;

assign ap_return_17 = p_in_15_sample_M_real_V_read;

assign ap_return_18 = delayline_Array_samp_159_q0;

assign ap_return_19 = delayline_Array_samp_167_q0;

assign ap_return_2 = delayline_Array_vali_161_q0;

assign ap_return_20 = delayline_Array_samp_173_q0;

assign ap_return_21 = delayline_Array_samp_179_q0;

assign ap_return_22 = delayline_Array_samp_183_q0;

assign ap_return_23 = delayline_Array_samp_189_q0;

assign ap_return_24 = delayline_Array_samp_109_q0;

assign ap_return_25 = delayline_Array_samp_113_q0;

assign ap_return_26 = delayline_Array_samp_121_q0;

assign ap_return_27 = delayline_Array_samp_125_q0;

assign ap_return_28 = delayline_Array_samp_131_q0;

assign ap_return_29 = delayline_Array_samp_137_q0;

assign ap_return_3 = delayline_Array_samp_340_q0;

assign ap_return_30 = delayline_Array_samp_145_q0;

assign ap_return_31 = delayline_Array_samp_149_q0;

assign ap_return_32 = p_in_15_sample_M_imag_V_read;

assign ap_return_33 = delayline_Array_vali_163_q0;

assign ap_return_34 = delayline_Array_vali_3_q0;

assign ap_return_35 = delayline_Array_vali_9_q0;

assign ap_return_36 = delayline_Array_vali_15_q0;

assign ap_return_37 = delayline_Array_vali_19_q0;

assign ap_return_38 = delayline_Array_vali_25_q0;

assign ap_return_39 = delayline_Array_vali_135_q0;

assign ap_return_4 = delayline_Array_samp_3_q0;

assign ap_return_40 = delayline_Array_vali_139_q0;

assign ap_return_41 = delayline_Array_vali_144_q0;

assign ap_return_42 = delayline_Array_vali_146_q0;

assign ap_return_43 = delayline_Array_vali_149_q0;

assign ap_return_44 = delayline_Array_vali_152_q0;

assign ap_return_45 = delayline_Array_vali_156_q0;

assign ap_return_46 = delayline_Array_vali_158_q0;

assign ap_return_47 = p_in_15_valid_read;

assign ap_return_5 = delayline_Array_samp_9_q0;

assign ap_return_6 = delayline_Array_samp_15_q0;

assign ap_return_7 = delayline_Array_samp_19_q0;

assign ap_return_8 = delayline_Array_samp_25_q0;

assign ap_return_9 = delayline_Array_samp_315_q0;

assign delayline_Array_vali_135_d0 = p_in_7_valid_read;

assign delayline_Array_vali_139_d0 = p_in_8_valid_read;

assign delayline_Array_vali_144_d0 = p_in_9_valid_read;

assign delayline_Array_vali_146_d0 = p_in_10_valid_read;

assign delayline_Array_vali_149_d0 = p_in_11_valid_read;

assign delayline_Array_vali_152_d0 = p_in_12_valid_read;

assign delayline_Array_vali_156_d0 = p_in_13_valid_read;

assign delayline_Array_vali_158_d0 = p_in_14_valid_read;

assign delayline_Array_vali_15_d0 = p_in_4_valid_read;

assign delayline_Array_vali_161_d0 = p_in_0_valid_read;

assign delayline_Array_vali_163_d0 = p_in_1_valid_read;

assign delayline_Array_vali_19_d0 = p_in_5_valid_read;

assign delayline_Array_vali_25_d0 = p_in_6_valid_read;

assign delayline_Array_vali_3_d0 = p_in_2_valid_read;

assign delayline_Array_vali_9_d0 = p_in_3_valid_read;

endmodule //process_6
