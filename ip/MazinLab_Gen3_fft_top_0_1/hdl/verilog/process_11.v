// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_in_0_sample_M_real_V_read,
        p_in_1_sample_M_real_V_read,
        p_in_2_sample_M_real_V_read,
        p_in_3_sample_M_real_V_read,
        p_in_4_sample_M_real_V_read,
        p_in_5_sample_M_real_V_read,
        p_in_6_sample_M_real_V_read,
        p_in_7_sample_M_real_V_read,
        p_in_8_sample_M_real_V_read,
        p_in_9_sample_M_real_V_read,
        p_in_10_sample_M_real_V_read,
        p_in_0_sample_M_imag_V_read,
        p_in_1_sample_M_imag_V_read,
        p_in_2_sample_M_imag_V_read,
        p_in_3_sample_M_imag_V_read,
        p_in_4_sample_M_imag_V_read,
        p_in_5_sample_M_imag_V_read,
        p_in_6_sample_M_imag_V_read,
        p_in_7_sample_M_imag_V_read,
        p_in_8_sample_M_imag_V_read,
        p_in_9_sample_M_imag_V_read,
        p_in_10_sample_M_imag_V_read,
        p_in_0_valid_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_in_0_sample_M_real_V_read;
input  [15:0] p_in_1_sample_M_real_V_read;
input  [15:0] p_in_2_sample_M_real_V_read;
input  [15:0] p_in_3_sample_M_real_V_read;
input  [15:0] p_in_4_sample_M_real_V_read;
input  [15:0] p_in_5_sample_M_real_V_read;
input  [15:0] p_in_6_sample_M_real_V_read;
input  [15:0] p_in_7_sample_M_real_V_read;
input  [15:0] p_in_8_sample_M_real_V_read;
input  [15:0] p_in_9_sample_M_real_V_read;
input  [15:0] p_in_10_sample_M_real_V_read;
input  [15:0] p_in_0_sample_M_imag_V_read;
input  [15:0] p_in_1_sample_M_imag_V_read;
input  [15:0] p_in_2_sample_M_imag_V_read;
input  [15:0] p_in_3_sample_M_imag_V_read;
input  [15:0] p_in_4_sample_M_imag_V_read;
input  [15:0] p_in_5_sample_M_imag_V_read;
input  [15:0] p_in_6_sample_M_imag_V_read;
input  [15:0] p_in_7_sample_M_imag_V_read;
input  [15:0] p_in_8_sample_M_imag_V_read;
input  [15:0] p_in_9_sample_M_imag_V_read;
input  [15:0] p_in_10_sample_M_imag_V_read;
input   p_in_0_valid_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [0:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [0:0] ap_return_5;
output  [15:0] ap_return_6;
output  [15:0] ap_return_7;
output  [0:0] ap_return_8;
output  [15:0] ap_return_9;
output  [15:0] ap_return_10;
output  [0:0] ap_return_11;
output  [15:0] ap_return_12;
output  [15:0] ap_return_13;
output  [0:0] ap_return_14;
output  [15:0] ap_return_15;
output  [15:0] ap_return_16;
output  [0:0] ap_return_17;
output  [15:0] ap_return_18;
output  [15:0] ap_return_19;
output  [0:0] ap_return_20;
output  [15:0] ap_return_21;
output  [15:0] ap_return_22;
output  [0:0] ap_return_23;
output  [15:0] ap_return_24;
output  [15:0] ap_return_25;
output  [0:0] ap_return_26;
output  [15:0] ap_return_27;
output  [15:0] ap_return_28;
output  [0:0] ap_return_29;
output  [15:0] ap_return_30;
output  [15:0] ap_return_31;
output  [0:0] ap_return_32;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    delayline_Array_samp_64_ce0;
reg    delayline_Array_samp_64_we0;
wire   [15:0] delayline_Array_samp_64_q0;
reg    delayline_Array_samp_221_ce0;
reg    delayline_Array_samp_221_we0;
wire   [15:0] delayline_Array_samp_221_q0;
reg    delayline_Array_vali_89_ce0;
reg    delayline_Array_vali_89_we0;
wire   [0:0] delayline_Array_vali_89_d0;
wire   [0:0] delayline_Array_vali_89_q0;
reg    delayline_Array_samp_86_ce0;
reg    delayline_Array_samp_86_we0;
wire   [15:0] delayline_Array_samp_86_q0;
reg    delayline_Array_samp_225_ce0;
reg    delayline_Array_samp_225_we0;
wire   [15:0] delayline_Array_samp_225_q0;
reg    delayline_Array_vali_55_ce0;
reg    delayline_Array_vali_55_we0;
wire   [0:0] delayline_Array_vali_55_d0;
wire   [0:0] delayline_Array_vali_55_q0;
reg    delayline_Array_samp_ce0;
reg    delayline_Array_samp_we0;
wire   [15:0] delayline_Array_samp_q0;
reg    delayline_Array_samp_263_ce0;
reg    delayline_Array_samp_263_we0;
wire   [15:0] delayline_Array_samp_263_q0;
reg    delayline_Array_vali_ce0;
reg    delayline_Array_vali_we0;
wire   [0:0] delayline_Array_vali_d0;
wire   [0:0] delayline_Array_vali_q0;
reg    delayline_Array_samp_292_ce0;
reg    delayline_Array_samp_292_we0;
wire   [15:0] delayline_Array_samp_292_q0;
reg    delayline_Array_samp_80_ce0;
reg    delayline_Array_samp_80_we0;
wire   [15:0] delayline_Array_samp_80_q0;
reg    delayline_Array_vali_94_ce0;
reg    delayline_Array_vali_94_we0;
wire   [0:0] delayline_Array_vali_94_d0;
wire   [0:0] delayline_Array_vali_94_q0;
reg    delayline_Array_samp_318_ce0;
reg    delayline_Array_samp_318_we0;
wire   [15:0] delayline_Array_samp_318_q0;
reg    delayline_Array_samp_115_ce0;
reg    delayline_Array_samp_115_we0;
wire   [15:0] delayline_Array_samp_115_q0;
reg    delayline_Array_vali_141_ce0;
reg    delayline_Array_vali_141_we0;
wire   [0:0] delayline_Array_vali_141_d0;
wire   [0:0] delayline_Array_vali_141_q0;
reg    delayline_Array_samp_5_ce0;
reg    delayline_Array_samp_5_we0;
wire   [15:0] delayline_Array_samp_5_q0;
reg    delayline_Array_samp_169_ce0;
reg    delayline_Array_samp_169_we0;
wire   [15:0] delayline_Array_samp_169_q0;
reg    delayline_Array_vali_5_ce0;
reg    delayline_Array_vali_5_we0;
wire   [0:0] delayline_Array_vali_5_d0;
wire   [0:0] delayline_Array_vali_5_q0;
reg    delayline_Array_samp_265_ce0;
reg    delayline_Array_samp_265_we0;
wire   [15:0] delayline_Array_samp_265_q0;
reg    delayline_Array_samp_54_ce0;
reg    delayline_Array_samp_54_we0;
wire   [15:0] delayline_Array_samp_54_q0;
reg    delayline_Array_vali_67_ce0;
reg    delayline_Array_vali_67_we0;
wire   [0:0] delayline_Array_vali_67_d0;
wire   [0:0] delayline_Array_vali_67_q0;
reg    delayline_Array_samp_35_ce0;
reg    delayline_Array_samp_35_we0;
wire   [15:0] delayline_Array_samp_35_q0;
reg    delayline_Array_samp_199_ce0;
reg    delayline_Array_samp_199_we0;
wire   [15:0] delayline_Array_samp_199_q0;
reg    delayline_Array_vali_33_ce0;
reg    delayline_Array_vali_33_we0;
wire   [0:0] delayline_Array_vali_33_d0;
wire   [0:0] delayline_Array_vali_33_q0;
reg    delayline_Array_samp_41_ce0;
reg    delayline_Array_samp_41_we0;
wire   [15:0] delayline_Array_samp_41_q0;
reg    delayline_Array_samp_205_ce0;
reg    delayline_Array_samp_205_we0;
wire   [15:0] delayline_Array_samp_205_q0;
reg    delayline_Array_vali_39_ce0;
reg    delayline_Array_vali_39_we0;
wire   [0:0] delayline_Array_vali_39_d0;
wire   [0:0] delayline_Array_vali_39_q0;
reg    delayline_Array_samp_47_ce0;
reg    delayline_Array_samp_47_we0;
wire   [15:0] delayline_Array_samp_47_q0;
reg    delayline_Array_samp_211_ce0;
reg    delayline_Array_samp_211_we0;
wire   [15:0] delayline_Array_samp_211_q0;
reg    delayline_Array_vali_45_ce0;
reg    delayline_Array_vali_45_we0;
wire   [0:0] delayline_Array_vali_45_d0;
wire   [0:0] delayline_Array_vali_45_q0;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

process_11_delaylbUr #(
    .DataWidth( 16 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
delayline_Array_samp_64_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd159),
    .ce0(delayline_Array_samp_64_ce0),
    .we0(delayline_Array_samp_64_we0),
    .d0(p_in_10_sample_M_real_V_read),
    .q0(delayline_Array_samp_64_q0)
);

process_11_delaylbUr #(
    .DataWidth( 16 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
delayline_Array_samp_221_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd159),
    .ce0(delayline_Array_samp_221_ce0),
    .we0(delayline_Array_samp_221_we0),
    .d0(p_in_10_sample_M_imag_V_read),
    .q0(delayline_Array_samp_221_q0)
);

process_11_delaylbWr #(
    .DataWidth( 1 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
delayline_Array_vali_89_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd159),
    .ce0(delayline_Array_vali_89_ce0),
    .we0(delayline_Array_vali_89_we0),
    .d0(delayline_Array_vali_89_d0),
    .q0(delayline_Array_vali_89_q0)
);

process_11_delaylbXr #(
    .DataWidth( 16 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
delayline_Array_samp_86_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd143),
    .ce0(delayline_Array_samp_86_ce0),
    .we0(delayline_Array_samp_86_we0),
    .d0(p_in_9_sample_M_real_V_read),
    .q0(delayline_Array_samp_86_q0)
);

process_11_delaylbXr #(
    .DataWidth( 16 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
delayline_Array_samp_225_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd143),
    .ce0(delayline_Array_samp_225_ce0),
    .we0(delayline_Array_samp_225_we0),
    .d0(p_in_9_sample_M_imag_V_read),
    .q0(delayline_Array_samp_225_q0)
);

process_11_delaylbZs #(
    .DataWidth( 1 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
delayline_Array_vali_55_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd143),
    .ce0(delayline_Array_vali_55_ce0),
    .we0(delayline_Array_vali_55_we0),
    .d0(delayline_Array_vali_55_d0),
    .q0(delayline_Array_vali_55_q0)
);

process_11_delaylb0s #(
    .DataWidth( 16 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delayline_Array_samp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delayline_Array_samp_ce0),
    .we0(delayline_Array_samp_we0),
    .d0(p_in_8_sample_M_real_V_read),
    .q0(delayline_Array_samp_q0)
);

process_11_delaylb0s #(
    .DataWidth( 16 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delayline_Array_samp_263_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delayline_Array_samp_263_ce0),
    .we0(delayline_Array_samp_263_we0),
    .d0(p_in_8_sample_M_imag_V_read),
    .q0(delayline_Array_samp_263_q0)
);

process_11_delaylb2s #(
    .DataWidth( 1 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delayline_Array_vali_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delayline_Array_vali_ce0),
    .we0(delayline_Array_vali_we0),
    .d0(delayline_Array_vali_d0),
    .q0(delayline_Array_vali_q0)
);

process_11_delaylb3s #(
    .DataWidth( 16 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
delayline_Array_samp_292_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd111),
    .ce0(delayline_Array_samp_292_ce0),
    .we0(delayline_Array_samp_292_we0),
    .d0(p_in_7_sample_M_real_V_read),
    .q0(delayline_Array_samp_292_q0)
);

process_11_delaylb3s #(
    .DataWidth( 16 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
delayline_Array_samp_80_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd111),
    .ce0(delayline_Array_samp_80_ce0),
    .we0(delayline_Array_samp_80_we0),
    .d0(p_in_7_sample_M_imag_V_read),
    .q0(delayline_Array_samp_80_q0)
);

process_11_delaylb5t #(
    .DataWidth( 1 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
delayline_Array_vali_94_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd111),
    .ce0(delayline_Array_vali_94_ce0),
    .we0(delayline_Array_vali_94_we0),
    .d0(delayline_Array_vali_94_d0),
    .q0(delayline_Array_vali_94_q0)
);

process_11_delaylb6t #(
    .DataWidth( 16 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
delayline_Array_samp_318_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd95),
    .ce0(delayline_Array_samp_318_ce0),
    .we0(delayline_Array_samp_318_we0),
    .d0(p_in_6_sample_M_real_V_read),
    .q0(delayline_Array_samp_318_q0)
);

process_11_delaylb6t #(
    .DataWidth( 16 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
delayline_Array_samp_115_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd95),
    .ce0(delayline_Array_samp_115_ce0),
    .we0(delayline_Array_samp_115_we0),
    .d0(p_in_6_sample_M_imag_V_read),
    .q0(delayline_Array_samp_115_q0)
);

process_11_delaylb8t #(
    .DataWidth( 1 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
delayline_Array_vali_141_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd95),
    .ce0(delayline_Array_vali_141_ce0),
    .we0(delayline_Array_vali_141_we0),
    .d0(delayline_Array_vali_141_d0),
    .q0(delayline_Array_vali_141_q0)
);

process_11_delaylb9t #(
    .DataWidth( 16 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
delayline_Array_samp_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd79),
    .ce0(delayline_Array_samp_5_ce0),
    .we0(delayline_Array_samp_5_we0),
    .d0(p_in_5_sample_M_real_V_read),
    .q0(delayline_Array_samp_5_q0)
);

process_11_delaylb9t #(
    .DataWidth( 16 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
delayline_Array_samp_169_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd79),
    .ce0(delayline_Array_samp_169_ce0),
    .we0(delayline_Array_samp_169_we0),
    .d0(p_in_5_sample_M_imag_V_read),
    .q0(delayline_Array_samp_169_q0)
);

process_11_delaylcbu #(
    .DataWidth( 1 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
delayline_Array_vali_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd79),
    .ce0(delayline_Array_vali_5_ce0),
    .we0(delayline_Array_vali_5_we0),
    .d0(delayline_Array_vali_5_d0),
    .q0(delayline_Array_vali_5_q0)
);

process_11_delaylccu #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
delayline_Array_samp_265_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(delayline_Array_samp_265_ce0),
    .we0(delayline_Array_samp_265_we0),
    .d0(p_in_4_sample_M_real_V_read),
    .q0(delayline_Array_samp_265_q0)
);

process_11_delaylccu #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
delayline_Array_samp_54_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(delayline_Array_samp_54_ce0),
    .we0(delayline_Array_samp_54_we0),
    .d0(p_in_4_sample_M_imag_V_read),
    .q0(delayline_Array_samp_54_q0)
);

process_11_delaylceu #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
delayline_Array_vali_67_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(delayline_Array_vali_67_ce0),
    .we0(delayline_Array_vali_67_we0),
    .d0(delayline_Array_vali_67_d0),
    .q0(delayline_Array_vali_67_q0)
);

process_11_delaylcfu #(
    .DataWidth( 16 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
delayline_Array_samp_35_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd47),
    .ce0(delayline_Array_samp_35_ce0),
    .we0(delayline_Array_samp_35_we0),
    .d0(p_in_3_sample_M_real_V_read),
    .q0(delayline_Array_samp_35_q0)
);

process_11_delaylcfu #(
    .DataWidth( 16 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
delayline_Array_samp_199_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd47),
    .ce0(delayline_Array_samp_199_ce0),
    .we0(delayline_Array_samp_199_we0),
    .d0(p_in_3_sample_M_imag_V_read),
    .q0(delayline_Array_samp_199_q0)
);

process_11_delaylchv #(
    .DataWidth( 1 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
delayline_Array_vali_33_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd47),
    .ce0(delayline_Array_vali_33_ce0),
    .we0(delayline_Array_vali_33_we0),
    .d0(delayline_Array_vali_33_d0),
    .q0(delayline_Array_vali_33_q0)
);

process_11_delaylciv #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
delayline_Array_samp_41_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(delayline_Array_samp_41_ce0),
    .we0(delayline_Array_samp_41_we0),
    .d0(p_in_2_sample_M_real_V_read),
    .q0(delayline_Array_samp_41_q0)
);

process_11_delaylciv #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
delayline_Array_samp_205_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(delayline_Array_samp_205_ce0),
    .we0(delayline_Array_samp_205_we0),
    .d0(p_in_2_sample_M_imag_V_read),
    .q0(delayline_Array_samp_205_q0)
);

process_11_delaylckv #(
    .DataWidth( 1 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
delayline_Array_vali_39_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(delayline_Array_vali_39_ce0),
    .we0(delayline_Array_vali_39_we0),
    .d0(delayline_Array_vali_39_d0),
    .q0(delayline_Array_vali_39_q0)
);

process_11_delaylclv #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
delayline_Array_samp_47_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(delayline_Array_samp_47_ce0),
    .we0(delayline_Array_samp_47_we0),
    .d0(p_in_1_sample_M_real_V_read),
    .q0(delayline_Array_samp_47_q0)
);

process_11_delaylclv #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
delayline_Array_samp_211_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(delayline_Array_samp_211_ce0),
    .we0(delayline_Array_samp_211_we0),
    .d0(p_in_1_sample_M_imag_V_read),
    .q0(delayline_Array_samp_211_q0)
);

process_11_delaylcnw #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
delayline_Array_vali_45_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(delayline_Array_vali_45_ce0),
    .we0(delayline_Array_vali_45_we0),
    .d0(delayline_Array_vali_45_d0),
    .q0(delayline_Array_vali_45_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_115_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_115_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_115_we0 = 1'd1;
    end else begin
        delayline_Array_samp_115_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_169_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_169_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_169_we0 = 1'd1;
    end else begin
        delayline_Array_samp_169_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_199_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_199_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_199_we0 = 1'd1;
    end else begin
        delayline_Array_samp_199_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_205_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_205_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_205_we0 = 1'd1;
    end else begin
        delayline_Array_samp_205_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_211_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_211_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_211_we0 = 1'd1;
    end else begin
        delayline_Array_samp_211_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_221_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_221_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_221_we0 = 1'd1;
    end else begin
        delayline_Array_samp_221_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_225_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_225_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_225_we0 = 1'd1;
    end else begin
        delayline_Array_samp_225_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_263_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_263_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_263_we0 = 1'd1;
    end else begin
        delayline_Array_samp_263_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_265_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_265_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_265_we0 = 1'd1;
    end else begin
        delayline_Array_samp_265_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_292_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_292_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_292_we0 = 1'd1;
    end else begin
        delayline_Array_samp_292_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_318_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_318_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_318_we0 = 1'd1;
    end else begin
        delayline_Array_samp_318_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_35_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_35_we0 = 1'd1;
    end else begin
        delayline_Array_samp_35_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_41_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_41_we0 = 1'd1;
    end else begin
        delayline_Array_samp_41_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_47_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_47_we0 = 1'd1;
    end else begin
        delayline_Array_samp_47_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_54_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_54_we0 = 1'd1;
    end else begin
        delayline_Array_samp_54_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_5_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_5_we0 = 1'd1;
    end else begin
        delayline_Array_samp_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_64_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_64_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_64_we0 = 1'd1;
    end else begin
        delayline_Array_samp_64_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_80_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_80_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_80_we0 = 1'd1;
    end else begin
        delayline_Array_samp_80_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_86_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_86_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_86_we0 = 1'd1;
    end else begin
        delayline_Array_samp_86_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_we0 = 1'd1;
    end else begin
        delayline_Array_samp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_141_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_141_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_141_we0 = 1'd1;
    end else begin
        delayline_Array_vali_141_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_33_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_33_we0 = 1'd1;
    end else begin
        delayline_Array_vali_33_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_39_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_39_we0 = 1'd1;
    end else begin
        delayline_Array_vali_39_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_45_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_45_we0 = 1'd1;
    end else begin
        delayline_Array_vali_45_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_55_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_55_we0 = 1'd1;
    end else begin
        delayline_Array_vali_55_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_5_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_5_we0 = 1'd1;
    end else begin
        delayline_Array_vali_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_67_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_67_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_67_we0 = 1'd1;
    end else begin
        delayline_Array_vali_67_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_89_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_89_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_89_we0 = 1'd1;
    end else begin
        delayline_Array_vali_89_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_94_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_94_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_94_we0 = 1'd1;
    end else begin
        delayline_Array_vali_94_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_we0 = 1'd1;
    end else begin
        delayline_Array_vali_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_return_0 = delayline_Array_samp_64_q0;

assign ap_return_1 = delayline_Array_samp_221_q0;

assign ap_return_10 = delayline_Array_samp_80_q0;

assign ap_return_11 = delayline_Array_vali_94_q0;

assign ap_return_12 = delayline_Array_samp_318_q0;

assign ap_return_13 = delayline_Array_samp_115_q0;

assign ap_return_14 = delayline_Array_vali_141_q0;

assign ap_return_15 = delayline_Array_samp_5_q0;

assign ap_return_16 = delayline_Array_samp_169_q0;

assign ap_return_17 = delayline_Array_vali_5_q0;

assign ap_return_18 = delayline_Array_samp_265_q0;

assign ap_return_19 = delayline_Array_samp_54_q0;

assign ap_return_2 = delayline_Array_vali_89_q0;

assign ap_return_20 = delayline_Array_vali_67_q0;

assign ap_return_21 = delayline_Array_samp_35_q0;

assign ap_return_22 = delayline_Array_samp_199_q0;

assign ap_return_23 = delayline_Array_vali_33_q0;

assign ap_return_24 = delayline_Array_samp_41_q0;

assign ap_return_25 = delayline_Array_samp_205_q0;

assign ap_return_26 = delayline_Array_vali_39_q0;

assign ap_return_27 = delayline_Array_samp_47_q0;

assign ap_return_28 = delayline_Array_samp_211_q0;

assign ap_return_29 = delayline_Array_vali_45_q0;

assign ap_return_3 = delayline_Array_samp_86_q0;

assign ap_return_30 = p_in_0_sample_M_real_V_read;

assign ap_return_31 = p_in_0_sample_M_imag_V_read;

assign ap_return_32 = p_in_0_valid_read;

assign ap_return_4 = delayline_Array_samp_225_q0;

assign ap_return_5 = delayline_Array_vali_55_q0;

assign ap_return_6 = delayline_Array_samp_q0;

assign ap_return_7 = delayline_Array_samp_263_q0;

assign ap_return_8 = delayline_Array_vali_q0;

assign ap_return_9 = delayline_Array_samp_292_q0;

assign delayline_Array_vali_141_d0 = p_in_0_valid_read;

assign delayline_Array_vali_33_d0 = p_in_0_valid_read;

assign delayline_Array_vali_39_d0 = p_in_0_valid_read;

assign delayline_Array_vali_45_d0 = p_in_0_valid_read;

assign delayline_Array_vali_55_d0 = p_in_0_valid_read;

assign delayline_Array_vali_5_d0 = p_in_0_valid_read;

assign delayline_Array_vali_67_d0 = p_in_0_valid_read;

assign delayline_Array_vali_89_d0 = p_in_0_valid_read;

assign delayline_Array_vali_94_d0 = p_in_0_valid_read;

assign delayline_Array_vali_d0 = p_in_0_valid_read;

endmodule //process_11
