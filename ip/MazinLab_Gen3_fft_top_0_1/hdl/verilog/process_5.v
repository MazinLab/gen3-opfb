// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_in_0_sample_M_real_V_read,
        p_in_1_sample_M_real_V_read,
        p_in_2_sample_M_real_V_read,
        p_in_3_sample_M_real_V_read,
        p_in_4_sample_M_real_V_read,
        p_in_5_sample_M_real_V_read,
        p_in_6_sample_M_real_V_read,
        p_in_7_sample_M_real_V_read,
        p_in_8_sample_M_real_V_read,
        p_in_9_sample_M_real_V_read,
        p_in_10_sample_M_real_V_read,
        p_in_0_sample_M_imag_V_read,
        p_in_1_sample_M_imag_V_read,
        p_in_2_sample_M_imag_V_read,
        p_in_3_sample_M_imag_V_read,
        p_in_4_sample_M_imag_V_read,
        p_in_5_sample_M_imag_V_read,
        p_in_6_sample_M_imag_V_read,
        p_in_7_sample_M_imag_V_read,
        p_in_8_sample_M_imag_V_read,
        p_in_9_sample_M_imag_V_read,
        p_in_10_sample_M_imag_V_read,
        p_in_0_valid_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_in_0_sample_M_real_V_read;
input  [15:0] p_in_1_sample_M_real_V_read;
input  [15:0] p_in_2_sample_M_real_V_read;
input  [15:0] p_in_3_sample_M_real_V_read;
input  [15:0] p_in_4_sample_M_real_V_read;
input  [15:0] p_in_5_sample_M_real_V_read;
input  [15:0] p_in_6_sample_M_real_V_read;
input  [15:0] p_in_7_sample_M_real_V_read;
input  [15:0] p_in_8_sample_M_real_V_read;
input  [15:0] p_in_9_sample_M_real_V_read;
input  [15:0] p_in_10_sample_M_real_V_read;
input  [15:0] p_in_0_sample_M_imag_V_read;
input  [15:0] p_in_1_sample_M_imag_V_read;
input  [15:0] p_in_2_sample_M_imag_V_read;
input  [15:0] p_in_3_sample_M_imag_V_read;
input  [15:0] p_in_4_sample_M_imag_V_read;
input  [15:0] p_in_5_sample_M_imag_V_read;
input  [15:0] p_in_6_sample_M_imag_V_read;
input  [15:0] p_in_7_sample_M_imag_V_read;
input  [15:0] p_in_8_sample_M_imag_V_read;
input  [15:0] p_in_9_sample_M_imag_V_read;
input  [15:0] p_in_10_sample_M_imag_V_read;
input   p_in_0_valid_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [0:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [0:0] ap_return_5;
output  [15:0] ap_return_6;
output  [15:0] ap_return_7;
output  [0:0] ap_return_8;
output  [15:0] ap_return_9;
output  [15:0] ap_return_10;
output  [0:0] ap_return_11;
output  [15:0] ap_return_12;
output  [15:0] ap_return_13;
output  [0:0] ap_return_14;
output  [15:0] ap_return_15;
output  [15:0] ap_return_16;
output  [0:0] ap_return_17;
output  [15:0] ap_return_18;
output  [15:0] ap_return_19;
output  [0:0] ap_return_20;
output  [15:0] ap_return_21;
output  [15:0] ap_return_22;
output  [0:0] ap_return_23;
output  [15:0] ap_return_24;
output  [15:0] ap_return_25;
output  [0:0] ap_return_26;
output  [15:0] ap_return_27;
output  [15:0] ap_return_28;
output  [0:0] ap_return_29;
output  [15:0] ap_return_30;
output  [15:0] ap_return_31;
output  [0:0] ap_return_32;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    delayline_Array_samp_310_ce0;
reg    delayline_Array_samp_310_we0;
wire   [15:0] delayline_Array_samp_310_q0;
reg    delayline_Array_samp_99_ce0;
reg    delayline_Array_samp_99_we0;
wire   [15:0] delayline_Array_samp_99_q0;
reg    delayline_Array_vali_125_ce0;
reg    delayline_Array_vali_125_we0;
wire   [0:0] delayline_Array_vali_125_d0;
wire   [0:0] delayline_Array_vali_125_q0;
reg    delayline_Array_samp_312_ce0;
reg    delayline_Array_samp_312_we0;
wire   [15:0] delayline_Array_samp_312_q0;
reg    delayline_Array_samp_103_ce0;
reg    delayline_Array_samp_103_we0;
wire   [15:0] delayline_Array_samp_103_q0;
reg    delayline_Array_vali_129_ce0;
reg    delayline_Array_vali_129_we0;
wire   [0:0] delayline_Array_vali_129_d0;
wire   [0:0] delayline_Array_vali_129_q0;
reg    delayline_Array_samp_271_ce0;
reg    delayline_Array_samp_271_we0;
wire   [15:0] delayline_Array_samp_271_q0;
reg    delayline_Array_samp_60_ce0;
reg    delayline_Array_samp_60_we0;
wire   [15:0] delayline_Array_samp_60_q0;
reg    delayline_Array_vali_73_ce0;
reg    delayline_Array_vali_73_we0;
wire   [0:0] delayline_Array_vali_73_d0;
wire   [0:0] delayline_Array_vali_73_q0;
reg    delayline_Array_samp_273_ce0;
reg    delayline_Array_samp_273_we0;
wire   [15:0] delayline_Array_samp_273_q0;
reg    delayline_Array_samp_62_ce0;
reg    delayline_Array_samp_62_we0;
wire   [15:0] delayline_Array_samp_62_q0;
reg    delayline_Array_vali_75_ce0;
reg    delayline_Array_vali_75_we0;
wire   [0:0] delayline_Array_vali_75_d0;
wire   [0:0] delayline_Array_vali_75_q0;
reg    delayline_Array_samp_277_ce0;
reg    delayline_Array_samp_277_we0;
wire   [15:0] delayline_Array_samp_277_q0;
reg    delayline_Array_samp_66_ce0;
reg    delayline_Array_samp_66_we0;
wire   [15:0] delayline_Array_samp_66_q0;
reg    delayline_Array_vali_79_ce0;
reg    delayline_Array_vali_79_we0;
wire   [0:0] delayline_Array_vali_79_d0;
wire   [0:0] delayline_Array_vali_79_q0;
reg    delayline_Array_samp_280_ce0;
reg    delayline_Array_samp_280_we0;
wire   [15:0] delayline_Array_samp_280_q0;
reg    delayline_Array_samp_69_ce0;
reg    delayline_Array_samp_69_we0;
wire   [15:0] delayline_Array_samp_69_q0;
reg    delayline_Array_vali_82_ce0;
reg    delayline_Array_vali_82_we0;
wire   [0:0] delayline_Array_vali_82_d0;
wire   [0:0] delayline_Array_vali_82_q0;
reg    delayline_Array_samp_282_ce0;
reg    delayline_Array_samp_282_we0;
wire   [15:0] delayline_Array_samp_282_q0;
reg    delayline_Array_samp_71_ce0;
reg    delayline_Array_samp_71_we0;
wire   [15:0] delayline_Array_samp_71_q0;
reg    delayline_Array_vali_84_ce0;
reg    delayline_Array_vali_84_we0;
wire   [0:0] delayline_Array_vali_84_d0;
wire   [0:0] delayline_Array_vali_84_q0;
reg    delayline_Array_samp_285_ce0;
reg    delayline_Array_samp_285_we0;
wire   [15:0] delayline_Array_samp_285_q0;
reg    delayline_Array_samp_74_ce0;
reg    delayline_Array_samp_74_we0;
wire   [15:0] delayline_Array_samp_74_q0;
reg    delayline_Array_vali_87_ce0;
reg    delayline_Array_vali_87_we0;
wire   [0:0] delayline_Array_vali_87_d0;
wire   [0:0] delayline_Array_vali_87_q0;
reg    delayline_Array_samp_290_ce0;
reg    delayline_Array_samp_290_we0;
wire   [15:0] delayline_Array_samp_290_q0;
reg    delayline_Array_samp_78_ce0;
reg    delayline_Array_samp_78_we0;
wire   [15:0] delayline_Array_samp_78_q0;
reg    delayline_Array_vali_92_ce0;
reg    delayline_Array_vali_92_we0;
wire   [0:0] delayline_Array_vali_92_d0;
wire   [0:0] delayline_Array_vali_92_q0;
reg    delayline_Array_samp_293_ce0;
reg    delayline_Array_samp_293_we0;
wire   [15:0] delayline_Array_samp_293_q0;
reg    delayline_Array_samp_81_ce0;
reg    delayline_Array_samp_81_we0;
wire   [15:0] delayline_Array_samp_81_q0;
reg    delayline_Array_vali_95_ce0;
reg    delayline_Array_vali_95_we0;
wire   [0:0] delayline_Array_vali_95_d0;
wire   [0:0] delayline_Array_vali_95_q0;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

process_5_delaylibkb #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
delayline_Array_samp_310_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd9),
    .ce0(delayline_Array_samp_310_ce0),
    .we0(delayline_Array_samp_310_we0),
    .d0(p_in_10_sample_M_real_V_read),
    .q0(delayline_Array_samp_310_q0)
);

process_5_delaylibkb #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
delayline_Array_samp_99_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd9),
    .ce0(delayline_Array_samp_99_ce0),
    .we0(delayline_Array_samp_99_we0),
    .d0(p_in_10_sample_M_imag_V_read),
    .q0(delayline_Array_samp_99_q0)
);

process_5_delaylidEe #(
    .DataWidth( 1 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
delayline_Array_vali_125_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd9),
    .ce0(delayline_Array_vali_125_ce0),
    .we0(delayline_Array_vali_125_we0),
    .d0(delayline_Array_vali_125_d0),
    .q0(delayline_Array_vali_125_q0)
);

process_5_delaylieOg #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
delayline_Array_samp_312_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd8),
    .ce0(delayline_Array_samp_312_ce0),
    .we0(delayline_Array_samp_312_we0),
    .d0(p_in_9_sample_M_real_V_read),
    .q0(delayline_Array_samp_312_q0)
);

process_5_delaylieOg #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
delayline_Array_samp_103_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd8),
    .ce0(delayline_Array_samp_103_ce0),
    .we0(delayline_Array_samp_103_we0),
    .d0(p_in_9_sample_M_imag_V_read),
    .q0(delayline_Array_samp_103_q0)
);

process_5_delaylig8j #(
    .DataWidth( 1 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
delayline_Array_vali_129_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd8),
    .ce0(delayline_Array_vali_129_ce0),
    .we0(delayline_Array_vali_129_we0),
    .d0(delayline_Array_vali_129_d0),
    .q0(delayline_Array_vali_129_q0)
);

process_5_delaylihbi #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
delayline_Array_samp_271_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(delayline_Array_samp_271_ce0),
    .we0(delayline_Array_samp_271_we0),
    .d0(p_in_8_sample_M_real_V_read),
    .q0(delayline_Array_samp_271_q0)
);

process_5_delaylihbi #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
delayline_Array_samp_60_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(delayline_Array_samp_60_ce0),
    .we0(delayline_Array_samp_60_we0),
    .d0(p_in_8_sample_M_imag_V_read),
    .q0(delayline_Array_samp_60_q0)
);

process_5_delaylijbC #(
    .DataWidth( 1 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
delayline_Array_vali_73_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(delayline_Array_vali_73_ce0),
    .we0(delayline_Array_vali_73_we0),
    .d0(delayline_Array_vali_73_d0),
    .q0(delayline_Array_vali_73_q0)
);

process_5_delaylikbM #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
delayline_Array_samp_273_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(delayline_Array_samp_273_ce0),
    .we0(delayline_Array_samp_273_we0),
    .d0(p_in_7_sample_M_real_V_read),
    .q0(delayline_Array_samp_273_q0)
);

process_5_delaylikbM #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
delayline_Array_samp_62_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(delayline_Array_samp_62_ce0),
    .we0(delayline_Array_samp_62_we0),
    .d0(p_in_7_sample_M_imag_V_read),
    .q0(delayline_Array_samp_62_q0)
);

process_5_delaylimb6 #(
    .DataWidth( 1 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
delayline_Array_vali_75_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(delayline_Array_vali_75_ce0),
    .we0(delayline_Array_vali_75_we0),
    .d0(delayline_Array_vali_75_d0),
    .q0(delayline_Array_vali_75_q0)
);

process_5_delaylincg #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
delayline_Array_samp_277_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(delayline_Array_samp_277_ce0),
    .we0(delayline_Array_samp_277_we0),
    .d0(p_in_6_sample_M_real_V_read),
    .q0(delayline_Array_samp_277_q0)
);

process_5_delaylincg #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
delayline_Array_samp_66_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(delayline_Array_samp_66_ce0),
    .we0(delayline_Array_samp_66_we0),
    .d0(p_in_6_sample_M_imag_V_read),
    .q0(delayline_Array_samp_66_q0)
);

process_5_delaylipcA #(
    .DataWidth( 1 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
delayline_Array_vali_79_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(delayline_Array_vali_79_ce0),
    .we0(delayline_Array_vali_79_we0),
    .d0(delayline_Array_vali_79_d0),
    .q0(delayline_Array_vali_79_q0)
);

process_5_delayliqcK #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
delayline_Array_samp_280_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd4),
    .ce0(delayline_Array_samp_280_ce0),
    .we0(delayline_Array_samp_280_we0),
    .d0(p_in_5_sample_M_real_V_read),
    .q0(delayline_Array_samp_280_q0)
);

process_5_delayliqcK #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
delayline_Array_samp_69_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd4),
    .ce0(delayline_Array_samp_69_ce0),
    .we0(delayline_Array_samp_69_we0),
    .d0(p_in_5_sample_M_imag_V_read),
    .q0(delayline_Array_samp_69_q0)
);

process_5_delaylisc4 #(
    .DataWidth( 1 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
delayline_Array_vali_82_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd4),
    .ce0(delayline_Array_vali_82_ce0),
    .we0(delayline_Array_vali_82_we0),
    .d0(delayline_Array_vali_82_d0),
    .q0(delayline_Array_vali_82_q0)
);

process_5_delaylitde #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
delayline_Array_samp_282_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(delayline_Array_samp_282_ce0),
    .we0(delayline_Array_samp_282_we0),
    .d0(p_in_4_sample_M_real_V_read),
    .q0(delayline_Array_samp_282_q0)
);

process_5_delaylitde #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
delayline_Array_samp_71_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(delayline_Array_samp_71_ce0),
    .we0(delayline_Array_samp_71_we0),
    .d0(p_in_4_sample_M_imag_V_read),
    .q0(delayline_Array_samp_71_q0)
);

process_5_delaylivdy #(
    .DataWidth( 1 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
delayline_Array_vali_84_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(delayline_Array_vali_84_ce0),
    .we0(delayline_Array_vali_84_we0),
    .d0(delayline_Array_vali_84_d0),
    .q0(delayline_Array_vali_84_q0)
);

process_5_delayliwdI #(
    .DataWidth( 16 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
delayline_Array_samp_285_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd2),
    .ce0(delayline_Array_samp_285_ce0),
    .we0(delayline_Array_samp_285_we0),
    .d0(p_in_3_sample_M_real_V_read),
    .q0(delayline_Array_samp_285_q0)
);

process_5_delayliwdI #(
    .DataWidth( 16 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
delayline_Array_samp_74_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd2),
    .ce0(delayline_Array_samp_74_ce0),
    .we0(delayline_Array_samp_74_we0),
    .d0(p_in_3_sample_M_imag_V_read),
    .q0(delayline_Array_samp_74_q0)
);

process_5_delayliyd2 #(
    .DataWidth( 1 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
delayline_Array_vali_87_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd2),
    .ce0(delayline_Array_vali_87_ce0),
    .we0(delayline_Array_vali_87_we0),
    .d0(delayline_Array_vali_87_d0),
    .q0(delayline_Array_vali_87_q0)
);

process_5_delaylizec #(
    .DataWidth( 16 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
delayline_Array_samp_290_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd1),
    .ce0(delayline_Array_samp_290_ce0),
    .we0(delayline_Array_samp_290_we0),
    .d0(p_in_2_sample_M_real_V_read),
    .q0(delayline_Array_samp_290_q0)
);

process_5_delaylizec #(
    .DataWidth( 16 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
delayline_Array_samp_78_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd1),
    .ce0(delayline_Array_samp_78_ce0),
    .we0(delayline_Array_samp_78_we0),
    .d0(p_in_2_sample_M_imag_V_read),
    .q0(delayline_Array_samp_78_q0)
);

process_5_delayliBew #(
    .DataWidth( 1 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
delayline_Array_vali_92_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd1),
    .ce0(delayline_Array_vali_92_ce0),
    .we0(delayline_Array_vali_92_we0),
    .d0(delayline_Array_vali_92_d0),
    .q0(delayline_Array_vali_92_q0)
);

process_5_delayliCeG #(
    .DataWidth( 16 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
delayline_Array_samp_293_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd0),
    .ce0(delayline_Array_samp_293_ce0),
    .we0(delayline_Array_samp_293_we0),
    .d0(p_in_1_sample_M_real_V_read),
    .q0(delayline_Array_samp_293_q0)
);

process_5_delayliCeG #(
    .DataWidth( 16 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
delayline_Array_samp_81_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd0),
    .ce0(delayline_Array_samp_81_ce0),
    .we0(delayline_Array_samp_81_we0),
    .d0(p_in_1_sample_M_imag_V_read),
    .q0(delayline_Array_samp_81_q0)
);

process_5_delayliEe0 #(
    .DataWidth( 1 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
delayline_Array_vali_95_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd0),
    .ce0(delayline_Array_vali_95_ce0),
    .we0(delayline_Array_vali_95_we0),
    .d0(delayline_Array_vali_95_d0),
    .q0(delayline_Array_vali_95_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_103_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_103_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_103_we0 = 1'd1;
    end else begin
        delayline_Array_samp_103_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_271_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_271_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_271_we0 = 1'd1;
    end else begin
        delayline_Array_samp_271_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_273_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_273_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_273_we0 = 1'd1;
    end else begin
        delayline_Array_samp_273_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_277_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_277_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_277_we0 = 1'd1;
    end else begin
        delayline_Array_samp_277_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_280_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_280_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_280_we0 = 1'd1;
    end else begin
        delayline_Array_samp_280_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_282_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_282_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_282_we0 = 1'd1;
    end else begin
        delayline_Array_samp_282_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_285_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_285_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_285_we0 = 1'd1;
    end else begin
        delayline_Array_samp_285_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_290_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_290_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_290_we0 = 1'd1;
    end else begin
        delayline_Array_samp_290_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_293_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_293_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_293_we0 = 1'd1;
    end else begin
        delayline_Array_samp_293_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_310_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_310_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_310_we0 = 1'd1;
    end else begin
        delayline_Array_samp_310_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_312_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_312_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_312_we0 = 1'd1;
    end else begin
        delayline_Array_samp_312_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_60_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_60_we0 = 1'd1;
    end else begin
        delayline_Array_samp_60_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_62_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_62_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_62_we0 = 1'd1;
    end else begin
        delayline_Array_samp_62_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_66_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_66_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_66_we0 = 1'd1;
    end else begin
        delayline_Array_samp_66_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_69_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_69_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_69_we0 = 1'd1;
    end else begin
        delayline_Array_samp_69_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_71_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_71_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_71_we0 = 1'd1;
    end else begin
        delayline_Array_samp_71_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_74_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_74_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_74_we0 = 1'd1;
    end else begin
        delayline_Array_samp_74_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_78_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_78_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_78_we0 = 1'd1;
    end else begin
        delayline_Array_samp_78_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_81_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_81_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_81_we0 = 1'd1;
    end else begin
        delayline_Array_samp_81_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_99_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_99_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_99_we0 = 1'd1;
    end else begin
        delayline_Array_samp_99_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_125_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_125_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_125_we0 = 1'd1;
    end else begin
        delayline_Array_vali_125_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_129_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_129_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_129_we0 = 1'd1;
    end else begin
        delayline_Array_vali_129_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_73_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_73_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_73_we0 = 1'd1;
    end else begin
        delayline_Array_vali_73_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_75_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_75_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_75_we0 = 1'd1;
    end else begin
        delayline_Array_vali_75_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_79_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_79_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_79_we0 = 1'd1;
    end else begin
        delayline_Array_vali_79_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_82_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_82_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_82_we0 = 1'd1;
    end else begin
        delayline_Array_vali_82_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_84_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_84_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_84_we0 = 1'd1;
    end else begin
        delayline_Array_vali_84_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_87_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_87_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_87_we0 = 1'd1;
    end else begin
        delayline_Array_vali_87_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_92_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_92_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_92_we0 = 1'd1;
    end else begin
        delayline_Array_vali_92_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_95_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_95_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_95_we0 = 1'd1;
    end else begin
        delayline_Array_vali_95_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_return_0 = delayline_Array_samp_310_q0;

assign ap_return_1 = delayline_Array_samp_99_q0;

assign ap_return_10 = delayline_Array_samp_62_q0;

assign ap_return_11 = delayline_Array_vali_75_q0;

assign ap_return_12 = delayline_Array_samp_277_q0;

assign ap_return_13 = delayline_Array_samp_66_q0;

assign ap_return_14 = delayline_Array_vali_79_q0;

assign ap_return_15 = delayline_Array_samp_280_q0;

assign ap_return_16 = delayline_Array_samp_69_q0;

assign ap_return_17 = delayline_Array_vali_82_q0;

assign ap_return_18 = delayline_Array_samp_282_q0;

assign ap_return_19 = delayline_Array_samp_71_q0;

assign ap_return_2 = delayline_Array_vali_125_q0;

assign ap_return_20 = delayline_Array_vali_84_q0;

assign ap_return_21 = delayline_Array_samp_285_q0;

assign ap_return_22 = delayline_Array_samp_74_q0;

assign ap_return_23 = delayline_Array_vali_87_q0;

assign ap_return_24 = delayline_Array_samp_290_q0;

assign ap_return_25 = delayline_Array_samp_78_q0;

assign ap_return_26 = delayline_Array_vali_92_q0;

assign ap_return_27 = delayline_Array_samp_293_q0;

assign ap_return_28 = delayline_Array_samp_81_q0;

assign ap_return_29 = delayline_Array_vali_95_q0;

assign ap_return_3 = delayline_Array_samp_312_q0;

assign ap_return_30 = p_in_0_sample_M_real_V_read;

assign ap_return_31 = p_in_0_sample_M_imag_V_read;

assign ap_return_32 = p_in_0_valid_read;

assign ap_return_4 = delayline_Array_samp_103_q0;

assign ap_return_5 = delayline_Array_vali_129_q0;

assign ap_return_6 = delayline_Array_samp_271_q0;

assign ap_return_7 = delayline_Array_samp_60_q0;

assign ap_return_8 = delayline_Array_vali_73_q0;

assign ap_return_9 = delayline_Array_samp_273_q0;

assign delayline_Array_vali_125_d0 = p_in_0_valid_read;

assign delayline_Array_vali_129_d0 = p_in_0_valid_read;

assign delayline_Array_vali_73_d0 = p_in_0_valid_read;

assign delayline_Array_vali_75_d0 = p_in_0_valid_read;

assign delayline_Array_vali_79_d0 = p_in_0_valid_read;

assign delayline_Array_vali_82_d0 = p_in_0_valid_read;

assign delayline_Array_vali_84_d0 = p_in_0_valid_read;

assign delayline_Array_vali_87_d0 = p_in_0_valid_read;

assign delayline_Array_vali_92_d0 = p_in_0_valid_read;

assign delayline_Array_vali_95_d0 = p_in_0_valid_read;

endmodule //process_5
