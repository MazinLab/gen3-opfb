// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_in_0_sample_M_real_V_read,
        p_in_1_sample_M_real_V_read,
        p_in_2_sample_M_real_V_read,
        p_in_3_sample_M_real_V_read,
        p_in_4_sample_M_real_V_read,
        p_in_5_sample_M_real_V_read,
        p_in_6_sample_M_real_V_read,
        p_in_7_sample_M_real_V_read,
        p_in_8_sample_M_real_V_read,
        p_in_9_sample_M_real_V_read,
        p_in_10_sample_M_real_V_read,
        p_in_11_sample_M_real_V_read,
        p_in_12_sample_M_real_V_read,
        p_in_13_sample_M_real_V_read,
        p_in_14_sample_M_real_V_read,
        p_in_15_sample_M_real_V_read,
        p_in_0_sample_M_imag_V_read,
        p_in_1_sample_M_imag_V_read,
        p_in_2_sample_M_imag_V_read,
        p_in_3_sample_M_imag_V_read,
        p_in_4_sample_M_imag_V_read,
        p_in_5_sample_M_imag_V_read,
        p_in_6_sample_M_imag_V_read,
        p_in_7_sample_M_imag_V_read,
        p_in_8_sample_M_imag_V_read,
        p_in_9_sample_M_imag_V_read,
        p_in_10_sample_M_imag_V_read,
        p_in_11_sample_M_imag_V_read,
        p_in_12_sample_M_imag_V_read,
        p_in_13_sample_M_imag_V_read,
        p_in_14_sample_M_imag_V_read,
        p_in_15_sample_M_imag_V_read,
        p_in_0_valid_read,
        p_in_1_valid_read,
        p_in_2_valid_read,
        p_in_3_valid_read,
        p_in_4_valid_read,
        p_in_5_valid_read,
        p_in_6_valid_read,
        p_in_7_valid_read,
        p_in_8_valid_read,
        p_in_9_valid_read,
        p_in_10_valid_read,
        p_in_11_valid_read,
        p_in_12_valid_read,
        p_in_13_valid_read,
        p_in_14_valid_read,
        p_in_15_valid_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_return_33,
        ap_return_34,
        ap_return_35,
        ap_return_36,
        ap_return_37,
        ap_return_38,
        ap_return_39,
        ap_return_40,
        ap_return_41,
        ap_return_42,
        ap_return_43,
        ap_return_44,
        ap_return_45,
        ap_return_46,
        ap_return_47,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [20:0] p_in_0_sample_M_real_V_read;
input  [20:0] p_in_1_sample_M_real_V_read;
input  [20:0] p_in_2_sample_M_real_V_read;
input  [20:0] p_in_3_sample_M_real_V_read;
input  [20:0] p_in_4_sample_M_real_V_read;
input  [20:0] p_in_5_sample_M_real_V_read;
input  [20:0] p_in_6_sample_M_real_V_read;
input  [20:0] p_in_7_sample_M_real_V_read;
input  [20:0] p_in_8_sample_M_real_V_read;
input  [20:0] p_in_9_sample_M_real_V_read;
input  [20:0] p_in_10_sample_M_real_V_read;
input  [20:0] p_in_11_sample_M_real_V_read;
input  [20:0] p_in_12_sample_M_real_V_read;
input  [20:0] p_in_13_sample_M_real_V_read;
input  [20:0] p_in_14_sample_M_real_V_read;
input  [20:0] p_in_15_sample_M_real_V_read;
input  [20:0] p_in_0_sample_M_imag_V_read;
input  [20:0] p_in_1_sample_M_imag_V_read;
input  [20:0] p_in_2_sample_M_imag_V_read;
input  [20:0] p_in_3_sample_M_imag_V_read;
input  [20:0] p_in_4_sample_M_imag_V_read;
input  [20:0] p_in_5_sample_M_imag_V_read;
input  [20:0] p_in_6_sample_M_imag_V_read;
input  [20:0] p_in_7_sample_M_imag_V_read;
input  [20:0] p_in_8_sample_M_imag_V_read;
input  [20:0] p_in_9_sample_M_imag_V_read;
input  [20:0] p_in_10_sample_M_imag_V_read;
input  [20:0] p_in_11_sample_M_imag_V_read;
input  [20:0] p_in_12_sample_M_imag_V_read;
input  [20:0] p_in_13_sample_M_imag_V_read;
input  [20:0] p_in_14_sample_M_imag_V_read;
input  [20:0] p_in_15_sample_M_imag_V_read;
input   p_in_0_valid_read;
input   p_in_1_valid_read;
input   p_in_2_valid_read;
input   p_in_3_valid_read;
input   p_in_4_valid_read;
input   p_in_5_valid_read;
input   p_in_6_valid_read;
input   p_in_7_valid_read;
input   p_in_8_valid_read;
input   p_in_9_valid_read;
input   p_in_10_valid_read;
input   p_in_11_valid_read;
input   p_in_12_valid_read;
input   p_in_13_valid_read;
input   p_in_14_valid_read;
input   p_in_15_valid_read;
output  [20:0] ap_return_0;
output  [20:0] ap_return_1;
output  [0:0] ap_return_2;
output  [20:0] ap_return_3;
output  [20:0] ap_return_4;
output  [20:0] ap_return_5;
output  [20:0] ap_return_6;
output  [20:0] ap_return_7;
output  [20:0] ap_return_8;
output  [20:0] ap_return_9;
output  [20:0] ap_return_10;
output  [20:0] ap_return_11;
output  [20:0] ap_return_12;
output  [20:0] ap_return_13;
output  [20:0] ap_return_14;
output  [20:0] ap_return_15;
output  [20:0] ap_return_16;
output  [20:0] ap_return_17;
output  [20:0] ap_return_18;
output  [20:0] ap_return_19;
output  [20:0] ap_return_20;
output  [20:0] ap_return_21;
output  [20:0] ap_return_22;
output  [20:0] ap_return_23;
output  [20:0] ap_return_24;
output  [20:0] ap_return_25;
output  [20:0] ap_return_26;
output  [20:0] ap_return_27;
output  [20:0] ap_return_28;
output  [20:0] ap_return_29;
output  [20:0] ap_return_30;
output  [20:0] ap_return_31;
output  [20:0] ap_return_32;
output  [0:0] ap_return_33;
output  [0:0] ap_return_34;
output  [0:0] ap_return_35;
output  [0:0] ap_return_36;
output  [0:0] ap_return_37;
output  [0:0] ap_return_38;
output  [0:0] ap_return_39;
output  [0:0] ap_return_40;
output  [0:0] ap_return_41;
output  [0:0] ap_return_42;
output  [0:0] ap_return_43;
output  [0:0] ap_return_44;
output  [0:0] ap_return_45;
output  [0:0] ap_return_46;
output  [0:0] ap_return_47;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    delayline_Array_samp_185_ce0;
reg    delayline_Array_samp_185_we0;
wire   [20:0] delayline_Array_samp_185_q0;
reg    delayline_Array_samp_237_ce0;
reg    delayline_Array_samp_237_we0;
wire   [20:0] delayline_Array_samp_237_q0;
reg    delayline_Array_vali_62_ce0;
reg    delayline_Array_vali_62_we0;
wire   [0:0] delayline_Array_vali_62_d0;
wire   [0:0] delayline_Array_vali_62_q0;
reg    delayline_Array_samp_264_ce0;
reg    delayline_Array_samp_264_we0;
wire   [20:0] delayline_Array_samp_264_q0;
reg    delayline_Array_samp_245_ce0;
reg    delayline_Array_samp_245_we0;
wire   [20:0] delayline_Array_samp_245_q0;
reg    delayline_Array_vali_66_ce0;
reg    delayline_Array_vali_66_we0;
wire   [0:0] delayline_Array_vali_66_d0;
wire   [0:0] delayline_Array_vali_66_q0;
reg    delayline_Array_samp_298_ce0;
reg    delayline_Array_samp_298_we0;
wire   [20:0] delayline_Array_samp_298_q0;
reg    delayline_Array_samp_253_ce0;
reg    delayline_Array_samp_253_we0;
wire   [20:0] delayline_Array_samp_253_q0;
reg    delayline_Array_vali_101_ce0;
reg    delayline_Array_vali_101_we0;
wire   [0:0] delayline_Array_vali_101_d0;
wire   [0:0] delayline_Array_vali_101_q0;
reg    delayline_Array_samp_320_ce0;
reg    delayline_Array_samp_320_we0;
wire   [20:0] delayline_Array_samp_320_q0;
reg    delayline_Array_samp_256_ce0;
reg    delayline_Array_samp_256_we0;
wire   [20:0] delayline_Array_samp_256_q0;
reg    delayline_Array_vali_143_ce0;
reg    delayline_Array_vali_143_we0;
wire   [0:0] delayline_Array_vali_143_d0;
wire   [0:0] delayline_Array_vali_143_q0;
reg    delayline_Array_samp_342_ce0;
reg    delayline_Array_samp_342_we0;
wire   [20:0] delayline_Array_samp_342_q0;
reg    delayline_Array_samp_258_ce0;
reg    delayline_Array_samp_258_we0;
wire   [20:0] delayline_Array_samp_258_q0;
reg    delayline_Array_vali_165_ce0;
reg    delayline_Array_vali_165_we0;
wire   [0:0] delayline_Array_vali_165_d0;
wire   [0:0] delayline_Array_vali_165_q0;
reg    delayline_Array_samp_43_ce0;
reg    delayline_Array_samp_43_we0;
wire   [20:0] delayline_Array_samp_43_q0;
reg    delayline_Array_samp_260_ce0;
reg    delayline_Array_samp_260_we0;
wire   [20:0] delayline_Array_samp_260_q0;
reg    delayline_Array_vali_43_ce0;
reg    delayline_Array_vali_43_we0;
wire   [0:0] delayline_Array_vali_43_d0;
wire   [0:0] delayline_Array_vali_43_q0;
reg    delayline_Array_samp_267_ce0;
reg    delayline_Array_samp_267_we0;
wire   [20:0] delayline_Array_samp_267_q0;
reg    delayline_Array_samp_56_ce0;
reg    delayline_Array_samp_56_we0;
wire   [20:0] delayline_Array_samp_56_q0;
reg    delayline_Array_vali_69_ce0;
reg    delayline_Array_vali_69_we0;
wire   [0:0] delayline_Array_vali_69_d0;
wire   [0:0] delayline_Array_vali_69_q0;
reg    delayline_Array_samp_27_ce0;
reg    delayline_Array_samp_27_we0;
wire   [20:0] delayline_Array_samp_27_q0;
reg    delayline_Array_samp_191_ce0;
reg    delayline_Array_samp_191_we0;
wire   [20:0] delayline_Array_samp_191_q0;
reg    delayline_Array_vali_60_ce0;
reg    delayline_Array_vali_60_we0;
wire   [0:0] delayline_Array_vali_60_d0;
wire   [0:0] delayline_Array_vali_60_q0;
reg    delayline_Array_samp_286_ce0;
reg    delayline_Array_samp_286_we0;
wire   [20:0] delayline_Array_samp_286_q0;
reg    delayline_Array_samp_249_ce0;
reg    delayline_Array_samp_249_we0;
wire   [20:0] delayline_Array_samp_249_q0;
reg    delayline_Array_vali_88_ce0;
reg    delayline_Array_vali_88_we0;
wire   [0:0] delayline_Array_vali_88_d0;
wire   [0:0] delayline_Array_vali_88_q0;
reg    delayline_Array_samp_283_ce0;
reg    delayline_Array_samp_283_we0;
wire   [20:0] delayline_Array_samp_283_q0;
reg    delayline_Array_samp_72_ce0;
reg    delayline_Array_samp_72_we0;
wire   [20:0] delayline_Array_samp_72_q0;
reg    delayline_Array_vali_85_ce0;
reg    delayline_Array_vali_85_we0;
wire   [0:0] delayline_Array_vali_85_d0;
wire   [0:0] delayline_Array_vali_85_q0;
reg    delayline_Array_samp_314_ce0;
reg    delayline_Array_samp_314_we0;
wire   [20:0] delayline_Array_samp_314_q0;
reg    delayline_Array_samp_107_ce0;
reg    delayline_Array_samp_107_we0;
wire   [20:0] delayline_Array_samp_107_q0;
reg    delayline_Array_vali_133_ce0;
reg    delayline_Array_vali_133_we0;
wire   [0:0] delayline_Array_vali_133_d0;
wire   [0:0] delayline_Array_vali_133_q0;
reg    delayline_Array_samp_1_ce0;
reg    delayline_Array_samp_1_we0;
wire   [20:0] delayline_Array_samp_1_q0;
reg    delayline_Array_samp_165_ce0;
reg    delayline_Array_samp_165_we0;
wire   [20:0] delayline_Array_samp_165_q0;
reg    delayline_Array_vali_1_ce0;
reg    delayline_Array_vali_1_we0;
wire   [0:0] delayline_Array_vali_1_d0;
wire   [0:0] delayline_Array_vali_1_q0;
reg    delayline_Array_samp_31_ce0;
reg    delayline_Array_samp_31_we0;
wire   [20:0] delayline_Array_samp_31_q0;
reg    delayline_Array_samp_195_ce0;
reg    delayline_Array_samp_195_we0;
wire   [20:0] delayline_Array_samp_195_q0;
reg    delayline_Array_vali_29_ce0;
reg    delayline_Array_vali_29_we0;
wire   [0:0] delayline_Array_vali_29_d0;
wire   [0:0] delayline_Array_vali_29_q0;
reg    delayline_Array_samp_97_ce0;
reg    delayline_Array_samp_97_we0;
wire   [20:0] delayline_Array_samp_97_q0;
reg    delayline_Array_samp_227_ce0;
reg    delayline_Array_samp_227_we0;
wire   [20:0] delayline_Array_samp_227_q0;
reg    delayline_Array_vali_56_ce0;
reg    delayline_Array_vali_56_we0;
wire   [0:0] delayline_Array_vali_56_d0;
wire   [0:0] delayline_Array_vali_56_q0;
reg    delayline_Array_samp_141_ce0;
reg    delayline_Array_samp_141_we0;
wire   [20:0] delayline_Array_samp_141_q0;
reg    delayline_Array_samp_233_ce0;
reg    delayline_Array_samp_233_we0;
wire   [20:0] delayline_Array_samp_233_q0;
reg    delayline_Array_vali_59_ce0;
reg    delayline_Array_vali_59_we0;
wire   [0:0] delayline_Array_vali_59_d0;
wire   [0:0] delayline_Array_vali_59_q0;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

process_r_delaylieOU #(
    .DataWidth( 21 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
delayline_Array_samp_185_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd239),
    .ce0(delayline_Array_samp_185_ce0),
    .we0(delayline_Array_samp_185_we0),
    .d0(p_in_0_sample_M_real_V_read),
    .q0(delayline_Array_samp_185_q0)
);

process_r_delaylieOU #(
    .DataWidth( 21 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
delayline_Array_samp_237_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd239),
    .ce0(delayline_Array_samp_237_ce0),
    .we0(delayline_Array_samp_237_we0),
    .d0(p_in_0_sample_M_imag_V_read),
    .q0(delayline_Array_samp_237_q0)
);

process_9_delaylicQA #(
    .DataWidth( 1 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
delayline_Array_vali_62_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd239),
    .ce0(delayline_Array_vali_62_ce0),
    .we0(delayline_Array_vali_62_we0),
    .d0(delayline_Array_vali_62_d0),
    .q0(delayline_Array_vali_62_q0)
);

process_1_delaylienQ #(
    .DataWidth( 21 ),
    .AddressRange( 224 ),
    .AddressWidth( 8 ))
delayline_Array_samp_264_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd223),
    .ce0(delayline_Array_samp_264_ce0),
    .we0(delayline_Array_samp_264_we0),
    .d0(p_in_1_sample_M_real_V_read),
    .q0(delayline_Array_samp_264_q0)
);

process_1_delaylienQ #(
    .DataWidth( 21 ),
    .AddressRange( 224 ),
    .AddressWidth( 8 ))
delayline_Array_samp_245_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd223),
    .ce0(delayline_Array_samp_245_ce0),
    .we0(delayline_Array_samp_245_we0),
    .d0(p_in_1_sample_M_imag_V_read),
    .q0(delayline_Array_samp_245_q0)
);

process_10_delaylcqw #(
    .DataWidth( 1 ),
    .AddressRange( 224 ),
    .AddressWidth( 8 ))
delayline_Array_vali_66_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd223),
    .ce0(delayline_Array_vali_66_ce0),
    .we0(delayline_Array_vali_66_we0),
    .d0(delayline_Array_vali_66_d0),
    .q0(delayline_Array_vali_66_q0)
);

process_1_delaylieqQ #(
    .DataWidth( 21 ),
    .AddressRange( 208 ),
    .AddressWidth( 8 ))
delayline_Array_samp_298_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd207),
    .ce0(delayline_Array_samp_298_ce0),
    .we0(delayline_Array_samp_298_we0),
    .d0(p_in_2_sample_M_real_V_read),
    .q0(delayline_Array_samp_298_q0)
);

process_1_delaylieqQ #(
    .DataWidth( 21 ),
    .AddressRange( 208 ),
    .AddressWidth( 8 ))
delayline_Array_samp_253_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd207),
    .ce0(delayline_Array_samp_253_ce0),
    .we0(delayline_Array_samp_253_we0),
    .d0(p_in_2_sample_M_imag_V_read),
    .q0(delayline_Array_samp_253_q0)
);

process_10_delaylctx #(
    .DataWidth( 1 ),
    .AddressRange( 208 ),
    .AddressWidth( 8 ))
delayline_Array_vali_101_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd207),
    .ce0(delayline_Array_vali_101_ce0),
    .we0(delayline_Array_vali_101_we0),
    .d0(delayline_Array_vali_101_d0),
    .q0(delayline_Array_vali_101_q0)
);

process_1_delaylietR #(
    .DataWidth( 21 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
delayline_Array_samp_320_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd191),
    .ce0(delayline_Array_samp_320_ce0),
    .we0(delayline_Array_samp_320_we0),
    .d0(p_in_3_sample_M_real_V_read),
    .q0(delayline_Array_samp_320_q0)
);

process_1_delaylietR #(
    .DataWidth( 21 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
delayline_Array_samp_256_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd191),
    .ce0(delayline_Array_samp_256_ce0),
    .we0(delayline_Array_samp_256_we0),
    .d0(p_in_3_sample_M_imag_V_read),
    .q0(delayline_Array_samp_256_q0)
);

process_10_delaylcwx #(
    .DataWidth( 1 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
delayline_Array_vali_143_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd191),
    .ce0(delayline_Array_vali_143_ce0),
    .we0(delayline_Array_vali_143_we0),
    .d0(delayline_Array_vali_143_d0),
    .q0(delayline_Array_vali_143_q0)
);

process_1_delayliewR #(
    .DataWidth( 21 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
delayline_Array_samp_342_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd175),
    .ce0(delayline_Array_samp_342_ce0),
    .we0(delayline_Array_samp_342_we0),
    .d0(p_in_4_sample_M_real_V_read),
    .q0(delayline_Array_samp_342_q0)
);

process_1_delayliewR #(
    .DataWidth( 21 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
delayline_Array_samp_258_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd175),
    .ce0(delayline_Array_samp_258_ce0),
    .we0(delayline_Array_samp_258_we0),
    .d0(p_in_4_sample_M_imag_V_read),
    .q0(delayline_Array_samp_258_q0)
);

process_10_delaylczy #(
    .DataWidth( 1 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
delayline_Array_vali_165_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd175),
    .ce0(delayline_Array_vali_165_ce0),
    .we0(delayline_Array_vali_165_we0),
    .d0(delayline_Array_vali_165_d0),
    .q0(delayline_Array_vali_165_q0)
);

process_2_delaylidTL #(
    .DataWidth( 21 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
delayline_Array_samp_43_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd159),
    .ce0(delayline_Array_samp_43_ce0),
    .we0(delayline_Array_samp_43_we0),
    .d0(p_in_5_sample_M_real_V_read),
    .q0(delayline_Array_samp_43_q0)
);

process_2_delaylidTL #(
    .DataWidth( 21 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
delayline_Array_samp_260_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd159),
    .ce0(delayline_Array_samp_260_ce0),
    .we0(delayline_Array_samp_260_we0),
    .d0(p_in_5_sample_M_imag_V_read),
    .q0(delayline_Array_samp_260_q0)
);

process_11_delaylbWr #(
    .DataWidth( 1 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
delayline_Array_vali_43_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd159),
    .ce0(delayline_Array_vali_43_ce0),
    .we0(delayline_Array_vali_43_we0),
    .d0(delayline_Array_vali_43_d0),
    .q0(delayline_Array_vali_43_q0)
);

process_2_delaylidWL #(
    .DataWidth( 21 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
delayline_Array_samp_267_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd143),
    .ce0(delayline_Array_samp_267_ce0),
    .we0(delayline_Array_samp_267_we0),
    .d0(p_in_6_sample_M_real_V_read),
    .q0(delayline_Array_samp_267_q0)
);

process_2_delaylidWL #(
    .DataWidth( 21 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
delayline_Array_samp_56_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd143),
    .ce0(delayline_Array_samp_56_ce0),
    .we0(delayline_Array_samp_56_we0),
    .d0(p_in_6_sample_M_imag_V_read),
    .q0(delayline_Array_samp_56_q0)
);

process_11_delaylbZs #(
    .DataWidth( 1 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
delayline_Array_vali_69_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd143),
    .ce0(delayline_Array_vali_69_ce0),
    .we0(delayline_Array_vali_69_we0),
    .d0(delayline_Array_vali_69_d0),
    .q0(delayline_Array_vali_69_q0)
);

process_2_delaylidZM #(
    .DataWidth( 21 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delayline_Array_samp_27_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delayline_Array_samp_27_ce0),
    .we0(delayline_Array_samp_27_we0),
    .d0(p_in_7_sample_M_real_V_read),
    .q0(delayline_Array_samp_27_q0)
);

process_2_delaylidZM #(
    .DataWidth( 21 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delayline_Array_samp_191_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delayline_Array_samp_191_ce0),
    .we0(delayline_Array_samp_191_we0),
    .d0(p_in_7_sample_M_imag_V_read),
    .q0(delayline_Array_samp_191_q0)
);

process_11_delaylb2s #(
    .DataWidth( 1 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delayline_Array_vali_60_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delayline_Array_vali_60_ce0),
    .we0(delayline_Array_vali_60_we0),
    .d0(delayline_Array_vali_60_d0),
    .q0(delayline_Array_vali_60_q0)
);

process_2_delaylid2M #(
    .DataWidth( 21 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
delayline_Array_samp_286_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd111),
    .ce0(delayline_Array_samp_286_ce0),
    .we0(delayline_Array_samp_286_we0),
    .d0(p_in_8_sample_M_real_V_read),
    .q0(delayline_Array_samp_286_q0)
);

process_2_delaylid2M #(
    .DataWidth( 21 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
delayline_Array_samp_249_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd111),
    .ce0(delayline_Array_samp_249_ce0),
    .we0(delayline_Array_samp_249_we0),
    .d0(p_in_8_sample_M_imag_V_read),
    .q0(delayline_Array_samp_249_q0)
);

process_11_delaylb5t #(
    .DataWidth( 1 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
delayline_Array_vali_88_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd111),
    .ce0(delayline_Array_vali_88_ce0),
    .we0(delayline_Array_vali_88_we0),
    .d0(delayline_Array_vali_88_d0),
    .q0(delayline_Array_vali_88_q0)
);

process_2_delaylid5N #(
    .DataWidth( 21 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
delayline_Array_samp_283_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd95),
    .ce0(delayline_Array_samp_283_ce0),
    .we0(delayline_Array_samp_283_we0),
    .d0(p_in_9_sample_M_real_V_read),
    .q0(delayline_Array_samp_283_q0)
);

process_2_delaylid5N #(
    .DataWidth( 21 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
delayline_Array_samp_72_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd95),
    .ce0(delayline_Array_samp_72_ce0),
    .we0(delayline_Array_samp_72_we0),
    .d0(p_in_9_sample_M_imag_V_read),
    .q0(delayline_Array_samp_72_q0)
);

process_11_delaylb8t #(
    .DataWidth( 1 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
delayline_Array_vali_85_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd95),
    .ce0(delayline_Array_vali_85_ce0),
    .we0(delayline_Array_vali_85_we0),
    .d0(delayline_Array_vali_85_d0),
    .q0(delayline_Array_vali_85_q0)
);

process_2_delaylid8N #(
    .DataWidth( 21 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
delayline_Array_samp_314_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd79),
    .ce0(delayline_Array_samp_314_ce0),
    .we0(delayline_Array_samp_314_we0),
    .d0(p_in_10_sample_M_real_V_read),
    .q0(delayline_Array_samp_314_q0)
);

process_2_delaylid8N #(
    .DataWidth( 21 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
delayline_Array_samp_107_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd79),
    .ce0(delayline_Array_samp_107_ce0),
    .we0(delayline_Array_samp_107_we0),
    .d0(p_in_10_sample_M_imag_V_read),
    .q0(delayline_Array_samp_107_q0)
);

process_11_delaylcbu #(
    .DataWidth( 1 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
delayline_Array_vali_133_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd79),
    .ce0(delayline_Array_vali_133_ce0),
    .we0(delayline_Array_vali_133_we0),
    .d0(delayline_Array_vali_133_d0),
    .q0(delayline_Array_vali_133_q0)
);

process_2_delayliebO #(
    .DataWidth( 21 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
delayline_Array_samp_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(delayline_Array_samp_1_ce0),
    .we0(delayline_Array_samp_1_we0),
    .d0(p_in_11_sample_M_real_V_read),
    .q0(delayline_Array_samp_1_q0)
);

process_2_delayliebO #(
    .DataWidth( 21 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
delayline_Array_samp_165_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(delayline_Array_samp_165_ce0),
    .we0(delayline_Array_samp_165_we0),
    .d0(p_in_11_sample_M_imag_V_read),
    .q0(delayline_Array_samp_165_q0)
);

process_11_delaylceu #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
delayline_Array_vali_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(delayline_Array_vali_1_ce0),
    .we0(delayline_Array_vali_1_we0),
    .d0(delayline_Array_vali_1_d0),
    .q0(delayline_Array_vali_1_q0)
);

process_2_delaylieeO #(
    .DataWidth( 21 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
delayline_Array_samp_31_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd47),
    .ce0(delayline_Array_samp_31_ce0),
    .we0(delayline_Array_samp_31_we0),
    .d0(p_in_12_sample_M_real_V_read),
    .q0(delayline_Array_samp_31_q0)
);

process_2_delaylieeO #(
    .DataWidth( 21 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
delayline_Array_samp_195_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd47),
    .ce0(delayline_Array_samp_195_ce0),
    .we0(delayline_Array_samp_195_we0),
    .d0(p_in_12_sample_M_imag_V_read),
    .q0(delayline_Array_samp_195_q0)
);

process_11_delaylchv #(
    .DataWidth( 1 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
delayline_Array_vali_29_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd47),
    .ce0(delayline_Array_vali_29_ce0),
    .we0(delayline_Array_vali_29_we0),
    .d0(delayline_Array_vali_29_d0),
    .q0(delayline_Array_vali_29_q0)
);

process_2_delayliehP #(
    .DataWidth( 21 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
delayline_Array_samp_97_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(delayline_Array_samp_97_ce0),
    .we0(delayline_Array_samp_97_we0),
    .d0(p_in_13_sample_M_real_V_read),
    .q0(delayline_Array_samp_97_q0)
);

process_2_delayliehP #(
    .DataWidth( 21 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
delayline_Array_samp_227_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(delayline_Array_samp_227_ce0),
    .we0(delayline_Array_samp_227_we0),
    .d0(p_in_13_sample_M_imag_V_read),
    .q0(delayline_Array_samp_227_q0)
);

process_11_delaylckv #(
    .DataWidth( 1 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
delayline_Array_vali_56_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(delayline_Array_vali_56_ce0),
    .we0(delayline_Array_vali_56_we0),
    .d0(delayline_Array_vali_56_d0),
    .q0(delayline_Array_vali_56_q0)
);

process_2_delayliekP #(
    .DataWidth( 21 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
delayline_Array_samp_141_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(delayline_Array_samp_141_ce0),
    .we0(delayline_Array_samp_141_we0),
    .d0(p_in_14_sample_M_real_V_read),
    .q0(delayline_Array_samp_141_q0)
);

process_2_delayliekP #(
    .DataWidth( 21 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
delayline_Array_samp_233_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(delayline_Array_samp_233_ce0),
    .we0(delayline_Array_samp_233_we0),
    .d0(p_in_14_sample_M_imag_V_read),
    .q0(delayline_Array_samp_233_q0)
);

process_11_delaylcnw #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
delayline_Array_vali_59_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(delayline_Array_vali_59_ce0),
    .we0(delayline_Array_vali_59_we0),
    .d0(delayline_Array_vali_59_d0),
    .q0(delayline_Array_vali_59_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_107_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_107_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_107_we0 = 1'd1;
    end else begin
        delayline_Array_samp_107_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_141_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_141_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_141_we0 = 1'd1;
    end else begin
        delayline_Array_samp_141_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_165_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_165_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_165_we0 = 1'd1;
    end else begin
        delayline_Array_samp_165_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_185_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_185_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_185_we0 = 1'd1;
    end else begin
        delayline_Array_samp_185_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_191_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_191_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_191_we0 = 1'd1;
    end else begin
        delayline_Array_samp_191_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_195_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_195_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_195_we0 = 1'd1;
    end else begin
        delayline_Array_samp_195_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_1_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_1_we0 = 1'd1;
    end else begin
        delayline_Array_samp_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_227_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_227_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_227_we0 = 1'd1;
    end else begin
        delayline_Array_samp_227_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_233_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_233_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_233_we0 = 1'd1;
    end else begin
        delayline_Array_samp_233_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_237_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_237_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_237_we0 = 1'd1;
    end else begin
        delayline_Array_samp_237_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_245_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_245_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_245_we0 = 1'd1;
    end else begin
        delayline_Array_samp_245_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_249_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_249_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_249_we0 = 1'd1;
    end else begin
        delayline_Array_samp_249_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_253_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_253_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_253_we0 = 1'd1;
    end else begin
        delayline_Array_samp_253_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_256_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_256_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_256_we0 = 1'd1;
    end else begin
        delayline_Array_samp_256_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_258_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_258_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_258_we0 = 1'd1;
    end else begin
        delayline_Array_samp_258_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_260_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_260_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_260_we0 = 1'd1;
    end else begin
        delayline_Array_samp_260_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_264_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_264_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_264_we0 = 1'd1;
    end else begin
        delayline_Array_samp_264_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_267_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_267_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_267_we0 = 1'd1;
    end else begin
        delayline_Array_samp_267_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_27_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_27_we0 = 1'd1;
    end else begin
        delayline_Array_samp_27_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_283_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_283_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_283_we0 = 1'd1;
    end else begin
        delayline_Array_samp_283_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_286_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_286_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_286_we0 = 1'd1;
    end else begin
        delayline_Array_samp_286_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_298_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_298_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_298_we0 = 1'd1;
    end else begin
        delayline_Array_samp_298_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_314_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_314_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_314_we0 = 1'd1;
    end else begin
        delayline_Array_samp_314_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_31_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_31_we0 = 1'd1;
    end else begin
        delayline_Array_samp_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_320_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_320_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_320_we0 = 1'd1;
    end else begin
        delayline_Array_samp_320_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_342_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_342_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_342_we0 = 1'd1;
    end else begin
        delayline_Array_samp_342_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_43_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_43_we0 = 1'd1;
    end else begin
        delayline_Array_samp_43_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_56_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_56_we0 = 1'd1;
    end else begin
        delayline_Array_samp_56_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_72_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_72_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_72_we0 = 1'd1;
    end else begin
        delayline_Array_samp_72_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_97_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_97_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_97_we0 = 1'd1;
    end else begin
        delayline_Array_samp_97_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_101_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_101_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_101_we0 = 1'd1;
    end else begin
        delayline_Array_vali_101_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_133_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_133_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_133_we0 = 1'd1;
    end else begin
        delayline_Array_vali_133_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_143_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_143_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_143_we0 = 1'd1;
    end else begin
        delayline_Array_vali_143_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_165_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_165_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_165_we0 = 1'd1;
    end else begin
        delayline_Array_vali_165_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_1_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_1_we0 = 1'd1;
    end else begin
        delayline_Array_vali_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_29_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_29_we0 = 1'd1;
    end else begin
        delayline_Array_vali_29_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_43_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_43_we0 = 1'd1;
    end else begin
        delayline_Array_vali_43_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_56_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_56_we0 = 1'd1;
    end else begin
        delayline_Array_vali_56_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_59_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_59_we0 = 1'd1;
    end else begin
        delayline_Array_vali_59_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_60_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_60_we0 = 1'd1;
    end else begin
        delayline_Array_vali_60_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_62_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_62_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_62_we0 = 1'd1;
    end else begin
        delayline_Array_vali_62_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_66_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_66_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_66_we0 = 1'd1;
    end else begin
        delayline_Array_vali_66_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_69_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_69_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_69_we0 = 1'd1;
    end else begin
        delayline_Array_vali_69_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_85_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_85_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_85_we0 = 1'd1;
    end else begin
        delayline_Array_vali_85_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_88_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_88_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_88_we0 = 1'd1;
    end else begin
        delayline_Array_vali_88_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_return_0 = delayline_Array_samp_185_q0;

assign ap_return_1 = delayline_Array_samp_237_q0;

assign ap_return_10 = delayline_Array_samp_286_q0;

assign ap_return_11 = delayline_Array_samp_283_q0;

assign ap_return_12 = delayline_Array_samp_314_q0;

assign ap_return_13 = delayline_Array_samp_1_q0;

assign ap_return_14 = delayline_Array_samp_31_q0;

assign ap_return_15 = delayline_Array_samp_97_q0;

assign ap_return_16 = delayline_Array_samp_141_q0;

assign ap_return_17 = p_in_15_sample_M_real_V_read;

assign ap_return_18 = delayline_Array_samp_245_q0;

assign ap_return_19 = delayline_Array_samp_253_q0;

assign ap_return_2 = delayline_Array_vali_62_q0;

assign ap_return_20 = delayline_Array_samp_256_q0;

assign ap_return_21 = delayline_Array_samp_258_q0;

assign ap_return_22 = delayline_Array_samp_260_q0;

assign ap_return_23 = delayline_Array_samp_56_q0;

assign ap_return_24 = delayline_Array_samp_191_q0;

assign ap_return_25 = delayline_Array_samp_249_q0;

assign ap_return_26 = delayline_Array_samp_72_q0;

assign ap_return_27 = delayline_Array_samp_107_q0;

assign ap_return_28 = delayline_Array_samp_165_q0;

assign ap_return_29 = delayline_Array_samp_195_q0;

assign ap_return_3 = delayline_Array_samp_264_q0;

assign ap_return_30 = delayline_Array_samp_227_q0;

assign ap_return_31 = delayline_Array_samp_233_q0;

assign ap_return_32 = p_in_15_sample_M_imag_V_read;

assign ap_return_33 = delayline_Array_vali_66_q0;

assign ap_return_34 = delayline_Array_vali_101_q0;

assign ap_return_35 = delayline_Array_vali_143_q0;

assign ap_return_36 = delayline_Array_vali_165_q0;

assign ap_return_37 = delayline_Array_vali_43_q0;

assign ap_return_38 = delayline_Array_vali_69_q0;

assign ap_return_39 = delayline_Array_vali_60_q0;

assign ap_return_4 = delayline_Array_samp_298_q0;

assign ap_return_40 = delayline_Array_vali_88_q0;

assign ap_return_41 = delayline_Array_vali_85_q0;

assign ap_return_42 = delayline_Array_vali_133_q0;

assign ap_return_43 = delayline_Array_vali_1_q0;

assign ap_return_44 = delayline_Array_vali_29_q0;

assign ap_return_45 = delayline_Array_vali_56_q0;

assign ap_return_46 = delayline_Array_vali_59_q0;

assign ap_return_47 = p_in_15_valid_read;

assign ap_return_5 = delayline_Array_samp_320_q0;

assign ap_return_6 = delayline_Array_samp_342_q0;

assign ap_return_7 = delayline_Array_samp_43_q0;

assign ap_return_8 = delayline_Array_samp_267_q0;

assign ap_return_9 = delayline_Array_samp_27_q0;

assign delayline_Array_vali_101_d0 = p_in_2_valid_read;

assign delayline_Array_vali_133_d0 = p_in_10_valid_read;

assign delayline_Array_vali_143_d0 = p_in_3_valid_read;

assign delayline_Array_vali_165_d0 = p_in_4_valid_read;

assign delayline_Array_vali_1_d0 = p_in_11_valid_read;

assign delayline_Array_vali_29_d0 = p_in_12_valid_read;

assign delayline_Array_vali_43_d0 = p_in_5_valid_read;

assign delayline_Array_vali_56_d0 = p_in_13_valid_read;

assign delayline_Array_vali_59_d0 = p_in_14_valid_read;

assign delayline_Array_vali_60_d0 = p_in_7_valid_read;

assign delayline_Array_vali_62_d0 = p_in_0_valid_read;

assign delayline_Array_vali_66_d0 = p_in_1_valid_read;

assign delayline_Array_vali_69_d0 = p_in_6_valid_read;

assign delayline_Array_vali_85_d0 = p_in_9_valid_read;

assign delayline_Array_vali_88_d0 = p_in_8_valid_read;

endmodule //process_r
