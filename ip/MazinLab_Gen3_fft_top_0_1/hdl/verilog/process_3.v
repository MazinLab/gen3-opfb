// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_in_0_sample_M_real_V_read,
        p_in_1_sample_M_real_V_read,
        p_in_2_sample_M_real_V_read,
        p_in_3_sample_M_real_V_read,
        p_in_4_sample_M_real_V_read,
        p_in_5_sample_M_real_V_read,
        p_in_6_sample_M_real_V_read,
        p_in_7_sample_M_real_V_read,
        p_in_8_sample_M_real_V_read,
        p_in_9_sample_M_real_V_read,
        p_in_10_sample_M_real_V_read,
        p_in_11_sample_M_real_V_read,
        p_in_12_sample_M_real_V_read,
        p_in_13_sample_M_real_V_read,
        p_in_14_sample_M_real_V_read,
        p_in_15_sample_M_real_V_read,
        p_in_0_sample_M_imag_V_read,
        p_in_1_sample_M_imag_V_read,
        p_in_2_sample_M_imag_V_read,
        p_in_3_sample_M_imag_V_read,
        p_in_4_sample_M_imag_V_read,
        p_in_5_sample_M_imag_V_read,
        p_in_6_sample_M_imag_V_read,
        p_in_7_sample_M_imag_V_read,
        p_in_8_sample_M_imag_V_read,
        p_in_9_sample_M_imag_V_read,
        p_in_10_sample_M_imag_V_read,
        p_in_11_sample_M_imag_V_read,
        p_in_12_sample_M_imag_V_read,
        p_in_13_sample_M_imag_V_read,
        p_in_14_sample_M_imag_V_read,
        p_in_15_sample_M_imag_V_read,
        p_in_0_valid_read,
        p_in_1_valid_read,
        p_in_2_valid_read,
        p_in_3_valid_read,
        p_in_4_valid_read,
        p_in_5_valid_read,
        p_in_6_valid_read,
        p_in_7_valid_read,
        p_in_8_valid_read,
        p_in_9_valid_read,
        p_in_10_valid_read,
        p_in_11_valid_read,
        p_in_12_valid_read,
        p_in_13_valid_read,
        p_in_14_valid_read,
        p_in_15_valid_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_return_33,
        ap_return_34,
        ap_return_35,
        ap_return_36,
        ap_return_37,
        ap_return_38,
        ap_return_39,
        ap_return_40,
        ap_return_41,
        ap_return_42,
        ap_return_43,
        ap_return_44,
        ap_return_45,
        ap_return_46,
        ap_return_47,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_in_0_sample_M_real_V_read;
input  [15:0] p_in_1_sample_M_real_V_read;
input  [15:0] p_in_2_sample_M_real_V_read;
input  [15:0] p_in_3_sample_M_real_V_read;
input  [15:0] p_in_4_sample_M_real_V_read;
input  [15:0] p_in_5_sample_M_real_V_read;
input  [15:0] p_in_6_sample_M_real_V_read;
input  [15:0] p_in_7_sample_M_real_V_read;
input  [15:0] p_in_8_sample_M_real_V_read;
input  [15:0] p_in_9_sample_M_real_V_read;
input  [15:0] p_in_10_sample_M_real_V_read;
input  [15:0] p_in_11_sample_M_real_V_read;
input  [15:0] p_in_12_sample_M_real_V_read;
input  [15:0] p_in_13_sample_M_real_V_read;
input  [15:0] p_in_14_sample_M_real_V_read;
input  [15:0] p_in_15_sample_M_real_V_read;
input  [15:0] p_in_0_sample_M_imag_V_read;
input  [15:0] p_in_1_sample_M_imag_V_read;
input  [15:0] p_in_2_sample_M_imag_V_read;
input  [15:0] p_in_3_sample_M_imag_V_read;
input  [15:0] p_in_4_sample_M_imag_V_read;
input  [15:0] p_in_5_sample_M_imag_V_read;
input  [15:0] p_in_6_sample_M_imag_V_read;
input  [15:0] p_in_7_sample_M_imag_V_read;
input  [15:0] p_in_8_sample_M_imag_V_read;
input  [15:0] p_in_9_sample_M_imag_V_read;
input  [15:0] p_in_10_sample_M_imag_V_read;
input  [15:0] p_in_11_sample_M_imag_V_read;
input  [15:0] p_in_12_sample_M_imag_V_read;
input  [15:0] p_in_13_sample_M_imag_V_read;
input  [15:0] p_in_14_sample_M_imag_V_read;
input  [15:0] p_in_15_sample_M_imag_V_read;
input   p_in_0_valid_read;
input   p_in_1_valid_read;
input   p_in_2_valid_read;
input   p_in_3_valid_read;
input   p_in_4_valid_read;
input   p_in_5_valid_read;
input   p_in_6_valid_read;
input   p_in_7_valid_read;
input   p_in_8_valid_read;
input   p_in_9_valid_read;
input   p_in_10_valid_read;
input   p_in_11_valid_read;
input   p_in_12_valid_read;
input   p_in_13_valid_read;
input   p_in_14_valid_read;
input   p_in_15_valid_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [0:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [15:0] ap_return_5;
output  [15:0] ap_return_6;
output  [15:0] ap_return_7;
output  [15:0] ap_return_8;
output  [15:0] ap_return_9;
output  [15:0] ap_return_10;
output  [15:0] ap_return_11;
output  [15:0] ap_return_12;
output  [15:0] ap_return_13;
output  [15:0] ap_return_14;
output  [15:0] ap_return_15;
output  [15:0] ap_return_16;
output  [15:0] ap_return_17;
output  [15:0] ap_return_18;
output  [15:0] ap_return_19;
output  [15:0] ap_return_20;
output  [15:0] ap_return_21;
output  [15:0] ap_return_22;
output  [15:0] ap_return_23;
output  [15:0] ap_return_24;
output  [15:0] ap_return_25;
output  [15:0] ap_return_26;
output  [15:0] ap_return_27;
output  [15:0] ap_return_28;
output  [15:0] ap_return_29;
output  [15:0] ap_return_30;
output  [15:0] ap_return_31;
output  [15:0] ap_return_32;
output  [0:0] ap_return_33;
output  [0:0] ap_return_34;
output  [0:0] ap_return_35;
output  [0:0] ap_return_36;
output  [0:0] ap_return_37;
output  [0:0] ap_return_38;
output  [0:0] ap_return_39;
output  [0:0] ap_return_40;
output  [0:0] ap_return_41;
output  [0:0] ap_return_42;
output  [0:0] ap_return_43;
output  [0:0] ap_return_44;
output  [0:0] ap_return_45;
output  [0:0] ap_return_46;
output  [0:0] ap_return_47;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    delayline_Array_samp_294_ce0;
reg    delayline_Array_samp_294_we0;
wire   [15:0] delayline_Array_samp_294_q0;
reg    delayline_Array_samp_82_ce0;
reg    delayline_Array_samp_82_we0;
wire   [15:0] delayline_Array_samp_82_q0;
reg    delayline_Array_vali_96_ce0;
reg    delayline_Array_vali_96_we0;
wire   [0:0] delayline_Array_vali_96_d0;
wire   [0:0] delayline_Array_vali_96_q0;
reg    delayline_Array_samp_296_ce0;
reg    delayline_Array_samp_296_we0;
wire   [15:0] delayline_Array_samp_296_q0;
reg    delayline_Array_samp_84_ce0;
reg    delayline_Array_samp_84_we0;
wire   [15:0] delayline_Array_samp_84_q0;
reg    delayline_Array_vali_98_ce0;
reg    delayline_Array_vali_98_we0;
wire   [0:0] delayline_Array_vali_98_d0;
wire   [0:0] delayline_Array_vali_98_q0;
reg    delayline_Array_samp_300_ce0;
reg    delayline_Array_samp_300_we0;
wire   [15:0] delayline_Array_samp_300_q0;
reg    delayline_Array_samp_88_ce0;
reg    delayline_Array_samp_88_we0;
wire   [15:0] delayline_Array_samp_88_q0;
reg    delayline_Array_vali_105_ce0;
reg    delayline_Array_vali_105_we0;
wire   [0:0] delayline_Array_vali_105_d0;
wire   [0:0] delayline_Array_vali_105_q0;
reg    delayline_Array_samp_303_ce0;
reg    delayline_Array_samp_303_we0;
wire   [15:0] delayline_Array_samp_303_q0;
reg    delayline_Array_samp_91_ce0;
reg    delayline_Array_samp_91_we0;
wire   [15:0] delayline_Array_samp_91_q0;
reg    delayline_Array_vali_111_ce0;
reg    delayline_Array_vali_111_we0;
wire   [0:0] delayline_Array_vali_111_d0;
wire   [0:0] delayline_Array_vali_111_q0;
reg    delayline_Array_samp_306_ce0;
reg    delayline_Array_samp_306_we0;
wire   [15:0] delayline_Array_samp_306_q0;
reg    delayline_Array_samp_94_ce0;
reg    delayline_Array_samp_94_we0;
wire   [15:0] delayline_Array_samp_94_q0;
reg    delayline_Array_vali_117_ce0;
reg    delayline_Array_vali_117_we0;
wire   [0:0] delayline_Array_vali_117_d0;
wire   [0:0] delayline_Array_vali_117_q0;
reg    delayline_Array_samp_308_ce0;
reg    delayline_Array_samp_308_we0;
wire   [15:0] delayline_Array_samp_308_q0;
reg    delayline_Array_samp_96_ce0;
reg    delayline_Array_samp_96_we0;
wire   [15:0] delayline_Array_samp_96_q0;
reg    delayline_Array_vali_121_ce0;
reg    delayline_Array_vali_121_we0;
wire   [0:0] delayline_Array_vali_121_d0;
wire   [0:0] delayline_Array_vali_121_q0;
reg    delayline_Array_samp_311_ce0;
reg    delayline_Array_samp_311_we0;
wire   [15:0] delayline_Array_samp_311_q0;
reg    delayline_Array_samp_101_ce0;
reg    delayline_Array_samp_101_we0;
wire   [15:0] delayline_Array_samp_101_q0;
reg    delayline_Array_vali_127_ce0;
reg    delayline_Array_vali_127_we0;
wire   [0:0] delayline_Array_vali_127_d0;
wire   [0:0] delayline_Array_vali_127_q0;
reg    delayline_Array_samp_270_ce0;
reg    delayline_Array_samp_270_we0;
wire   [15:0] delayline_Array_samp_270_q0;
reg    delayline_Array_samp_59_ce0;
reg    delayline_Array_samp_59_we0;
wire   [15:0] delayline_Array_samp_59_q0;
reg    delayline_Array_vali_72_ce0;
reg    delayline_Array_vali_72_we0;
wire   [0:0] delayline_Array_vali_72_d0;
wire   [0:0] delayline_Array_vali_72_q0;
reg    delayline_Array_samp_272_ce0;
reg    delayline_Array_samp_272_we0;
wire   [15:0] delayline_Array_samp_272_q0;
reg    delayline_Array_samp_61_ce0;
reg    delayline_Array_samp_61_we0;
wire   [15:0] delayline_Array_samp_61_q0;
reg    delayline_Array_vali_74_ce0;
reg    delayline_Array_vali_74_we0;
wire   [0:0] delayline_Array_vali_74_d0;
wire   [0:0] delayline_Array_vali_74_q0;
reg    delayline_Array_samp_274_ce0;
reg    delayline_Array_samp_274_we0;
wire   [15:0] delayline_Array_samp_274_q0;
reg    delayline_Array_samp_63_ce0;
reg    delayline_Array_samp_63_we0;
wire   [15:0] delayline_Array_samp_63_q0;
reg    delayline_Array_vali_76_ce0;
reg    delayline_Array_vali_76_we0;
wire   [0:0] delayline_Array_vali_76_d0;
wire   [0:0] delayline_Array_vali_76_q0;
reg    delayline_Array_samp_279_ce0;
reg    delayline_Array_samp_279_we0;
wire   [15:0] delayline_Array_samp_279_q0;
reg    delayline_Array_samp_68_ce0;
reg    delayline_Array_samp_68_we0;
wire   [15:0] delayline_Array_samp_68_q0;
reg    delayline_Array_vali_81_ce0;
reg    delayline_Array_vali_81_we0;
wire   [0:0] delayline_Array_vali_81_d0;
wire   [0:0] delayline_Array_vali_81_q0;
reg    delayline_Array_samp_281_ce0;
reg    delayline_Array_samp_281_we0;
wire   [15:0] delayline_Array_samp_281_q0;
reg    delayline_Array_samp_70_ce0;
reg    delayline_Array_samp_70_we0;
wire   [15:0] delayline_Array_samp_70_q0;
reg    delayline_Array_vali_83_ce0;
reg    delayline_Array_vali_83_we0;
wire   [0:0] delayline_Array_vali_83_d0;
wire   [0:0] delayline_Array_vali_83_q0;
reg    delayline_Array_samp_284_ce0;
reg    delayline_Array_samp_284_we0;
wire   [15:0] delayline_Array_samp_284_q0;
reg    delayline_Array_samp_73_ce0;
reg    delayline_Array_samp_73_we0;
wire   [15:0] delayline_Array_samp_73_q0;
reg    delayline_Array_vali_86_ce0;
reg    delayline_Array_vali_86_we0;
wire   [0:0] delayline_Array_vali_86_d0;
wire   [0:0] delayline_Array_vali_86_q0;
reg    delayline_Array_samp_288_ce0;
reg    delayline_Array_samp_288_we0;
wire   [15:0] delayline_Array_samp_288_q0;
reg    delayline_Array_samp_76_ce0;
reg    delayline_Array_samp_76_we0;
wire   [15:0] delayline_Array_samp_76_q0;
reg    delayline_Array_vali_90_ce0;
reg    delayline_Array_vali_90_we0;
wire   [0:0] delayline_Array_vali_90_d0;
wire   [0:0] delayline_Array_vali_90_q0;
reg    delayline_Array_samp_291_ce0;
reg    delayline_Array_samp_291_we0;
wire   [15:0] delayline_Array_samp_291_q0;
reg    delayline_Array_samp_79_ce0;
reg    delayline_Array_samp_79_we0;
wire   [15:0] delayline_Array_samp_79_q0;
reg    delayline_Array_vali_93_ce0;
reg    delayline_Array_vali_93_we0;
wire   [0:0] delayline_Array_vali_93_d0;
wire   [0:0] delayline_Array_vali_93_q0;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

process_3_delayli7jG #(
    .DataWidth( 16 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
delayline_Array_samp_294_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd14),
    .ce0(delayline_Array_samp_294_ce0),
    .we0(delayline_Array_samp_294_we0),
    .d0(p_in_0_sample_M_real_V_read),
    .q0(delayline_Array_samp_294_q0)
);

process_3_delayli7jG #(
    .DataWidth( 16 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
delayline_Array_samp_82_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd14),
    .ce0(delayline_Array_samp_82_ce0),
    .we0(delayline_Array_samp_82_we0),
    .d0(p_in_0_sample_M_imag_V_read),
    .q0(delayline_Array_samp_82_q0)
);

process_3_delayli9j0 #(
    .DataWidth( 1 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
delayline_Array_vali_96_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd14),
    .ce0(delayline_Array_vali_96_ce0),
    .we0(delayline_Array_vali_96_we0),
    .d0(delayline_Array_vali_96_d0),
    .q0(delayline_Array_vali_96_q0)
);

process_4_delayliFfa #(
    .DataWidth( 16 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
delayline_Array_samp_296_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd13),
    .ce0(delayline_Array_samp_296_ce0),
    .we0(delayline_Array_samp_296_we0),
    .d0(p_in_1_sample_M_real_V_read),
    .q0(delayline_Array_samp_296_q0)
);

process_4_delayliFfa #(
    .DataWidth( 16 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
delayline_Array_samp_84_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd13),
    .ce0(delayline_Array_samp_84_ce0),
    .we0(delayline_Array_samp_84_we0),
    .d0(p_in_1_sample_M_imag_V_read),
    .q0(delayline_Array_samp_84_q0)
);

process_4_delayliHfu #(
    .DataWidth( 1 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
delayline_Array_vali_98_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd13),
    .ce0(delayline_Array_vali_98_ce0),
    .we0(delayline_Array_vali_98_we0),
    .d0(delayline_Array_vali_98_d0),
    .q0(delayline_Array_vali_98_q0)
);

process_4_delayliIfE #(
    .DataWidth( 16 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
delayline_Array_samp_300_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(delayline_Array_samp_300_ce0),
    .we0(delayline_Array_samp_300_we0),
    .d0(p_in_2_sample_M_real_V_read),
    .q0(delayline_Array_samp_300_q0)
);

process_4_delayliIfE #(
    .DataWidth( 16 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
delayline_Array_samp_88_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(delayline_Array_samp_88_ce0),
    .we0(delayline_Array_samp_88_we0),
    .d0(p_in_2_sample_M_imag_V_read),
    .q0(delayline_Array_samp_88_q0)
);

process_4_delayliKfY #(
    .DataWidth( 1 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
delayline_Array_vali_105_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(delayline_Array_vali_105_ce0),
    .we0(delayline_Array_vali_105_we0),
    .d0(delayline_Array_vali_105_d0),
    .q0(delayline_Array_vali_105_q0)
);

process_4_delayliLf8 #(
    .DataWidth( 16 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
delayline_Array_samp_303_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd11),
    .ce0(delayline_Array_samp_303_ce0),
    .we0(delayline_Array_samp_303_we0),
    .d0(p_in_3_sample_M_real_V_read),
    .q0(delayline_Array_samp_303_q0)
);

process_4_delayliLf8 #(
    .DataWidth( 16 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
delayline_Array_samp_91_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd11),
    .ce0(delayline_Array_samp_91_ce0),
    .we0(delayline_Array_samp_91_we0),
    .d0(p_in_3_sample_M_imag_V_read),
    .q0(delayline_Array_samp_91_q0)
);

process_4_delayliNgs #(
    .DataWidth( 1 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
delayline_Array_vali_111_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd11),
    .ce0(delayline_Array_vali_111_ce0),
    .we0(delayline_Array_vali_111_we0),
    .d0(delayline_Array_vali_111_d0),
    .q0(delayline_Array_vali_111_q0)
);

process_4_delayliOgC #(
    .DataWidth( 16 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
delayline_Array_samp_306_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(delayline_Array_samp_306_ce0),
    .we0(delayline_Array_samp_306_we0),
    .d0(p_in_4_sample_M_real_V_read),
    .q0(delayline_Array_samp_306_q0)
);

process_4_delayliOgC #(
    .DataWidth( 16 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
delayline_Array_samp_94_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(delayline_Array_samp_94_ce0),
    .we0(delayline_Array_samp_94_we0),
    .d0(p_in_4_sample_M_imag_V_read),
    .q0(delayline_Array_samp_94_q0)
);

process_4_delayliQgW #(
    .DataWidth( 1 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
delayline_Array_vali_117_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(delayline_Array_vali_117_ce0),
    .we0(delayline_Array_vali_117_we0),
    .d0(delayline_Array_vali_117_d0),
    .q0(delayline_Array_vali_117_q0)
);

process_5_delaylibkb #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
delayline_Array_samp_308_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd9),
    .ce0(delayline_Array_samp_308_ce0),
    .we0(delayline_Array_samp_308_we0),
    .d0(p_in_5_sample_M_real_V_read),
    .q0(delayline_Array_samp_308_q0)
);

process_5_delaylibkb #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
delayline_Array_samp_96_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd9),
    .ce0(delayline_Array_samp_96_ce0),
    .we0(delayline_Array_samp_96_we0),
    .d0(p_in_5_sample_M_imag_V_read),
    .q0(delayline_Array_samp_96_q0)
);

process_5_delaylidEe #(
    .DataWidth( 1 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
delayline_Array_vali_121_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd9),
    .ce0(delayline_Array_vali_121_ce0),
    .we0(delayline_Array_vali_121_we0),
    .d0(delayline_Array_vali_121_d0),
    .q0(delayline_Array_vali_121_q0)
);

process_5_delaylieOg #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
delayline_Array_samp_311_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd8),
    .ce0(delayline_Array_samp_311_ce0),
    .we0(delayline_Array_samp_311_we0),
    .d0(p_in_6_sample_M_real_V_read),
    .q0(delayline_Array_samp_311_q0)
);

process_5_delaylieOg #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
delayline_Array_samp_101_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd8),
    .ce0(delayline_Array_samp_101_ce0),
    .we0(delayline_Array_samp_101_we0),
    .d0(p_in_6_sample_M_imag_V_read),
    .q0(delayline_Array_samp_101_q0)
);

process_5_delaylig8j #(
    .DataWidth( 1 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
delayline_Array_vali_127_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd8),
    .ce0(delayline_Array_vali_127_ce0),
    .we0(delayline_Array_vali_127_we0),
    .d0(delayline_Array_vali_127_d0),
    .q0(delayline_Array_vali_127_q0)
);

process_5_delaylihbi #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
delayline_Array_samp_270_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(delayline_Array_samp_270_ce0),
    .we0(delayline_Array_samp_270_we0),
    .d0(p_in_7_sample_M_real_V_read),
    .q0(delayline_Array_samp_270_q0)
);

process_5_delaylihbi #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
delayline_Array_samp_59_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(delayline_Array_samp_59_ce0),
    .we0(delayline_Array_samp_59_we0),
    .d0(p_in_7_sample_M_imag_V_read),
    .q0(delayline_Array_samp_59_q0)
);

process_5_delaylijbC #(
    .DataWidth( 1 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
delayline_Array_vali_72_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(delayline_Array_vali_72_ce0),
    .we0(delayline_Array_vali_72_we0),
    .d0(delayline_Array_vali_72_d0),
    .q0(delayline_Array_vali_72_q0)
);

process_5_delaylikbM #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
delayline_Array_samp_272_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(delayline_Array_samp_272_ce0),
    .we0(delayline_Array_samp_272_we0),
    .d0(p_in_8_sample_M_real_V_read),
    .q0(delayline_Array_samp_272_q0)
);

process_5_delaylikbM #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
delayline_Array_samp_61_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(delayline_Array_samp_61_ce0),
    .we0(delayline_Array_samp_61_we0),
    .d0(p_in_8_sample_M_imag_V_read),
    .q0(delayline_Array_samp_61_q0)
);

process_5_delaylimb6 #(
    .DataWidth( 1 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
delayline_Array_vali_74_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(delayline_Array_vali_74_ce0),
    .we0(delayline_Array_vali_74_we0),
    .d0(delayline_Array_vali_74_d0),
    .q0(delayline_Array_vali_74_q0)
);

process_5_delaylincg #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
delayline_Array_samp_274_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(delayline_Array_samp_274_ce0),
    .we0(delayline_Array_samp_274_we0),
    .d0(p_in_9_sample_M_real_V_read),
    .q0(delayline_Array_samp_274_q0)
);

process_5_delaylincg #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
delayline_Array_samp_63_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(delayline_Array_samp_63_ce0),
    .we0(delayline_Array_samp_63_we0),
    .d0(p_in_9_sample_M_imag_V_read),
    .q0(delayline_Array_samp_63_q0)
);

process_5_delaylipcA #(
    .DataWidth( 1 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
delayline_Array_vali_76_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd5),
    .ce0(delayline_Array_vali_76_ce0),
    .we0(delayline_Array_vali_76_we0),
    .d0(delayline_Array_vali_76_d0),
    .q0(delayline_Array_vali_76_q0)
);

process_5_delayliqcK #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
delayline_Array_samp_279_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd4),
    .ce0(delayline_Array_samp_279_ce0),
    .we0(delayline_Array_samp_279_we0),
    .d0(p_in_10_sample_M_real_V_read),
    .q0(delayline_Array_samp_279_q0)
);

process_5_delayliqcK #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
delayline_Array_samp_68_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd4),
    .ce0(delayline_Array_samp_68_ce0),
    .we0(delayline_Array_samp_68_we0),
    .d0(p_in_10_sample_M_imag_V_read),
    .q0(delayline_Array_samp_68_q0)
);

process_5_delaylisc4 #(
    .DataWidth( 1 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
delayline_Array_vali_81_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd4),
    .ce0(delayline_Array_vali_81_ce0),
    .we0(delayline_Array_vali_81_we0),
    .d0(delayline_Array_vali_81_d0),
    .q0(delayline_Array_vali_81_q0)
);

process_5_delaylitde #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
delayline_Array_samp_281_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(delayline_Array_samp_281_ce0),
    .we0(delayline_Array_samp_281_we0),
    .d0(p_in_11_sample_M_real_V_read),
    .q0(delayline_Array_samp_281_q0)
);

process_5_delaylitde #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
delayline_Array_samp_70_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(delayline_Array_samp_70_ce0),
    .we0(delayline_Array_samp_70_we0),
    .d0(p_in_11_sample_M_imag_V_read),
    .q0(delayline_Array_samp_70_q0)
);

process_5_delaylivdy #(
    .DataWidth( 1 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
delayline_Array_vali_83_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(delayline_Array_vali_83_ce0),
    .we0(delayline_Array_vali_83_we0),
    .d0(delayline_Array_vali_83_d0),
    .q0(delayline_Array_vali_83_q0)
);

process_5_delayliwdI #(
    .DataWidth( 16 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
delayline_Array_samp_284_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd2),
    .ce0(delayline_Array_samp_284_ce0),
    .we0(delayline_Array_samp_284_we0),
    .d0(p_in_12_sample_M_real_V_read),
    .q0(delayline_Array_samp_284_q0)
);

process_5_delayliwdI #(
    .DataWidth( 16 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
delayline_Array_samp_73_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd2),
    .ce0(delayline_Array_samp_73_ce0),
    .we0(delayline_Array_samp_73_we0),
    .d0(p_in_12_sample_M_imag_V_read),
    .q0(delayline_Array_samp_73_q0)
);

process_5_delayliyd2 #(
    .DataWidth( 1 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
delayline_Array_vali_86_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd2),
    .ce0(delayline_Array_vali_86_ce0),
    .we0(delayline_Array_vali_86_we0),
    .d0(delayline_Array_vali_86_d0),
    .q0(delayline_Array_vali_86_q0)
);

process_5_delaylizec #(
    .DataWidth( 16 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
delayline_Array_samp_288_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd1),
    .ce0(delayline_Array_samp_288_ce0),
    .we0(delayline_Array_samp_288_we0),
    .d0(p_in_13_sample_M_real_V_read),
    .q0(delayline_Array_samp_288_q0)
);

process_5_delaylizec #(
    .DataWidth( 16 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
delayline_Array_samp_76_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd1),
    .ce0(delayline_Array_samp_76_ce0),
    .we0(delayline_Array_samp_76_we0),
    .d0(p_in_13_sample_M_imag_V_read),
    .q0(delayline_Array_samp_76_q0)
);

process_5_delayliBew #(
    .DataWidth( 1 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
delayline_Array_vali_90_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd1),
    .ce0(delayline_Array_vali_90_ce0),
    .we0(delayline_Array_vali_90_we0),
    .d0(delayline_Array_vali_90_d0),
    .q0(delayline_Array_vali_90_q0)
);

process_5_delayliCeG #(
    .DataWidth( 16 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
delayline_Array_samp_291_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd0),
    .ce0(delayline_Array_samp_291_ce0),
    .we0(delayline_Array_samp_291_we0),
    .d0(p_in_14_sample_M_real_V_read),
    .q0(delayline_Array_samp_291_q0)
);

process_5_delayliCeG #(
    .DataWidth( 16 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
delayline_Array_samp_79_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd0),
    .ce0(delayline_Array_samp_79_ce0),
    .we0(delayline_Array_samp_79_we0),
    .d0(p_in_14_sample_M_imag_V_read),
    .q0(delayline_Array_samp_79_q0)
);

process_5_delayliEe0 #(
    .DataWidth( 1 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
delayline_Array_vali_93_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(1'd0),
    .ce0(delayline_Array_vali_93_ce0),
    .we0(delayline_Array_vali_93_we0),
    .d0(delayline_Array_vali_93_d0),
    .q0(delayline_Array_vali_93_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_101_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_101_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_101_we0 = 1'd1;
    end else begin
        delayline_Array_samp_101_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_270_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_270_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_270_we0 = 1'd1;
    end else begin
        delayline_Array_samp_270_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_272_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_272_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_272_we0 = 1'd1;
    end else begin
        delayline_Array_samp_272_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_274_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_274_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_274_we0 = 1'd1;
    end else begin
        delayline_Array_samp_274_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_279_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_279_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_279_we0 = 1'd1;
    end else begin
        delayline_Array_samp_279_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_281_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_281_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_281_we0 = 1'd1;
    end else begin
        delayline_Array_samp_281_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_284_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_284_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_284_we0 = 1'd1;
    end else begin
        delayline_Array_samp_284_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_288_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_288_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_288_we0 = 1'd1;
    end else begin
        delayline_Array_samp_288_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_291_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_291_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_291_we0 = 1'd1;
    end else begin
        delayline_Array_samp_291_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_294_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_294_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_294_we0 = 1'd1;
    end else begin
        delayline_Array_samp_294_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_296_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_296_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_296_we0 = 1'd1;
    end else begin
        delayline_Array_samp_296_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_300_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_300_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_300_we0 = 1'd1;
    end else begin
        delayline_Array_samp_300_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_303_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_303_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_303_we0 = 1'd1;
    end else begin
        delayline_Array_samp_303_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_306_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_306_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_306_we0 = 1'd1;
    end else begin
        delayline_Array_samp_306_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_308_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_308_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_308_we0 = 1'd1;
    end else begin
        delayline_Array_samp_308_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_311_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_311_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_311_we0 = 1'd1;
    end else begin
        delayline_Array_samp_311_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_59_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_59_we0 = 1'd1;
    end else begin
        delayline_Array_samp_59_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_61_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_61_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_61_we0 = 1'd1;
    end else begin
        delayline_Array_samp_61_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_63_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_63_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_63_we0 = 1'd1;
    end else begin
        delayline_Array_samp_63_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_68_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_68_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_68_we0 = 1'd1;
    end else begin
        delayline_Array_samp_68_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_70_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_70_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_70_we0 = 1'd1;
    end else begin
        delayline_Array_samp_70_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_73_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_73_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_73_we0 = 1'd1;
    end else begin
        delayline_Array_samp_73_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_76_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_76_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_76_we0 = 1'd1;
    end else begin
        delayline_Array_samp_76_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_79_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_79_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_79_we0 = 1'd1;
    end else begin
        delayline_Array_samp_79_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_82_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_82_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_82_we0 = 1'd1;
    end else begin
        delayline_Array_samp_82_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_84_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_84_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_84_we0 = 1'd1;
    end else begin
        delayline_Array_samp_84_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_88_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_88_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_88_we0 = 1'd1;
    end else begin
        delayline_Array_samp_88_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_91_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_91_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_91_we0 = 1'd1;
    end else begin
        delayline_Array_samp_91_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_94_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_94_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_94_we0 = 1'd1;
    end else begin
        delayline_Array_samp_94_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_96_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_96_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_96_we0 = 1'd1;
    end else begin
        delayline_Array_samp_96_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_105_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_105_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_105_we0 = 1'd1;
    end else begin
        delayline_Array_vali_105_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_111_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_111_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_111_we0 = 1'd1;
    end else begin
        delayline_Array_vali_111_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_117_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_117_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_117_we0 = 1'd1;
    end else begin
        delayline_Array_vali_117_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_121_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_121_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_121_we0 = 1'd1;
    end else begin
        delayline_Array_vali_121_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_127_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_127_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_127_we0 = 1'd1;
    end else begin
        delayline_Array_vali_127_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_72_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_72_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_72_we0 = 1'd1;
    end else begin
        delayline_Array_vali_72_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_74_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_74_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_74_we0 = 1'd1;
    end else begin
        delayline_Array_vali_74_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_76_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_76_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_76_we0 = 1'd1;
    end else begin
        delayline_Array_vali_76_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_81_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_81_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_81_we0 = 1'd1;
    end else begin
        delayline_Array_vali_81_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_83_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_83_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_83_we0 = 1'd1;
    end else begin
        delayline_Array_vali_83_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_86_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_86_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_86_we0 = 1'd1;
    end else begin
        delayline_Array_vali_86_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_90_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_90_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_90_we0 = 1'd1;
    end else begin
        delayline_Array_vali_90_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_93_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_93_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_93_we0 = 1'd1;
    end else begin
        delayline_Array_vali_93_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_96_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_96_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_96_we0 = 1'd1;
    end else begin
        delayline_Array_vali_96_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_98_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_98_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_98_we0 = 1'd1;
    end else begin
        delayline_Array_vali_98_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_return_0 = delayline_Array_samp_294_q0;

assign ap_return_1 = delayline_Array_samp_82_q0;

assign ap_return_10 = delayline_Array_samp_272_q0;

assign ap_return_11 = delayline_Array_samp_274_q0;

assign ap_return_12 = delayline_Array_samp_279_q0;

assign ap_return_13 = delayline_Array_samp_281_q0;

assign ap_return_14 = delayline_Array_samp_284_q0;

assign ap_return_15 = delayline_Array_samp_288_q0;

assign ap_return_16 = delayline_Array_samp_291_q0;

assign ap_return_17 = p_in_15_sample_M_real_V_read;

assign ap_return_18 = delayline_Array_samp_84_q0;

assign ap_return_19 = delayline_Array_samp_88_q0;

assign ap_return_2 = delayline_Array_vali_96_q0;

assign ap_return_20 = delayline_Array_samp_91_q0;

assign ap_return_21 = delayline_Array_samp_94_q0;

assign ap_return_22 = delayline_Array_samp_96_q0;

assign ap_return_23 = delayline_Array_samp_101_q0;

assign ap_return_24 = delayline_Array_samp_59_q0;

assign ap_return_25 = delayline_Array_samp_61_q0;

assign ap_return_26 = delayline_Array_samp_63_q0;

assign ap_return_27 = delayline_Array_samp_68_q0;

assign ap_return_28 = delayline_Array_samp_70_q0;

assign ap_return_29 = delayline_Array_samp_73_q0;

assign ap_return_3 = delayline_Array_samp_296_q0;

assign ap_return_30 = delayline_Array_samp_76_q0;

assign ap_return_31 = delayline_Array_samp_79_q0;

assign ap_return_32 = p_in_15_sample_M_imag_V_read;

assign ap_return_33 = delayline_Array_vali_98_q0;

assign ap_return_34 = delayline_Array_vali_105_q0;

assign ap_return_35 = delayline_Array_vali_111_q0;

assign ap_return_36 = delayline_Array_vali_117_q0;

assign ap_return_37 = delayline_Array_vali_121_q0;

assign ap_return_38 = delayline_Array_vali_127_q0;

assign ap_return_39 = delayline_Array_vali_72_q0;

assign ap_return_4 = delayline_Array_samp_300_q0;

assign ap_return_40 = delayline_Array_vali_74_q0;

assign ap_return_41 = delayline_Array_vali_76_q0;

assign ap_return_42 = delayline_Array_vali_81_q0;

assign ap_return_43 = delayline_Array_vali_83_q0;

assign ap_return_44 = delayline_Array_vali_86_q0;

assign ap_return_45 = delayline_Array_vali_90_q0;

assign ap_return_46 = delayline_Array_vali_93_q0;

assign ap_return_47 = p_in_15_valid_read;

assign ap_return_5 = delayline_Array_samp_303_q0;

assign ap_return_6 = delayline_Array_samp_306_q0;

assign ap_return_7 = delayline_Array_samp_308_q0;

assign ap_return_8 = delayline_Array_samp_311_q0;

assign ap_return_9 = delayline_Array_samp_270_q0;

assign delayline_Array_vali_105_d0 = p_in_2_valid_read;

assign delayline_Array_vali_111_d0 = p_in_3_valid_read;

assign delayline_Array_vali_117_d0 = p_in_4_valid_read;

assign delayline_Array_vali_121_d0 = p_in_5_valid_read;

assign delayline_Array_vali_127_d0 = p_in_6_valid_read;

assign delayline_Array_vali_72_d0 = p_in_7_valid_read;

assign delayline_Array_vali_74_d0 = p_in_8_valid_read;

assign delayline_Array_vali_76_d0 = p_in_9_valid_read;

assign delayline_Array_vali_81_d0 = p_in_10_valid_read;

assign delayline_Array_vali_83_d0 = p_in_11_valid_read;

assign delayline_Array_vali_86_d0 = p_in_12_valid_read;

assign delayline_Array_vali_90_d0 = p_in_13_valid_read;

assign delayline_Array_vali_93_d0 = p_in_14_valid_read;

assign delayline_Array_vali_96_d0 = p_in_0_valid_read;

assign delayline_Array_vali_98_d0 = p_in_1_valid_read;

endmodule //process_3
