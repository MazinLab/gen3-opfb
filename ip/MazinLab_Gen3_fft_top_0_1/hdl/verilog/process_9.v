// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_in_0_sample_M_real_V_read,
        p_in_1_sample_M_real_V_read,
        p_in_2_sample_M_real_V_read,
        p_in_3_sample_M_real_V_read,
        p_in_4_sample_M_real_V_read,
        p_in_5_sample_M_real_V_read,
        p_in_6_sample_M_real_V_read,
        p_in_7_sample_M_real_V_read,
        p_in_8_sample_M_real_V_read,
        p_in_9_sample_M_real_V_read,
        p_in_10_sample_M_real_V_read,
        p_in_11_sample_M_real_V_read,
        p_in_12_sample_M_real_V_read,
        p_in_13_sample_M_real_V_read,
        p_in_14_sample_M_real_V_read,
        p_in_15_sample_M_real_V_read,
        p_in_0_sample_M_imag_V_read,
        p_in_1_sample_M_imag_V_read,
        p_in_2_sample_M_imag_V_read,
        p_in_3_sample_M_imag_V_read,
        p_in_4_sample_M_imag_V_read,
        p_in_5_sample_M_imag_V_read,
        p_in_6_sample_M_imag_V_read,
        p_in_7_sample_M_imag_V_read,
        p_in_8_sample_M_imag_V_read,
        p_in_9_sample_M_imag_V_read,
        p_in_10_sample_M_imag_V_read,
        p_in_11_sample_M_imag_V_read,
        p_in_12_sample_M_imag_V_read,
        p_in_13_sample_M_imag_V_read,
        p_in_14_sample_M_imag_V_read,
        p_in_15_sample_M_imag_V_read,
        p_in_0_valid_read,
        p_in_1_valid_read,
        p_in_2_valid_read,
        p_in_3_valid_read,
        p_in_4_valid_read,
        p_in_5_valid_read,
        p_in_6_valid_read,
        p_in_7_valid_read,
        p_in_8_valid_read,
        p_in_9_valid_read,
        p_in_10_valid_read,
        p_in_11_valid_read,
        p_in_12_valid_read,
        p_in_13_valid_read,
        p_in_14_valid_read,
        p_in_15_valid_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_return_33,
        ap_return_34,
        ap_return_35,
        ap_return_36,
        ap_return_37,
        ap_return_38,
        ap_return_39,
        ap_return_40,
        ap_return_41,
        ap_return_42,
        ap_return_43,
        ap_return_44,
        ap_return_45,
        ap_return_46,
        ap_return_47,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_in_0_sample_M_real_V_read;
input  [15:0] p_in_1_sample_M_real_V_read;
input  [15:0] p_in_2_sample_M_real_V_read;
input  [15:0] p_in_3_sample_M_real_V_read;
input  [15:0] p_in_4_sample_M_real_V_read;
input  [15:0] p_in_5_sample_M_real_V_read;
input  [15:0] p_in_6_sample_M_real_V_read;
input  [15:0] p_in_7_sample_M_real_V_read;
input  [15:0] p_in_8_sample_M_real_V_read;
input  [15:0] p_in_9_sample_M_real_V_read;
input  [15:0] p_in_10_sample_M_real_V_read;
input  [15:0] p_in_11_sample_M_real_V_read;
input  [15:0] p_in_12_sample_M_real_V_read;
input  [15:0] p_in_13_sample_M_real_V_read;
input  [15:0] p_in_14_sample_M_real_V_read;
input  [15:0] p_in_15_sample_M_real_V_read;
input  [15:0] p_in_0_sample_M_imag_V_read;
input  [15:0] p_in_1_sample_M_imag_V_read;
input  [15:0] p_in_2_sample_M_imag_V_read;
input  [15:0] p_in_3_sample_M_imag_V_read;
input  [15:0] p_in_4_sample_M_imag_V_read;
input  [15:0] p_in_5_sample_M_imag_V_read;
input  [15:0] p_in_6_sample_M_imag_V_read;
input  [15:0] p_in_7_sample_M_imag_V_read;
input  [15:0] p_in_8_sample_M_imag_V_read;
input  [15:0] p_in_9_sample_M_imag_V_read;
input  [15:0] p_in_10_sample_M_imag_V_read;
input  [15:0] p_in_11_sample_M_imag_V_read;
input  [15:0] p_in_12_sample_M_imag_V_read;
input  [15:0] p_in_13_sample_M_imag_V_read;
input  [15:0] p_in_14_sample_M_imag_V_read;
input  [15:0] p_in_15_sample_M_imag_V_read;
input   p_in_0_valid_read;
input   p_in_1_valid_read;
input   p_in_2_valid_read;
input   p_in_3_valid_read;
input   p_in_4_valid_read;
input   p_in_5_valid_read;
input   p_in_6_valid_read;
input   p_in_7_valid_read;
input   p_in_8_valid_read;
input   p_in_9_valid_read;
input   p_in_10_valid_read;
input   p_in_11_valid_read;
input   p_in_12_valid_read;
input   p_in_13_valid_read;
input   p_in_14_valid_read;
input   p_in_15_valid_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [0:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [15:0] ap_return_5;
output  [15:0] ap_return_6;
output  [15:0] ap_return_7;
output  [15:0] ap_return_8;
output  [15:0] ap_return_9;
output  [15:0] ap_return_10;
output  [15:0] ap_return_11;
output  [15:0] ap_return_12;
output  [15:0] ap_return_13;
output  [15:0] ap_return_14;
output  [15:0] ap_return_15;
output  [15:0] ap_return_16;
output  [15:0] ap_return_17;
output  [15:0] ap_return_18;
output  [15:0] ap_return_19;
output  [15:0] ap_return_20;
output  [15:0] ap_return_21;
output  [15:0] ap_return_22;
output  [15:0] ap_return_23;
output  [15:0] ap_return_24;
output  [15:0] ap_return_25;
output  [15:0] ap_return_26;
output  [15:0] ap_return_27;
output  [15:0] ap_return_28;
output  [15:0] ap_return_29;
output  [15:0] ap_return_30;
output  [15:0] ap_return_31;
output  [15:0] ap_return_32;
output  [0:0] ap_return_33;
output  [0:0] ap_return_34;
output  [0:0] ap_return_35;
output  [0:0] ap_return_36;
output  [0:0] ap_return_37;
output  [0:0] ap_return_38;
output  [0:0] ap_return_39;
output  [0:0] ap_return_40;
output  [0:0] ap_return_41;
output  [0:0] ap_return_42;
output  [0:0] ap_return_43;
output  [0:0] ap_return_44;
output  [0:0] ap_return_45;
output  [0:0] ap_return_46;
output  [0:0] ap_return_47;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    delayline_Array_samp_49_ce0;
reg    delayline_Array_samp_49_we0;
wire   [15:0] delayline_Array_samp_49_q0;
reg    delayline_Array_samp_213_ce0;
reg    delayline_Array_samp_213_we0;
wire   [15:0] delayline_Array_samp_213_q0;
reg    delayline_Array_vali_47_ce0;
reg    delayline_Array_vali_47_we0;
wire   [0:0] delayline_Array_vali_47_d0;
wire   [0:0] delayline_Array_vali_47_q0;
reg    delayline_Array_samp_53_ce0;
reg    delayline_Array_samp_53_we0;
wire   [15:0] delayline_Array_samp_53_q0;
reg    delayline_Array_samp_219_ce0;
reg    delayline_Array_samp_219_we0;
wire   [15:0] delayline_Array_samp_219_q0;
reg    delayline_Array_vali_52_ce0;
reg    delayline_Array_vali_52_we0;
wire   [0:0] delayline_Array_vali_52_d0;
wire   [0:0] delayline_Array_vali_52_q0;
reg    delayline_Array_samp_276_ce0;
reg    delayline_Array_samp_276_we0;
wire   [15:0] delayline_Array_samp_276_q0;
reg    delayline_Array_samp_65_ce0;
reg    delayline_Array_samp_65_we0;
wire   [15:0] delayline_Array_samp_65_q0;
reg    delayline_Array_vali_58_ce0;
reg    delayline_Array_vali_58_we0;
wire   [0:0] delayline_Array_vali_58_d0;
wire   [0:0] delayline_Array_vali_58_q0;
reg    delayline_Array_samp_301_ce0;
reg    delayline_Array_samp_301_we0;
wire   [15:0] delayline_Array_samp_301_q0;
reg    delayline_Array_samp_89_ce0;
reg    delayline_Array_samp_89_we0;
wire   [15:0] delayline_Array_samp_89_q0;
reg    delayline_Array_vali_91_ce0;
reg    delayline_Array_vali_91_we0;
wire   [0:0] delayline_Array_vali_91_d0;
wire   [0:0] delayline_Array_vali_91_q0;
reg    delayline_Array_samp_325_ce0;
reg    delayline_Array_samp_325_we0;
wire   [15:0] delayline_Array_samp_325_q0;
reg    delayline_Array_samp_129_ce0;
reg    delayline_Array_samp_129_we0;
wire   [15:0] delayline_Array_samp_129_q0;
reg    delayline_Array_vali_131_ce0;
reg    delayline_Array_vali_131_we0;
wire   [0:0] delayline_Array_vali_131_d0;
wire   [0:0] delayline_Array_vali_131_q0;
reg    delayline_Array_samp_287_ce0;
reg    delayline_Array_samp_287_we0;
wire   [15:0] delayline_Array_samp_287_q0;
reg    delayline_Array_samp_262_ce0;
reg    delayline_Array_samp_262_we0;
wire   [15:0] delayline_Array_samp_262_q0;
reg    delayline_Array_vali_160_ce0;
reg    delayline_Array_vali_160_we0;
wire   [0:0] delayline_Array_vali_160_d0;
wire   [0:0] delayline_Array_vali_160_q0;
reg    delayline_Array_samp_75_ce0;
reg    delayline_Array_samp_75_we0;
wire   [15:0] delayline_Array_samp_75_q0;
reg    delayline_Array_samp_223_ce0;
reg    delayline_Array_samp_223_we0;
wire   [15:0] delayline_Array_samp_223_q0;
reg    delayline_Array_vali_54_ce0;
reg    delayline_Array_vali_54_we0;
wire   [0:0] delayline_Array_vali_54_d0;
wire   [0:0] delayline_Array_vali_54_q0;
reg    delayline_Array_samp_229_ce0;
reg    delayline_Array_samp_229_we0;
wire   [15:0] delayline_Array_samp_229_q0;
reg    delayline_Array_samp_241_ce0;
reg    delayline_Array_samp_241_we0;
wire   [15:0] delayline_Array_samp_241_q0;
reg    delayline_Array_vali_64_ce0;
reg    delayline_Array_vali_64_we0;
wire   [0:0] delayline_Array_vali_64_d0;
wire   [0:0] delayline_Array_vali_64_q0;
reg    delayline_Array_samp_278_ce0;
reg    delayline_Array_samp_278_we0;
wire   [15:0] delayline_Array_samp_278_q0;
reg    delayline_Array_samp_67_ce0;
reg    delayline_Array_samp_67_we0;
wire   [15:0] delayline_Array_samp_67_q0;
reg    delayline_Array_vali_80_ce0;
reg    delayline_Array_vali_80_we0;
wire   [0:0] delayline_Array_vali_80_d0;
wire   [0:0] delayline_Array_vali_80_q0;
reg    delayline_Array_samp_305_ce0;
reg    delayline_Array_samp_305_we0;
wire   [15:0] delayline_Array_samp_305_q0;
reg    delayline_Array_samp_93_ce0;
reg    delayline_Array_samp_93_we0;
wire   [15:0] delayline_Array_samp_93_q0;
reg    delayline_Array_vali_115_ce0;
reg    delayline_Array_vali_115_we0;
wire   [0:0] delayline_Array_vali_115_d0;
wire   [0:0] delayline_Array_vali_115_q0;
reg    delayline_Array_samp_332_ce0;
reg    delayline_Array_samp_332_we0;
wire   [15:0] delayline_Array_samp_332_q0;
reg    delayline_Array_samp_143_ce0;
reg    delayline_Array_samp_143_we0;
wire   [15:0] delayline_Array_samp_143_q0;
reg    delayline_Array_vali_155_ce0;
reg    delayline_Array_vali_155_we0;
wire   [0:0] delayline_Array_vali_155_d0;
wire   [0:0] delayline_Array_vali_155_q0;
reg    delayline_Array_samp_37_ce0;
reg    delayline_Array_samp_37_we0;
wire   [15:0] delayline_Array_samp_37_q0;
reg    delayline_Array_samp_201_ce0;
reg    delayline_Array_samp_201_we0;
wire   [15:0] delayline_Array_samp_201_q0;
reg    delayline_Array_vali_37_ce0;
reg    delayline_Array_vali_37_we0;
wire   [0:0] delayline_Array_vali_37_d0;
wire   [0:0] delayline_Array_vali_37_q0;
reg    delayline_Array_samp_33_ce0;
reg    delayline_Array_samp_33_we0;
wire   [15:0] delayline_Array_samp_33_q0;
reg    delayline_Array_samp_197_ce0;
reg    delayline_Array_samp_197_we0;
wire   [15:0] delayline_Array_samp_197_q0;
reg    delayline_Array_vali_31_ce0;
reg    delayline_Array_vali_31_we0;
wire   [0:0] delayline_Array_vali_31_d0;
wire   [0:0] delayline_Array_vali_31_q0;
reg    delayline_Array_samp_39_ce0;
reg    delayline_Array_samp_39_we0;
wire   [15:0] delayline_Array_samp_39_q0;
reg    delayline_Array_samp_203_ce0;
reg    delayline_Array_samp_203_we0;
wire   [15:0] delayline_Array_samp_203_q0;
reg    delayline_Array_vali_35_ce0;
reg    delayline_Array_vali_35_we0;
wire   [0:0] delayline_Array_vali_35_d0;
wire   [0:0] delayline_Array_vali_35_q0;
reg    delayline_Array_samp_45_ce0;
reg    delayline_Array_samp_45_we0;
wire   [15:0] delayline_Array_samp_45_q0;
reg    delayline_Array_samp_209_ce0;
reg    delayline_Array_samp_209_we0;
wire   [15:0] delayline_Array_samp_209_q0;
reg    delayline_Array_vali_41_ce0;
reg    delayline_Array_vali_41_we0;
wire   [0:0] delayline_Array_vali_41_d0;
wire   [0:0] delayline_Array_vali_41_q0;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

process_9_delaylicOA #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
delayline_Array_samp_49_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd239),
    .ce0(delayline_Array_samp_49_ce0),
    .we0(delayline_Array_samp_49_we0),
    .d0(p_in_0_sample_M_real_V_read),
    .q0(delayline_Array_samp_49_q0)
);

process_9_delaylicOA #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
delayline_Array_samp_213_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd239),
    .ce0(delayline_Array_samp_213_ce0),
    .we0(delayline_Array_samp_213_we0),
    .d0(p_in_0_sample_M_imag_V_read),
    .q0(delayline_Array_samp_213_q0)
);

process_9_delaylicQA #(
    .DataWidth( 1 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
delayline_Array_vali_47_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd239),
    .ce0(delayline_Array_vali_47_ce0),
    .we0(delayline_Array_vali_47_we0),
    .d0(delayline_Array_vali_47_d0),
    .q0(delayline_Array_vali_47_q0)
);

process_10_delaylcow #(
    .DataWidth( 16 ),
    .AddressRange( 224 ),
    .AddressWidth( 8 ))
delayline_Array_samp_53_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd223),
    .ce0(delayline_Array_samp_53_ce0),
    .we0(delayline_Array_samp_53_we0),
    .d0(p_in_1_sample_M_real_V_read),
    .q0(delayline_Array_samp_53_q0)
);

process_10_delaylcow #(
    .DataWidth( 16 ),
    .AddressRange( 224 ),
    .AddressWidth( 8 ))
delayline_Array_samp_219_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd223),
    .ce0(delayline_Array_samp_219_ce0),
    .we0(delayline_Array_samp_219_we0),
    .d0(p_in_1_sample_M_imag_V_read),
    .q0(delayline_Array_samp_219_q0)
);

process_10_delaylcqw #(
    .DataWidth( 1 ),
    .AddressRange( 224 ),
    .AddressWidth( 8 ))
delayline_Array_vali_52_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd223),
    .ce0(delayline_Array_vali_52_ce0),
    .we0(delayline_Array_vali_52_we0),
    .d0(delayline_Array_vali_52_d0),
    .q0(delayline_Array_vali_52_q0)
);

process_10_delaylcrw #(
    .DataWidth( 16 ),
    .AddressRange( 208 ),
    .AddressWidth( 8 ))
delayline_Array_samp_276_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd207),
    .ce0(delayline_Array_samp_276_ce0),
    .we0(delayline_Array_samp_276_we0),
    .d0(p_in_2_sample_M_real_V_read),
    .q0(delayline_Array_samp_276_q0)
);

process_10_delaylcrw #(
    .DataWidth( 16 ),
    .AddressRange( 208 ),
    .AddressWidth( 8 ))
delayline_Array_samp_65_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd207),
    .ce0(delayline_Array_samp_65_ce0),
    .we0(delayline_Array_samp_65_we0),
    .d0(p_in_2_sample_M_imag_V_read),
    .q0(delayline_Array_samp_65_q0)
);

process_10_delaylctx #(
    .DataWidth( 1 ),
    .AddressRange( 208 ),
    .AddressWidth( 8 ))
delayline_Array_vali_58_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd207),
    .ce0(delayline_Array_vali_58_ce0),
    .we0(delayline_Array_vali_58_we0),
    .d0(delayline_Array_vali_58_d0),
    .q0(delayline_Array_vali_58_q0)
);

process_10_delaylcux #(
    .DataWidth( 16 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
delayline_Array_samp_301_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd191),
    .ce0(delayline_Array_samp_301_ce0),
    .we0(delayline_Array_samp_301_we0),
    .d0(p_in_3_sample_M_real_V_read),
    .q0(delayline_Array_samp_301_q0)
);

process_10_delaylcux #(
    .DataWidth( 16 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
delayline_Array_samp_89_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd191),
    .ce0(delayline_Array_samp_89_ce0),
    .we0(delayline_Array_samp_89_we0),
    .d0(p_in_3_sample_M_imag_V_read),
    .q0(delayline_Array_samp_89_q0)
);

process_10_delaylcwx #(
    .DataWidth( 1 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
delayline_Array_vali_91_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd191),
    .ce0(delayline_Array_vali_91_ce0),
    .we0(delayline_Array_vali_91_we0),
    .d0(delayline_Array_vali_91_d0),
    .q0(delayline_Array_vali_91_q0)
);

process_10_delaylcxx #(
    .DataWidth( 16 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
delayline_Array_samp_325_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd175),
    .ce0(delayline_Array_samp_325_ce0),
    .we0(delayline_Array_samp_325_we0),
    .d0(p_in_4_sample_M_real_V_read),
    .q0(delayline_Array_samp_325_q0)
);

process_10_delaylcxx #(
    .DataWidth( 16 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
delayline_Array_samp_129_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd175),
    .ce0(delayline_Array_samp_129_ce0),
    .we0(delayline_Array_samp_129_we0),
    .d0(p_in_4_sample_M_imag_V_read),
    .q0(delayline_Array_samp_129_q0)
);

process_10_delaylczy #(
    .DataWidth( 1 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
delayline_Array_vali_131_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd175),
    .ce0(delayline_Array_vali_131_ce0),
    .we0(delayline_Array_vali_131_we0),
    .d0(delayline_Array_vali_131_d0),
    .q0(delayline_Array_vali_131_q0)
);

process_11_delaylbUr #(
    .DataWidth( 16 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
delayline_Array_samp_287_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd159),
    .ce0(delayline_Array_samp_287_ce0),
    .we0(delayline_Array_samp_287_we0),
    .d0(p_in_5_sample_M_real_V_read),
    .q0(delayline_Array_samp_287_q0)
);

process_11_delaylbUr #(
    .DataWidth( 16 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
delayline_Array_samp_262_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd159),
    .ce0(delayline_Array_samp_262_ce0),
    .we0(delayline_Array_samp_262_we0),
    .d0(p_in_5_sample_M_imag_V_read),
    .q0(delayline_Array_samp_262_q0)
);

process_11_delaylbWr #(
    .DataWidth( 1 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
delayline_Array_vali_160_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd159),
    .ce0(delayline_Array_vali_160_ce0),
    .we0(delayline_Array_vali_160_we0),
    .d0(delayline_Array_vali_160_d0),
    .q0(delayline_Array_vali_160_q0)
);

process_11_delaylbXr #(
    .DataWidth( 16 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
delayline_Array_samp_75_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd143),
    .ce0(delayline_Array_samp_75_ce0),
    .we0(delayline_Array_samp_75_we0),
    .d0(p_in_6_sample_M_real_V_read),
    .q0(delayline_Array_samp_75_q0)
);

process_11_delaylbXr #(
    .DataWidth( 16 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
delayline_Array_samp_223_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd143),
    .ce0(delayline_Array_samp_223_ce0),
    .we0(delayline_Array_samp_223_we0),
    .d0(p_in_6_sample_M_imag_V_read),
    .q0(delayline_Array_samp_223_q0)
);

process_11_delaylbZs #(
    .DataWidth( 1 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
delayline_Array_vali_54_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(8'd143),
    .ce0(delayline_Array_vali_54_ce0),
    .we0(delayline_Array_vali_54_we0),
    .d0(delayline_Array_vali_54_d0),
    .q0(delayline_Array_vali_54_q0)
);

process_11_delaylb0s #(
    .DataWidth( 16 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delayline_Array_samp_229_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delayline_Array_samp_229_ce0),
    .we0(delayline_Array_samp_229_we0),
    .d0(p_in_7_sample_M_real_V_read),
    .q0(delayline_Array_samp_229_q0)
);

process_11_delaylb0s #(
    .DataWidth( 16 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delayline_Array_samp_241_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delayline_Array_samp_241_ce0),
    .we0(delayline_Array_samp_241_we0),
    .d0(p_in_7_sample_M_imag_V_read),
    .q0(delayline_Array_samp_241_q0)
);

process_11_delaylb2s #(
    .DataWidth( 1 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
delayline_Array_vali_64_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd127),
    .ce0(delayline_Array_vali_64_ce0),
    .we0(delayline_Array_vali_64_we0),
    .d0(delayline_Array_vali_64_d0),
    .q0(delayline_Array_vali_64_q0)
);

process_11_delaylb3s #(
    .DataWidth( 16 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
delayline_Array_samp_278_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd111),
    .ce0(delayline_Array_samp_278_ce0),
    .we0(delayline_Array_samp_278_we0),
    .d0(p_in_8_sample_M_real_V_read),
    .q0(delayline_Array_samp_278_q0)
);

process_11_delaylb3s #(
    .DataWidth( 16 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
delayline_Array_samp_67_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd111),
    .ce0(delayline_Array_samp_67_ce0),
    .we0(delayline_Array_samp_67_we0),
    .d0(p_in_8_sample_M_imag_V_read),
    .q0(delayline_Array_samp_67_q0)
);

process_11_delaylb5t #(
    .DataWidth( 1 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
delayline_Array_vali_80_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd111),
    .ce0(delayline_Array_vali_80_ce0),
    .we0(delayline_Array_vali_80_we0),
    .d0(delayline_Array_vali_80_d0),
    .q0(delayline_Array_vali_80_q0)
);

process_11_delaylb6t #(
    .DataWidth( 16 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
delayline_Array_samp_305_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd95),
    .ce0(delayline_Array_samp_305_ce0),
    .we0(delayline_Array_samp_305_we0),
    .d0(p_in_9_sample_M_real_V_read),
    .q0(delayline_Array_samp_305_q0)
);

process_11_delaylb6t #(
    .DataWidth( 16 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
delayline_Array_samp_93_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd95),
    .ce0(delayline_Array_samp_93_ce0),
    .we0(delayline_Array_samp_93_we0),
    .d0(p_in_9_sample_M_imag_V_read),
    .q0(delayline_Array_samp_93_q0)
);

process_11_delaylb8t #(
    .DataWidth( 1 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
delayline_Array_vali_115_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd95),
    .ce0(delayline_Array_vali_115_ce0),
    .we0(delayline_Array_vali_115_we0),
    .d0(delayline_Array_vali_115_d0),
    .q0(delayline_Array_vali_115_q0)
);

process_11_delaylb9t #(
    .DataWidth( 16 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
delayline_Array_samp_332_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd79),
    .ce0(delayline_Array_samp_332_ce0),
    .we0(delayline_Array_samp_332_we0),
    .d0(p_in_10_sample_M_real_V_read),
    .q0(delayline_Array_samp_332_q0)
);

process_11_delaylb9t #(
    .DataWidth( 16 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
delayline_Array_samp_143_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd79),
    .ce0(delayline_Array_samp_143_ce0),
    .we0(delayline_Array_samp_143_we0),
    .d0(p_in_10_sample_M_imag_V_read),
    .q0(delayline_Array_samp_143_q0)
);

process_11_delaylcbu #(
    .DataWidth( 1 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
delayline_Array_vali_155_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(7'd79),
    .ce0(delayline_Array_vali_155_ce0),
    .we0(delayline_Array_vali_155_we0),
    .d0(delayline_Array_vali_155_d0),
    .q0(delayline_Array_vali_155_q0)
);

process_11_delaylccu #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
delayline_Array_samp_37_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(delayline_Array_samp_37_ce0),
    .we0(delayline_Array_samp_37_we0),
    .d0(p_in_11_sample_M_real_V_read),
    .q0(delayline_Array_samp_37_q0)
);

process_11_delaylccu #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
delayline_Array_samp_201_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(delayline_Array_samp_201_ce0),
    .we0(delayline_Array_samp_201_we0),
    .d0(p_in_11_sample_M_imag_V_read),
    .q0(delayline_Array_samp_201_q0)
);

process_11_delaylceu #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
delayline_Array_vali_37_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(delayline_Array_vali_37_ce0),
    .we0(delayline_Array_vali_37_we0),
    .d0(delayline_Array_vali_37_d0),
    .q0(delayline_Array_vali_37_q0)
);

process_11_delaylcfu #(
    .DataWidth( 16 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
delayline_Array_samp_33_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd47),
    .ce0(delayline_Array_samp_33_ce0),
    .we0(delayline_Array_samp_33_we0),
    .d0(p_in_12_sample_M_real_V_read),
    .q0(delayline_Array_samp_33_q0)
);

process_11_delaylcfu #(
    .DataWidth( 16 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
delayline_Array_samp_197_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd47),
    .ce0(delayline_Array_samp_197_ce0),
    .we0(delayline_Array_samp_197_we0),
    .d0(p_in_12_sample_M_imag_V_read),
    .q0(delayline_Array_samp_197_q0)
);

process_11_delaylchv #(
    .DataWidth( 1 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
delayline_Array_vali_31_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd47),
    .ce0(delayline_Array_vali_31_ce0),
    .we0(delayline_Array_vali_31_we0),
    .d0(delayline_Array_vali_31_d0),
    .q0(delayline_Array_vali_31_q0)
);

process_11_delaylciv #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
delayline_Array_samp_39_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(delayline_Array_samp_39_ce0),
    .we0(delayline_Array_samp_39_we0),
    .d0(p_in_13_sample_M_real_V_read),
    .q0(delayline_Array_samp_39_q0)
);

process_11_delaylciv #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
delayline_Array_samp_203_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(delayline_Array_samp_203_ce0),
    .we0(delayline_Array_samp_203_we0),
    .d0(p_in_13_sample_M_imag_V_read),
    .q0(delayline_Array_samp_203_q0)
);

process_11_delaylckv #(
    .DataWidth( 1 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
delayline_Array_vali_35_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd31),
    .ce0(delayline_Array_vali_35_ce0),
    .we0(delayline_Array_vali_35_we0),
    .d0(delayline_Array_vali_35_d0),
    .q0(delayline_Array_vali_35_q0)
);

process_11_delaylclv #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
delayline_Array_samp_45_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(delayline_Array_samp_45_ce0),
    .we0(delayline_Array_samp_45_we0),
    .d0(p_in_14_sample_M_real_V_read),
    .q0(delayline_Array_samp_45_q0)
);

process_11_delaylclv #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
delayline_Array_samp_209_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(delayline_Array_samp_209_ce0),
    .we0(delayline_Array_samp_209_we0),
    .d0(p_in_14_sample_M_imag_V_read),
    .q0(delayline_Array_samp_209_q0)
);

process_11_delaylcnw #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
delayline_Array_vali_41_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd15),
    .ce0(delayline_Array_vali_41_ce0),
    .we0(delayline_Array_vali_41_we0),
    .d0(delayline_Array_vali_41_d0),
    .q0(delayline_Array_vali_41_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_129_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_129_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_129_we0 = 1'd1;
    end else begin
        delayline_Array_samp_129_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_143_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_143_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_143_we0 = 1'd1;
    end else begin
        delayline_Array_samp_143_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_197_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_197_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_197_we0 = 1'd1;
    end else begin
        delayline_Array_samp_197_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_201_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_201_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_201_we0 = 1'd1;
    end else begin
        delayline_Array_samp_201_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_203_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_203_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_203_we0 = 1'd1;
    end else begin
        delayline_Array_samp_203_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_209_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_209_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_209_we0 = 1'd1;
    end else begin
        delayline_Array_samp_209_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_213_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_213_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_213_we0 = 1'd1;
    end else begin
        delayline_Array_samp_213_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_219_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_219_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_219_we0 = 1'd1;
    end else begin
        delayline_Array_samp_219_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_223_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_223_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_223_we0 = 1'd1;
    end else begin
        delayline_Array_samp_223_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_229_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_229_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_229_we0 = 1'd1;
    end else begin
        delayline_Array_samp_229_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_241_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_241_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_241_we0 = 1'd1;
    end else begin
        delayline_Array_samp_241_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_262_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_262_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_262_we0 = 1'd1;
    end else begin
        delayline_Array_samp_262_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_276_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_276_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_276_we0 = 1'd1;
    end else begin
        delayline_Array_samp_276_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_278_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_278_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_278_we0 = 1'd1;
    end else begin
        delayline_Array_samp_278_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_287_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_287_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_287_we0 = 1'd1;
    end else begin
        delayline_Array_samp_287_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_301_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_301_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_301_we0 = 1'd1;
    end else begin
        delayline_Array_samp_301_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_305_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_305_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_305_we0 = 1'd1;
    end else begin
        delayline_Array_samp_305_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_325_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_325_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_325_we0 = 1'd1;
    end else begin
        delayline_Array_samp_325_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_332_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_332_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_332_we0 = 1'd1;
    end else begin
        delayline_Array_samp_332_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_33_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_33_we0 = 1'd1;
    end else begin
        delayline_Array_samp_33_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_37_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_37_we0 = 1'd1;
    end else begin
        delayline_Array_samp_37_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_39_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_39_we0 = 1'd1;
    end else begin
        delayline_Array_samp_39_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_45_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_45_we0 = 1'd1;
    end else begin
        delayline_Array_samp_45_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_49_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_49_we0 = 1'd1;
    end else begin
        delayline_Array_samp_49_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_53_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_53_we0 = 1'd1;
    end else begin
        delayline_Array_samp_53_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_65_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_65_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_65_we0 = 1'd1;
    end else begin
        delayline_Array_samp_65_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_67_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_67_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_67_we0 = 1'd1;
    end else begin
        delayline_Array_samp_67_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_75_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_75_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_75_we0 = 1'd1;
    end else begin
        delayline_Array_samp_75_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_89_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_89_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_89_we0 = 1'd1;
    end else begin
        delayline_Array_samp_89_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_93_ce0 = 1'd1;
    end else begin
        delayline_Array_samp_93_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_samp_93_we0 = 1'd1;
    end else begin
        delayline_Array_samp_93_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_115_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_115_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_115_we0 = 1'd1;
    end else begin
        delayline_Array_vali_115_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_131_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_131_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_131_we0 = 1'd1;
    end else begin
        delayline_Array_vali_131_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_155_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_155_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_155_we0 = 1'd1;
    end else begin
        delayline_Array_vali_155_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_160_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_160_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_160_we0 = 1'd1;
    end else begin
        delayline_Array_vali_160_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_31_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_31_we0 = 1'd1;
    end else begin
        delayline_Array_vali_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_35_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_35_we0 = 1'd1;
    end else begin
        delayline_Array_vali_35_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_37_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_37_we0 = 1'd1;
    end else begin
        delayline_Array_vali_37_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_41_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_41_we0 = 1'd1;
    end else begin
        delayline_Array_vali_41_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_47_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_47_we0 = 1'd1;
    end else begin
        delayline_Array_vali_47_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_52_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_52_we0 = 1'd1;
    end else begin
        delayline_Array_vali_52_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_54_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_54_we0 = 1'd1;
    end else begin
        delayline_Array_vali_54_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_58_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_58_we0 = 1'd1;
    end else begin
        delayline_Array_vali_58_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_64_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_64_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_64_we0 = 1'd1;
    end else begin
        delayline_Array_vali_64_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_80_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_80_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_80_we0 = 1'd1;
    end else begin
        delayline_Array_vali_80_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_91_ce0 = 1'd1;
    end else begin
        delayline_Array_vali_91_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        delayline_Array_vali_91_we0 = 1'd1;
    end else begin
        delayline_Array_vali_91_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_return_0 = delayline_Array_samp_49_q0;

assign ap_return_1 = delayline_Array_samp_213_q0;

assign ap_return_10 = delayline_Array_samp_278_q0;

assign ap_return_11 = delayline_Array_samp_305_q0;

assign ap_return_12 = delayline_Array_samp_332_q0;

assign ap_return_13 = delayline_Array_samp_37_q0;

assign ap_return_14 = delayline_Array_samp_33_q0;

assign ap_return_15 = delayline_Array_samp_39_q0;

assign ap_return_16 = delayline_Array_samp_45_q0;

assign ap_return_17 = p_in_15_sample_M_real_V_read;

assign ap_return_18 = delayline_Array_samp_219_q0;

assign ap_return_19 = delayline_Array_samp_65_q0;

assign ap_return_2 = delayline_Array_vali_47_q0;

assign ap_return_20 = delayline_Array_samp_89_q0;

assign ap_return_21 = delayline_Array_samp_129_q0;

assign ap_return_22 = delayline_Array_samp_262_q0;

assign ap_return_23 = delayline_Array_samp_223_q0;

assign ap_return_24 = delayline_Array_samp_241_q0;

assign ap_return_25 = delayline_Array_samp_67_q0;

assign ap_return_26 = delayline_Array_samp_93_q0;

assign ap_return_27 = delayline_Array_samp_143_q0;

assign ap_return_28 = delayline_Array_samp_201_q0;

assign ap_return_29 = delayline_Array_samp_197_q0;

assign ap_return_3 = delayline_Array_samp_53_q0;

assign ap_return_30 = delayline_Array_samp_203_q0;

assign ap_return_31 = delayline_Array_samp_209_q0;

assign ap_return_32 = p_in_15_sample_M_imag_V_read;

assign ap_return_33 = delayline_Array_vali_52_q0;

assign ap_return_34 = delayline_Array_vali_58_q0;

assign ap_return_35 = delayline_Array_vali_91_q0;

assign ap_return_36 = delayline_Array_vali_131_q0;

assign ap_return_37 = delayline_Array_vali_160_q0;

assign ap_return_38 = delayline_Array_vali_54_q0;

assign ap_return_39 = delayline_Array_vali_64_q0;

assign ap_return_4 = delayline_Array_samp_276_q0;

assign ap_return_40 = delayline_Array_vali_80_q0;

assign ap_return_41 = delayline_Array_vali_115_q0;

assign ap_return_42 = delayline_Array_vali_155_q0;

assign ap_return_43 = delayline_Array_vali_37_q0;

assign ap_return_44 = delayline_Array_vali_31_q0;

assign ap_return_45 = delayline_Array_vali_35_q0;

assign ap_return_46 = delayline_Array_vali_41_q0;

assign ap_return_47 = p_in_15_valid_read;

assign ap_return_5 = delayline_Array_samp_301_q0;

assign ap_return_6 = delayline_Array_samp_325_q0;

assign ap_return_7 = delayline_Array_samp_287_q0;

assign ap_return_8 = delayline_Array_samp_75_q0;

assign ap_return_9 = delayline_Array_samp_229_q0;

assign delayline_Array_vali_115_d0 = p_in_9_valid_read;

assign delayline_Array_vali_131_d0 = p_in_4_valid_read;

assign delayline_Array_vali_155_d0 = p_in_10_valid_read;

assign delayline_Array_vali_160_d0 = p_in_5_valid_read;

assign delayline_Array_vali_31_d0 = p_in_12_valid_read;

assign delayline_Array_vali_35_d0 = p_in_13_valid_read;

assign delayline_Array_vali_37_d0 = p_in_11_valid_read;

assign delayline_Array_vali_41_d0 = p_in_14_valid_read;

assign delayline_Array_vali_47_d0 = p_in_0_valid_read;

assign delayline_Array_vali_52_d0 = p_in_1_valid_read;

assign delayline_Array_vali_54_d0 = p_in_6_valid_read;

assign delayline_Array_vali_58_d0 = p_in_2_valid_read;

assign delayline_Array_vali_64_d0 = p_in_7_valid_read;

assign delayline_Array_vali_80_d0 = p_in_8_valid_read;

assign delayline_Array_vali_91_d0 = p_in_3_valid_read;

endmodule //process_9
