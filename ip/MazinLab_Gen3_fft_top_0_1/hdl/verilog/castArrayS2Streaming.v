// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module castArrayS2Streaming (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_inData_dout,
        p_inData_empty_n,
        p_inData_read,
        p_outData_V_superSample_din,
        p_outData_V_superSample_full_n,
        p_outData_V_superSample_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] p_inData_dout;
input   p_inData_empty_n;
output   p_inData_read;
output  [511:0] p_outData_V_superSample_din;
input   p_outData_V_superSample_full_n;
output   p_outData_V_superSample_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_inData_read;
reg p_outData_V_superSample_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_inData_blk_n;
wire    ap_CS_fsm_state2;
reg    p_outData_V_superSample_blk_n;
wire   [7:0] t_fu_603_p2;
reg    ap_block_state2;
reg    ap_block_state1;
wire   [0:0] icmp_ln58_fu_609_p2;
reg   [7:0] t_01_reg_206;
wire   [15:0] p_inData_M_imag_V_l_14_fu_524_p4;
wire   [15:0] p_inData_M_imag_V_l_13_fu_504_p4;
wire   [15:0] p_inData_M_imag_V_l_12_fu_484_p4;
wire   [15:0] p_inData_M_imag_V_l_11_fu_464_p4;
wire   [15:0] p_inData_M_imag_V_l_10_fu_444_p4;
wire   [15:0] p_inData_M_imag_V_l_15_fu_424_p4;
wire   [15:0] p_inData_M_imag_V_l_9_fu_404_p4;
wire   [15:0] p_inData_M_imag_V_l_8_fu_384_p4;
wire   [15:0] p_inData_M_imag_V_l_7_fu_364_p4;
wire   [15:0] p_inData_M_imag_V_l_6_fu_344_p4;
wire   [15:0] p_inData_M_imag_V_l_5_fu_324_p4;
wire   [15:0] p_inData_M_imag_V_l_4_fu_304_p4;
wire   [15:0] p_inData_M_imag_V_l_3_fu_284_p4;
wire   [15:0] p_inData_M_imag_V_l_2_fu_264_p4;
wire   [15:0] p_inData_M_imag_V_l_1_fu_244_p4;
wire   [15:0] p_inData_M_imag_V_l_fu_224_p4;
wire   [15:0] p_inData_M_real_V_l_14_fu_514_p4;
wire   [15:0] p_inData_M_real_V_l_13_fu_494_p4;
wire   [15:0] p_inData_M_real_V_l_12_fu_474_p4;
wire   [15:0] p_inData_M_real_V_l_11_fu_454_p4;
wire   [15:0] p_inData_M_real_V_l_10_fu_434_p4;
wire   [15:0] p_inData_M_real_V_l_fu_414_p4;
wire   [15:0] p_inData_M_real_V_l_9_fu_394_p4;
wire   [15:0] p_inData_M_real_V_l_8_fu_374_p4;
wire   [15:0] p_inData_M_real_V_l_7_fu_354_p4;
wire   [15:0] p_inData_M_real_V_l_6_fu_334_p4;
wire   [15:0] p_inData_M_real_V_l_5_fu_314_p4;
wire   [15:0] p_inData_M_real_V_l_4_fu_294_p4;
wire   [15:0] p_inData_M_real_V_l_3_fu_274_p4;
wire   [15:0] p_inData_M_real_V_l_2_fu_254_p4;
wire   [15:0] p_inData_M_real_V_l_1_fu_234_p4;
wire   [15:0] trunc_ln203_fu_220_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (p_outData_V_superSample_full_n == 1'b0) | (p_inData_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln58_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_outData_V_superSample_full_n == 1'b0) | (p_inData_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln58_fu_609_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_01_reg_206 <= t_fu_603_p2;
    end else if (((~((ap_start == 1'b0) | (p_outData_V_superSample_full_n == 1'b0) | (p_inData_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln58_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        t_01_reg_206 <= 8'd0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_outData_V_superSample_full_n == 1'b0) | (p_inData_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln58_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_outData_V_superSample_full_n == 1'b0) | (p_inData_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln58_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_blk_n = p_inData_empty_n;
    end else begin
        p_inData_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_outData_V_superSample_full_n == 1'b0) | (p_inData_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_read = 1'b1;
    end else begin
        p_inData_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outData_V_superSample_blk_n = p_outData_V_superSample_full_n;
    end else begin
        p_outData_V_superSample_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_outData_V_superSample_full_n == 1'b0) | (p_inData_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outData_V_superSample_write = 1'b1;
    end else begin
        p_outData_V_superSample_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((ap_start == 1'b0) | (p_outData_V_superSample_full_n == 1'b0) | (p_inData_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln58_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((ap_start == 1'b0) | (p_outData_V_superSample_full_n == 1'b0) | (p_inData_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((ap_start == 1'b0) | (p_outData_V_superSample_full_n == 1'b0) | (p_inData_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln58_fu_609_p2 = ((t_01_reg_206 == 8'd255) ? 1'b1 : 1'b0);

assign p_inData_M_imag_V_l_10_fu_444_p4 = {{p_inData_dout[383:368]}};

assign p_inData_M_imag_V_l_11_fu_464_p4 = {{p_inData_dout[415:400]}};

assign p_inData_M_imag_V_l_12_fu_484_p4 = {{p_inData_dout[447:432]}};

assign p_inData_M_imag_V_l_13_fu_504_p4 = {{p_inData_dout[479:464]}};

assign p_inData_M_imag_V_l_14_fu_524_p4 = {{p_inData_dout[511:496]}};

assign p_inData_M_imag_V_l_15_fu_424_p4 = {{p_inData_dout[351:336]}};

assign p_inData_M_imag_V_l_1_fu_244_p4 = {{p_inData_dout[63:48]}};

assign p_inData_M_imag_V_l_2_fu_264_p4 = {{p_inData_dout[95:80]}};

assign p_inData_M_imag_V_l_3_fu_284_p4 = {{p_inData_dout[127:112]}};

assign p_inData_M_imag_V_l_4_fu_304_p4 = {{p_inData_dout[159:144]}};

assign p_inData_M_imag_V_l_5_fu_324_p4 = {{p_inData_dout[191:176]}};

assign p_inData_M_imag_V_l_6_fu_344_p4 = {{p_inData_dout[223:208]}};

assign p_inData_M_imag_V_l_7_fu_364_p4 = {{p_inData_dout[255:240]}};

assign p_inData_M_imag_V_l_8_fu_384_p4 = {{p_inData_dout[287:272]}};

assign p_inData_M_imag_V_l_9_fu_404_p4 = {{p_inData_dout[319:304]}};

assign p_inData_M_imag_V_l_fu_224_p4 = {{p_inData_dout[31:16]}};

assign p_inData_M_real_V_l_10_fu_434_p4 = {{p_inData_dout[367:352]}};

assign p_inData_M_real_V_l_11_fu_454_p4 = {{p_inData_dout[399:384]}};

assign p_inData_M_real_V_l_12_fu_474_p4 = {{p_inData_dout[431:416]}};

assign p_inData_M_real_V_l_13_fu_494_p4 = {{p_inData_dout[463:448]}};

assign p_inData_M_real_V_l_14_fu_514_p4 = {{p_inData_dout[495:480]}};

assign p_inData_M_real_V_l_1_fu_234_p4 = {{p_inData_dout[47:32]}};

assign p_inData_M_real_V_l_2_fu_254_p4 = {{p_inData_dout[79:64]}};

assign p_inData_M_real_V_l_3_fu_274_p4 = {{p_inData_dout[111:96]}};

assign p_inData_M_real_V_l_4_fu_294_p4 = {{p_inData_dout[143:128]}};

assign p_inData_M_real_V_l_5_fu_314_p4 = {{p_inData_dout[175:160]}};

assign p_inData_M_real_V_l_6_fu_334_p4 = {{p_inData_dout[207:192]}};

assign p_inData_M_real_V_l_7_fu_354_p4 = {{p_inData_dout[239:224]}};

assign p_inData_M_real_V_l_8_fu_374_p4 = {{p_inData_dout[271:256]}};

assign p_inData_M_real_V_l_9_fu_394_p4 = {{p_inData_dout[303:288]}};

assign p_inData_M_real_V_l_fu_414_p4 = {{p_inData_dout[335:320]}};

assign p_outData_V_superSample_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{p_inData_M_imag_V_l_14_fu_524_p4}, {p_inData_M_imag_V_l_13_fu_504_p4}}, {p_inData_M_imag_V_l_12_fu_484_p4}}, {p_inData_M_imag_V_l_11_fu_464_p4}}, {p_inData_M_imag_V_l_10_fu_444_p4}}, {p_inData_M_imag_V_l_15_fu_424_p4}}, {p_inData_M_imag_V_l_9_fu_404_p4}}, {p_inData_M_imag_V_l_8_fu_384_p4}}, {p_inData_M_imag_V_l_7_fu_364_p4}}, {p_inData_M_imag_V_l_6_fu_344_p4}}, {p_inData_M_imag_V_l_5_fu_324_p4}}, {p_inData_M_imag_V_l_4_fu_304_p4}}, {p_inData_M_imag_V_l_3_fu_284_p4}}, {p_inData_M_imag_V_l_2_fu_264_p4}}, {p_inData_M_imag_V_l_1_fu_244_p4}}, {p_inData_M_imag_V_l_fu_224_p4}}, {p_inData_M_real_V_l_14_fu_514_p4}}, {p_inData_M_real_V_l_13_fu_494_p4}}, {p_inData_M_real_V_l_12_fu_474_p4}}, {p_inData_M_real_V_l_11_fu_454_p4}}, {p_inData_M_real_V_l_10_fu_434_p4}}, {p_inData_M_real_V_l_fu_414_p4}}, {p_inData_M_real_V_l_9_fu_394_p4}}, {p_inData_M_real_V_l_8_fu_374_p4}}, {p_inData_M_real_V_l_7_fu_354_p4}}, {p_inData_M_real_V_l_6_fu_334_p4}}, {p_inData_M_real_V_l_5_fu_314_p4}}, {p_inData_M_real_V_l_4_fu_294_p4}}, {p_inData_M_real_V_l_3_fu_274_p4}}, {p_inData_M_real_V_l_2_fu_254_p4}}, {p_inData_M_real_V_l_1_fu_234_p4}}, {trunc_ln203_fu_220_p1}};

assign t_fu_603_p2 = (8'd1 + t_01_reg_206);

assign trunc_ln203_fu_220_p1 = p_inData_dout[15:0];

endmodule //castArrayS2Streaming
